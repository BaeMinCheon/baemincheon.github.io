<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LET US GO ABROAD</title>
  
  
  <link href="https://baemincheon.github.io/atom.xml" rel="self"/>
  
  <link href="https://baemincheon.github.io/"/>
  <updated>2025-09-09T14:20:58.000Z</updated>
  <id>https://baemincheon.github.io/</id>
  
  <author>
    <name>MinCheon Bae</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>introduction to AI with XOR problem</title>
    <link href="https://baemincheon.github.io/2025/09/09/introduction-to-ai-with-xor-problem/"/>
    <id>https://baemincheon.github.io/2025/09/09/introduction-to-ai-with-xor-problem/</id>
    <published>2025-09-09T14:20:58.000Z</published>
    <updated>2025-09-09T14:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Presented for the first time at 2018<br>Translated into Korean</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/01.png" class=""><p>VHPC Lab 은 글쓴이가 재학했던 학교의 IT 연구실입니다.</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/02.png" class=""><p>.</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/03.png" class=""><p>.</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/04.png" class=""><p>인공지능이란 무엇인가<br>자연적으로 정의되지 않은 지능<br>반대의 경우, 자연지능<br>인공지능은 주로 기계를 통해 구현되기 때문에, 기계지능이라고도 불림<br>지능을 가진다는 것은, 스스로 학습하고 추론하여 결정함을 의미</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/05.png" class=""><p>초기 인공지능<br>임의 알고리듬을 사용함<br>코드가 인공지능의 동작을 정의<br>하드웨어의 성격을 지님<br>동작을 수정하는 것이 (비교적) 어려움<br>제작자에 따라 인공지능 성능이 엇갈림<br>1980년대의 전문가 시스템이 대표적인 예시</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/06.png" class=""><p>머신러닝이란<br>인공지능 구현 방법론 중 하나<br>concept: 데이터가 인공지능의 동작을 정의<br>소프트웨어의 성격을 지님<br>동작을 수정하는 것이 (비교적) 쉬움<br>입력된 데이터와 학습전략에 따라 인공지능 성능이 엇갈림</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/07.png" class=""><p>뉴런<br>신경망을 구성<br>각 뉴런은 신호를 전파함<br>입력값이 threshold 보다 커질 경우<br>입출력 : 수상돌기 &#x2F; 축색돌기 (즉, 신경접합부 ㅡsynapseㅡ)<br>“뇌를 모방해보면 어떨까”에 대한 영감 ㅡinspiringㅡ</p><p>퍼셉트론<br>뉴런을 모방함<br>각 퍼셉트론은 값을 전파함<br>조건을 만족할 때 계산을 수행함<br>입출력 : 단말<br>노드와 단말로 구성됨</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/08.png" class=""><p>인공 신경망이란<br>자연 신경망을 모방한 망 ㅡnetworkㅡ<br>다양한 계산들이 내포됨<br>대부분은 더하기와 곱하기<br>출력값을 수정하기 용이한 설계<br>가중치 변수만 조절하면 됨<br>이러한 구조가 학습 비용을 절감함</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/09.png" class=""><p>인공 신경망을 활용한 머신러닝<br>단일 퍼셉트론을 사용한 인공 신경망부터 시작되었음<br>여러 가지 이유로 효과적이지 않았음<br>부족한 컴퓨팅 파워<br>비효율적인 학습 전략<br>대규모 데이터셋의 부재</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/10.png" class=""><p>딥러닝이란<br>머신러닝의 일종으로서, Deep Neural Network (이하, D.N.N.) 를 사용함<br>(인공) 신경망이 매우 복잡하고 거대할 경우, 이를 D.N.N. 이라 부름<br>다양한 레이어 유형들이 제공되어 유연함</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/11.png" class=""><p>왜 딥러닝이 유용한가<br>여러 가지 문제점들이 해결됨<br>부족한 컴퓨팅 파워<br>비효율적인 학습 전략<br>대규모 데이터셋의 부재</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/12.png" class=""><p>초기 머신러닝과 딥러닝의 비교<br>2012년부터, 딥러닝 기반 인공지능이 I.L.S.V.R.C. 기반 인공지능을 이김<br>2016년부터, 해당 영역은 (딥러닝 기반) 인공지능이 장악해버린 것을 알 수 있음</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/13.png" class=""><p>더 자세히<br>초기 머신러닝<br>어떻게 결과를 도출할지 제작자가 결정<br>(예컨대, 자동차를 인식하기 위해 둥근 선이 바퀴의 특징이고 각진 선이 차체의 특징이라고 정의)<br>딥러닝<br>어떻게 결과를 도출할지조차 인공지능이 결정<br>(예컨대, 자동차를 인식하기 위한 특징이 무엇인지 알려주지 않음)<br>딥러닝 같은 방식이 (요즘 들어) 추천됨<br>물론 장단점은 있음</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/14.png" class=""><p>(생략)</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/15.png" class=""><p>.</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/16.png" class=""><p>Gradient Method 란<br>선형시스템을 수치계산으로 풀어내는 방법론<br>그 중에서도, Gradient Descent 를 다룰 것 (인공신경망의 가중치값을 조정하는 데에 사용되는 알고리듬)<br>다음 상황을 가정<br>곱하기 연산에 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>=</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x = -2, y = 3) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span> 두 가지 입력값이 제공됨<br>출력값을 0 에 가깝게 만들고 싶음<br>입력값만 수정할 수 있음</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/17.png" class=""><p>무작위 검색은 어떨까<br>계산할 때마다 무작위 값을 생성<br>하지만, 항상 운이 좋을 수는 없음<br>f (함수 출력값) 는 -6 보다 높아질 수도 있음<br>하지만 (높아진다 하더라도) 234,281,855 같은 큰 수여도 괜찮을까</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/18.png" class=""><p>편미분이란<br>변수가 여러 개인 함수를 미분하는 방법<br>여러 개의 변수들 중 하나만을 다룸<br>나머지 변수들은 상수 취급<br>변수 개수에 상관 없이, 공식은 고정</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/19.png" class=""><p>Numerical Gradient 란<br>각 입력값에 대해 편미분을 적용하는 방법<br>(편미분 값을 계속해서 더함)<br>최적해 찾는 꽤 좋은 방법<br>하지만 연산비용이 높음<br>(단, 정밀한 조작 위해 step size 라는 배수 적용)</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mi>y</mi><mspace linebreak="newline"></mspace><mtext> </mtext><mspace linebreak="newline"></mspace><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>h</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi>h</mi></mfrac><mo>=</mo><mfrac><mrow><mi>x</mi><mi>y</mi><mo>+</mo><mi>h</mi><mi>y</mi><mo>−</mo><mi>x</mi><mi>y</mi></mrow><mi>h</mi></mfrac><mo>=</mo><mfrac><mrow><mi>h</mi><mi>y</mi></mrow><mi>h</mi></mfrac><mo>=</mo><mi>y</mi><mspace linebreak="newline"></mspace><mtext> </mtext><mspace linebreak="newline"></mspace><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>h</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><mi>h</mi></mfrac><mo>=</mo><mfrac><mrow><mi>x</mi><mi>y</mi><mo>+</mo><mi>h</mi><mi>x</mi><mo>−</mo><mi>x</mi><mi>y</mi></mrow><mi>h</mi></mfrac><mo>=</mo><mfrac><mrow><mi>h</mi><mi>x</mi></mrow><mi>h</mi></mfrac><mo>=</mo><mi>x</mi><mspace linebreak="newline"></mspace><mtext> </mtext><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">f(x,y) = xy \\ \space \\\frac{\partial f(x,y)}{\partial x} = \frac{f(x+h,y)-f(x,y)}{h} = \frac{xy + hy - xy}{h} = \frac{hy}{h} = y \\ \space \\\frac{\partial f(x,y)}{\partial y} = \frac{f(x,y+h)-f(x,y)}{h} = \frac{xy + hx - xy}{h} = \frac{hx}{h} = x \\ \space \\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">h</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.4911em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">h</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2772em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace"> </span></span><span class="mspace newline"></span></span></span><img src="/2025/09/09/introduction-to-ai-with-xor-problem/20.png" class=""><p>편미분 값은 출력값에 대한 (입력값이 가지는) 영향력을 의미<br>(우리가 해야할 것은) 단지 f 값이 0 을 넘어갈 때 멈추는 것<br>step size 값이 더 정밀하면 오류값도 적음</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/21.png" class=""><p>Analytic Gradient 란<br>Numerical Gradient 의 개선판<br>계산비용에서 보다 효율적임<br>미분값을 (매번 계산하지 않고) 고정된 값 사용</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/22.png" class=""><p>이전 예제에 적용해볼 경우<br>효율성 때문에, 모든 인공지능 프레임워크에서는 이러한 방법을 사용<br>아무리 더하기 빼기 곱하기 같은 간단한 계산뿐이라고 해도, 총량에서 수 배 십 수 배 차이가 날 수 있기 때문</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/23.png" class=""><p>다중연산을 어떻게 푸는가<br>일반적인 경우, 한 가지 연산만 사용하지 않음<br>그런데, 다중연산일 경우에는 각 연산들이 서로의 정보를 알 수 없음<br>(그럼에도 불구하고, 편미분값을 알아야 학습을 할 수 있을 텐데 이를 어떻게 하는가가 관건)<br>입력값으로 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>=</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>z</mi><mo>=</mo><mo>−</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x = -2, y = 5, z = -4) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">4</span><span class="mclose">)</span></span></span></span><br>연산으로 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo separator="true">,</mo><mi>f</mi><mo>=</mo><mi>q</mi><mo>⋅</mo><mi>z</mi><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">q = x + y, f = q \cdot z = (x + y) \cdot z </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span> 를 가정</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/24.png" class=""><p>(앞서 살펴봤던 내용과 마찬가지로) q 에 대한 편미분값은 z 이고, z 에 대한 편미분값은 q<br>x 에 대한 편미분값은 1 이고, y 에 대한 편미분값은 1<br>이렇게만 결론지으면 되는 걸까<br>아니다. 우리가 구한 것은 각 연산에서의 국소적 편미분값들이고, 우리가 원하는 것은 f 값에 대한 x y z 변수들의 편미분값이다<br>(당연하게도, 우리가 조절할 수 있는 값은 x y z 세 가지 변수뿐이기 때문)<br>즉, 추가로 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mo separator="true">,</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial f(q,z)}{\partial x}, \frac{\partial f(q,z)}{\partial y} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4911em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 를 찾아야한다<br>(방금 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>f</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>z</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{\partial f(q,z)}{\partial z} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 는 찾았음)</p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/25.png" class=""><p>역전파 ㅡBack Propagationㅡ 란<br>확인했다시피, 다중연산에서 입력값의 편미분값을 구하는 게 불가능해 보였음<br>예컨대, f 연산은 x 와 y 에 대해 알 수 있는 방법이 없음<br>역전파는 이러한 문제를 해결 가능<br>연쇄규칙 ㅡChain Ruleㅡ 을 사용하면, 연산 너머의 입력값들에 대한 편미분값을 획득 가능<br>(다시 한 번 예제 규칙을 정리하면 다음과 같음)</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>z</mi><mo>=</mo><mo>−</mo><mn>4</mn><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">x = -2, y = 5, z = -4 \\ </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">4</span></span><span class="mspace newline"></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo separator="true">,</mo><mtext> </mtext><mi>f</mi><mo stretchy="false">(</mo><mi>q</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mi>q</mi><mo>⋅</mo><mi>z</mi><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">q(x, y) = x + y, \space f(q, z) = q \cdot z = (x + y) \cdot z </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><img src="/2025/09/09/introduction-to-ai-with-xor-problem/26.png" class=""><p>퍼셉트론 학습 준비 완료<br>최종 f 값을 바꾸기 위한, x y z 미분값들을 모두 구할 수 있음<br>(최종 f 값이, 0 에 가까워져 가는 것 확인 가능)<br>당연하게도, 원한다면 step size 값을 음수 사용하는 것도 고려해볼 수 있음<br>주로, step size 는 0.01 같은 매우 작은 값이 사용됨<br>예시에서는, 극적인 변화 위해 0.1 로 사용하였음</p><p>2장의 내용은 소스코드로도 확인 및 직접 실행해볼 수 있음<br><a href="https://github.com/BaeMinCheon/introduction-to-ai/tree/master/Chapter02">https://github.com/BaeMinCheon/introduction-to-ai/tree/master/Chapter02</a></p><img src="/2025/09/09/introduction-to-ai-with-xor-problem/27.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/28.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/29.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/30.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/31.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/32.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/33.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/34.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/35.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/36.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/37.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/38.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/39.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/40.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/41.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/42.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/43.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/44.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/45.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/46.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/47.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/48.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/49.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/50.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/51.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/52.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/53.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/54.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/55.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/56.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/57.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/58.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/59.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/60.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/61.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/62.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/63.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/64.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/65.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/66.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/67.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/68.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/69.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/70.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/71.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/72.png" class=""><img src="/2025/09/09/introduction-to-ai-with-xor-problem/73.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Presented for the first time at 2018&lt;br&gt;Translated into Korean&lt;/p&gt;
&lt;img src=&quot;/2025/09/09/introduction-to-ai-with-xor-problem/01.png&quot; clas</summary>
      
    
    
    
    
    <category term="AI" scheme="https://baemincheon.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Difference between copy and cat in combining files</title>
    <link href="https://baemincheon.github.io/2024/05/13/difference-between-copy-and-cat-in-combining-files/"/>
    <id>https://baemincheon.github.io/2024/05/13/difference-between-copy-and-cat-in-combining-files/</id>
    <published>2024-05-13T13:46:37.000Z</published>
    <updated>2024-05-13T13:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><p>There are some commands for combining files such as <code>copy</code> and <code>cat</code>. Respectively, <code>copy</code> is a command for Windows prompt and <code>cat</code> is a command for Unix prompt. You can check the specifications at official documentations below:</p><ul><li><a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/copy">https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/copy</a></li><li><a href="https://www.man7.org/linux/man-pages/man1/cat.1.html">https://www.man7.org/linux/man-pages/man1/cat.1.html</a></li></ul><h1 id="Comparison-1"><a href="#Comparison-1" class="headerlink" title="Comparison #1"></a><em><code>Comparison #1</code></em></h1><p>Suppose we have two text files, <code>a.txt</code> and <code>b.txt</code>. Each of them has simple contents.</p><img src="/2024/05/13/difference-between-copy-and-cat-in-combining-files/01.png" class=""><img src="/2024/05/13/difference-between-copy-and-cat-in-combining-files/02.png" class=""><p>We gotta combine them into one text file, <code>c.txt</code>.</p><p>In Windows, it would be like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\qmffk\Downloads&gt;copy a.txt + b.txt c.txt</span><br><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">        1 file(s) copied.</span><br><span class="line"></span><br><span class="line">C:\Users\qmffk\Downloads&gt;type c.txt</span><br><span class="line">hello, a !hello, b !</span><br><span class="line">C:\Users\qmffk\Downloads&gt;</span><br></pre></td></tr></table></figure><p>In Linux, it would be like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thanang@ROSS-DESKTOP:/mnt/d/test$ cat a.txt b.txt &gt; c.txt</span><br><span class="line">thanang@ROSS-DESKTOP:/mnt/d/test$ cat c.txt</span><br><span class="line">hello, a !hello, b !thanang@ROSS-DESKTOP:/mnt/d/test$</span><br></pre></td></tr></table></figure><p>Both look like the same, but there is a difference between two <code>c.txt</code>.</p><img src="/2024/05/13/difference-between-copy-and-cat-in-combining-files/03.png" class=""><p>Using <a href="https://winmerge.org/downloads/?lang=en">WinMerge</a>, we can see the additional character <code>1A</code> (in hex) at Windows’ <code>c.txt</code>. In short, the character <code>1A</code> (<code>26</code> in decimal) is appended for indicating an EOF (&#x3D; End Of File). This is why this is mentioned in the documentation. (For more information about the character <code>1A / 032 / SUB / Substitute</code>, visit <a href="https://www.ascii-code.com/">here</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...You can copy an ASCII text file that uses an end-of-file character (CTRL+Z) to indicate the end of the file...</span><br><span class="line"></span><br><span class="line">...To copy a file called memo.doc to letter.doc in the current drive and ensure that an end-of-file character (CTRL+Z) is at the end of the copied file...</span><br></pre></td></tr></table></figure><p>So, how do we prevent from appending the EOF character ? This is also mentioned in the documentation.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The effect of /b depends on its position in the command–line string: - If /b follows source, the copy command copies the entire file, including any end-of-file character (CTRL+Z). - If /b follows destination, the copy command doesn&#x27;t add an end-of-file character (CTRL+Z).</span><br></pre></td></tr></table></figure><h1 id="Comparison-2"><a href="#Comparison-2" class="headerlink" title="Comparison #2"></a><em><code>Comparison #2</code></em></h1><p>Do combine <code>a.txt</code> and <code>b.txt</code> into <code>c.txt</code> again.</p><p>In Windows, it would be like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\qmffk\Downloads&gt;copy /b a.txt + b.txt c.txt</span><br><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">        1 file(s) copied.</span><br><span class="line"></span><br><span class="line">C:\Users\qmffk\Downloads&gt;type c.txt</span><br><span class="line">hello, a !hello, b !</span><br><span class="line">C:\Users\qmffk\Downloads&gt;</span><br></pre></td></tr></table></figure><p>In Linux, it would be the same with before.</p><img src="/2024/05/13/difference-between-copy-and-cat-in-combining-files/04.png" class=""><p>Using WinMerge, we can see they are the same.</p><p>So, you should plus the flag <code>/b</code> in <code>copy</code> commandline for experiencing the same result as <code>cat</code> in Unix.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;code&gt;Overview&lt;/code&gt;&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;There are some commands </summary>
      
    
    
    
    
    <category term="Linux" scheme="https://baemincheon.github.io/tags/Linux/"/>
    
    <category term="Windows" scheme="https://baemincheon.github.io/tags/Windows/"/>
    
    <category term="Copy" scheme="https://baemincheon.github.io/tags/Copy/"/>
    
    <category term="Cat" scheme="https://baemincheon.github.io/tags/Cat/"/>
    
  </entry>
  
  <entry>
    <title>Migration from Perforce into Git in Windows</title>
    <link href="https://baemincheon.github.io/2023/12/04/migration-from-perforce-into-git-in-windows/"/>
    <id>https://baemincheon.github.io/2023/12/04/migration-from-perforce-into-git-in-windows/</id>
    <published>2023-12-04T13:10:03.000Z</published>
    <updated>2023-12-04T13:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><p>Sometimes, you have to switch the version control system for some reason. In this post, I will cover how to migrate Perforce stream into Git repository. I have confirmed that the method in this post works only in Windows, but you might be able to accomplish the same result with a similar way.</p><h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a><em><code>Prerequisites</code></em></h1><p>First of all, you should have Git and Perforce installed. Any latest version would be okay. Plus, you should be able to use their commands through the command prompt. For instance, the commands below should be working:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; p4 -V</span><br><span class="line">Perforce - The Fast Software Configuration Management System.</span><br><span class="line">Copyright 1995-2023 Perforce Software.  All rights reserved.</span><br><span class="line">This product includes software developed by the OpenSSL Project</span><br><span class="line">for use in the OpenSSL Toolkit (http://www.openssl.org/)</span><br><span class="line">Version of OpenSSL Libraries: OpenSSL 1.1.1u  30 May 2023</span><br><span class="line">See &#x27;p4 help [ -l ] legal&#x27; for additional license information on</span><br><span class="line">these licenses and others.</span><br><span class="line">Extensions/scripting support built-in.</span><br><span class="line">Parallel sync threading built-in.</span><br><span class="line">Rev. P4/NTX64/2023.1/2468153 (2023/07/24).</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git -v</span><br><span class="line">git version 2.42.0.windows.2</span><br></pre></td></tr></table></figure><p>Second, you should have Python installed. The version after 2.7 would be okay. (eg. 2.8 or 3.5) Plus, you should be able to use its commands through the command prompt. For instance, the commands below should be working:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; python -V</span><br><span class="line">Python 3.11.6</span><br></pre></td></tr></table></figure><p>The last one, you have to change your system locale settings if you had written the description of changelist with non-ascii codes. You can enable the option <code>Beta: Use Unicode UTF-8 for worldwide language support</code> from the depth of <code>Control Panel/All Control Panel Items/Region/Administrative/Change system locale...</code>.</p><img src="/2023/12/04/migration-from-perforce-into-git-in-windows/01.png" class=""><p>Unless the option enabled, the commit message from migration result can be seen as <code>untranslatable</code> if the description was written with non-ascii codes.</p><img src="/2023/12/04/migration-from-perforce-into-git-in-windows/02.png" class=""><p>With the option enabled, the commit message would be migrated properly just like the image below. So, check your descriptions in Perforce and change the system locale settings.</p><img src="/2023/12/04/migration-from-perforce-into-git-in-windows/03.png" class=""><h1 id="Migration"><a href="#Migration" class="headerlink" title="Migration"></a><em><code>Migration</code></em></h1><p>Type the command of format <code>python &lt;path of git-p4&gt; clone //&lt;depot&gt;/&lt;stream&gt;/&lt;directory&gt;@all</code> in prompt. For instance, I can type the command like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; python &quot;C:\Program Files\Git\mingw64\libexec\git-core\git-p4&quot; clone //HellLady/mainline/HellLady@all</span><br></pre></td></tr></table></figure><p>Then, all changelists from the <code>//&lt;depot&gt;/&lt;stream&gt;/&lt;directory&gt;</code> will be migrated into a Git repository.</p><img src="/2023/12/04/migration-from-perforce-into-git-in-windows/04.png" class=""><h1 id="Postscript"><a href="#Postscript" class="headerlink" title="Postscript"></a><em><code>Postscript</code></em></h1><p>That is all about the migration. 😂 So simple, but it was hard to know because the official document does not cover the usage in Windows. Anyway, I hope this would be helpful for you. Check <a href="https://git-scm.com/docs/git-p4">the official document</a> for more details if you also need other commands. Good luck. 🤞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;code&gt;Overview&lt;/code&gt;&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;Sometimes, you have to s</summary>
      
    
    
    
    
    <category term="Perforce" scheme="https://baemincheon.github.io/tags/Perforce/"/>
    
    <category term="Git" scheme="https://baemincheon.github.io/tags/Git/"/>
    
    <category term="Migration" scheme="https://baemincheon.github.io/tags/Migration/"/>
    
  </entry>
  
  <entry>
    <title>Conversion from UA into GA4</title>
    <link href="https://baemincheon.github.io/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/"/>
    <id>https://baemincheon.github.io/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/</id>
    <published>2023-04-10T14:15:57.000Z</published>
    <updated>2023-04-10T14:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><p>Google noticed that the support for Universal Analytics will be ended in 2023&#x2F;06&#x2F;30. Check <a href="https://support.google.com/analytics/answer/12938611">this document</a> for more details.</p><p>Therefore, I had to migrate my UA settings into GA4. Here is a solution for Hexo blog, which is the framework I am using for this blog.</p><h1 id="Google-Tag"><a href="#Google-Tag" class="headerlink" title="Google Tag"></a><em><code>Google Tag</code></em></h1><p>For activating Google Analytics, Google provides you a tag named as “Google Tag”. First of all, you should find out what tag should be installed. You can find out this at Google Analytics 4’s page.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/02.png" class=""><p>Click the button <code>Admin</code>.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/03.png" class=""><p>Click the button <code>Account Access Management</code>.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/04.png" class=""><p>Click the button <code>Data Streams</code>.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/05.png" class=""><p>Click the right arrow at your data stream.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/06.png" class=""><p>Click the right arrow at the option <code>Configure tag settings</code>.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/07.png" class=""><p>Click the button <code>Installation instructions</code>.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/08.png" class=""><p>Check out the code that you should include manually. This is the Google Tag for analytics.</p><h1 id="Theme-Config"><a href="#Theme-Config" class="headerlink" title="Theme Config"></a><em><code>Theme Config</code></em></h1><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/01.png" class=""><p>Most of themes for Hexo have the config file for Google Analytics. You can find it by just searching “google_analytics” with text.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/09.png" class=""><p>Especially, <code>google-analytics.ejs</code> file would be containing the Google Tag.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/10.png" class=""><br/><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/11.png" class=""><p>The tag is inserted at the front of page of every post in your blog, so you can check that with <code>View page source</code>. Thus, you should replace the Google Tag with new one. Copy the new one we have prepared and paste it to the <code>google-analytics.ejs</code> file. Here are the commits I used for that.</p><ul><li><a href="https://github.com/BaeMinCheon/let-us-go-abroad/commit/076b8a509f1c317cd2b92d875d00945c1ac2a718">https://github.com/BaeMinCheon/let-us-go-abroad/commit/076b8a509f1c317cd2b92d875d00945c1ac2a718</a></li><li><a href="https://github.com/BaeMinCheon/let-us-go-abroad/commit/b3ca2983b70daa46acbb8fb1387922ed0320a25f">https://github.com/BaeMinCheon/let-us-go-abroad/commit/b3ca2983b70daa46acbb8fb1387922ed0320a25f</a></li></ul><h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a><em><code>Result</code></em></h1><p>After the setup, the data stream will be constructed. But, it would take some time…about 1 day or 2 days ? So just keep calm and wait for that.</p><img src="/2023/04/10/conversion-from-universal-analytics-into-google-analytics-4/12.png" class=""><p>When it constructed successfully, you can see the result <code>DATA FLOWING</code> just like above at <code>GA4 / Admin / Account Access Management / Setup Assistant</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;code&gt;Overview&lt;/code&gt;&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;Google noticed that the </summary>
      
    
    
    
    
    <category term="GoogleAnalytics" scheme="https://baemincheon.github.io/tags/GoogleAnalytics/"/>
    
    <category term="Hexo" scheme="https://baemincheon.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>The promotion for online lecture of UnrealEngine</title>
    <link href="https://baemincheon.github.io/2022/12/12/promotion-for-online-lecture-of-unrealengine-01/"/>
    <id>https://baemincheon.github.io/2022/12/12/promotion-for-online-lecture-of-unrealengine-01/</id>
    <published>2022-12-12T13:40:33.000Z</published>
    <updated>2022-12-12T13:40:33.000Z</updated>
    
    <content type="html"><![CDATA[<br/><img src="/2022/12/12/promotion-for-online-lecture-of-unrealengine-01/01.png" class=""><br/><hr><p>Hello, this is Ross Bae, a game programmer.<br>I had a great opportunity to open a class with Coloso, a platform specializing in online classes.<br>The class is &lt;FPS게임 개발로 한 번에 입문하는 언리얼 엔진&gt;. And it is supported only in Korean yet.</p><p>Currently, UnrealEngine is widely used to the extent that it is used in world-famous games such as Battlegrounds, Fortnite, and Valorant. However, I have seen many people who feel hopeless due to the lack of systematically organized materials and lectures compared to their popularity, so I prepared this class.</p><p>In this class, I created a lecture by designing a curriculum so that you can learn the basic knowledge of the UnrealEngine by making FPS games with me, and cover from blueprints to scripting using C++.</p><p>You can learn the basic contents of game development using UnrealEngine as well as the knowledge and skills necessary to study UnrealEngine on your own, so it would be a good lecture for those who are interested in UnrealEngine.</p><p>It is not easy to get through the world of UnrealEngine using only Blueprint, so if you know how to handle C++ at all, it will be a great help. That is why I would like to deal with C++ in this lecture. However, you don’t have to be afraid of streotypes about C++ because we provide training materials that would be helpful to C++ beginners.</p><p>For your information, you can take the course at a significant discount for the current Early Bird period. Therefore, if you are interested, please check the attached link below.</p><hr><p>안녕하세요, 게임 프로그래머 배민천입니다<br>이번에 제가 좋은 기회로 온라인 클래스 전문 플랫폼 콜로소와 함께<br>&lt;FPS게임 개발로 한 번에 입문하는 언리얼 엔진&gt;<br>클래스를 열게 되었습니다</p><p>현재 언리얼엔진은 배틀그라운드, 포트나이트, 발로란트 등<br>세계적으로 저명한 게임에 쓰일 정도로, 널리 사용되고 있습니다<br>하지만, 그 유명세에 비해 체계적으로 정리된 자료나 강의가 부족해<br>막막함을 느끼는 분들을 많이 봐왔기 때문에, 이번 강의를 준비하게 되었습니다</p><p>이번 클래스에서 저와 함께 FPS게임을<br>직접 만들어보면서 언리얼엔진의 기본지식들을 익힐 수 있으며<br>블루프린트부터 C++ 을 활용한 스크립팅까지 커버할 수 있도록<br>커리큘럼을 설계하여 강의를 제작했습니다</p><p>언리얼엔진을 활용한 게임개발에 기본적인 내용들은 물론<br>언리얼엔진을 스스로 공부하는 데에 필요한 지식과 기술들을<br>배우실 수 있으므로, 평소에 언리얼엔진에<br>관심이 있던 분이시라면 좋은 강의가 될 것입니다</p><p>블루프린트만으로는 언리얼엔진의 세상을 헤쳐나가기 쉽지 않기에<br>C++ 을 조금이라도 다룰 줄 안다면, 큰 도움이 될 것이기<br>때문에 이번 강의에서 C++ 을 다루고자 합니다<br>하지만, C++ 입문자를 고려하여 교육자료를 별도로 만들어<br>제공하므로 C++ 에 대한 선입견 때문에 겁먹지 않아도 됩니다</p><p>참고로, 현재 얼리버드(예약구매) 기간으로 크게 할인된 금액으로 수강할 수 있습니다<br>따라서, 관심 있는 분은 첨부된 링크를 통해 자세한 내용을 확인해주세요</p><hr><p><a href="https://bit.ly/3iMuyYb">https://bit.ly/3iMuyYb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;br/&gt;

&lt;img src=&quot;/2022/12/12/promotion-for-online-lecture-of-unrealengine-01/01.png&quot; class=&quot;&quot;&gt;

&lt;br/&gt;

&lt;hr&gt;
&lt;p&gt;Hello, this is Ross Bae, a ga</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
    <category term="Lecture" scheme="https://baemincheon.github.io/tags/Lecture/"/>
    
  </entry>
  
  <entry>
    <title>Retargeting animations in UnrealEngine 5</title>
    <link href="https://baemincheon.github.io/2022/10/04/retargeting-animations-in-unreal-engine-5/"/>
    <id>https://baemincheon.github.io/2022/10/04/retargeting-animations-in-unreal-engine-5/</id>
    <published>2022-10-04T13:15:18.000Z</published>
    <updated>2022-10-04T13:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>version: 5.0.3</code></td></tr><tr><td>Windows 11 Pro</td><td><code>build: 22621.521</code></td></tr></tbody></table><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><code>Overview</code></h1><p>It is common that an animation asset is binding at a certain <a href="https://docs.unrealengine.com/4.27/en-US/AnimatingObjects/SkeletalMeshAnimation/Skeleton/">skeleton asset</a>. So you might have experience that you could not utilize the skeleton A’s animation at the skeleton B’s animation. Because an animation data is made of trace of bones. Therefore, an animation asset would not be compatible when you attempt to apply it to the different skeleton asset.</p><p>Think about two skeletons, A and B. The skeleton A has a bone for head, but the skeleton B does not. An animation asset for the skeleton A would not be compatible with the skeleton B, because the skeleton B does not have a bone for head. Though, you might want to apply it, at least parts of animation without head. Fortunately, UnrealEngine provides you to reuse the animation assets by retargeting bones, even if the number of bones or position of bones are different. That is the “Retargeting animations”.</p><h1 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a><code>Preparation</code></h1><p>I will explain you while showing an example. First, install the project <a href="https://www.unrealengine.com/marketplace/en-US/product/lyra">Lyra</a>. You can purchase the project in the UnrealEngine marketplace and install it into your local system. After that, purchase <a href="https://www.unrealengine.com/marketplace/en-US/product/animation-starter-pack">Animation Starter Pack</a>, too. Both of them are free.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/01.png" class=""><p>Add <code>Animation Starter Pack</code> into the project <code>Lyra</code> you installed. Now, open it.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/02.png" class=""><p>You can see the folder <code>AnimStarterPack</code> at the below of <code>Content</code>, and there are several animation assets fit for <code>SK_Mannequin</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/03.png" class=""><p>Open an animation asset, and you can see the list of animations available in the current skeleton.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/04.png" class=""><p>Switch to the tab for skeleton, and you can see the skeleton asset with the hierarchy of bones. Okay, we have checked the asset <code>Animation Starter Pack</code>. Jump to the next, the project <code>Lyra</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/05.png" class=""><p>In the <code>Lyra</code>, there are one skeleton asset, but two skeleton meshes; <code>SKM_Manny</code> and <code>SKM_Quinn</code>. Each of them for male and female appearance.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/06.png" class=""><p>The name of skeleton asset is the same with the asset <code>Animation Starter Pack</code> with <code>SK_Mannequin</code>. From now on, I will name the skeleton for <code>Lyra</code> as UE5 skeleton, and the skeleton for <code>Animation Starter Pack</code> as UE4 skeleton.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/07.png" class=""><p>Also, you can find animation assets for UE5 skeleton at <code>Content/Characters/Heroes/Mannequin/Animations/Actions</code>. All we have to do is, retargeting animations from ue4 skeleton into ue5 skeleton, and retargeting animations from ue5 skeleton into ue4 skeleton.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/08.png" class=""><p>Create a folder <code>RetargetedAnimations</code> at <code>Content/AnimStarterPack</code>. We will save the retargeted animations and so on here. First, you should create IK Rigs for each skeleton mesh.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/09.png" class=""></br><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/10.png" class=""></br><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/11.png" class=""><p>Name them as <code>IKRigUE4</code> and <code>IKRigUE5</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/12.png" class=""></br><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/13.png" class=""><p>They might look like this. Huh, it is time to setup the IK Rig.</p><h1 id="Setup-IK-Rig"><a href="#Setup-IK-Rig" class="headerlink" title="Setup IK Rig"></a><code>Setup IK Rig</code></h1><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/14.png" class=""><p>The IK Rig is used to define many properties, especially for retargeting animations. First of all, you should choose the root of retargeting. It is recommended to choose a <code>pelvis</code> in most cases. (Especially, when it is a human form.) Right click the <code>pelvis</code> and select the <code>Set Retarget Root</code>. Then, the text <code>(Retarget Root)</code> is displayed by the <code>pelvis</code>. After that, UnrealEngine will retarget the animations from the root, <code>pelvis</code>. Do it on both of IK Rig assets.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/15.png" class=""></br><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/16.png" class=""><p>Get back to the content browser, create a IK Retargeter. You should choose a source IK Rig to create a IK Retargeter. Choose the IKRigUE4, and name this as <code>UE4_TO_UE5</code>. Open it up.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/17.png" class=""><p>The source IK Rig is the <code>IKRigUE4</code>. Therefore, you should assign <code>IKRigUE5</code> at the <code>Target IKRig Asset</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/18.png" class=""><p>Now you can see both of them in the viewport. Try to play an animation from the asset browser.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/-Xmq0A8bWtA" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Then, the target one will not be animating properly. Just like the video. As you have set the pelvis as a retarget root, it looks like only the pelvis is synchronized, while others are not. The problem is, the hierarchy of bones is different between two skeletons.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/19.png" class=""><p>For instance, the UE4 skeleton has 3 bones for spine; <code>spine_01</code>, <code>spine_02</code>, and <code>spine_03</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/20.png" class=""><p>The UE5 skeleton has 5 bones for spine; <code>spine_01</code>, <code>spine_02</code>, <code>spine_03</code>, <code>spine_04</code>, and <code>spine_05</code>. UnrealEngine cannot retarget animations because the number and position of bones are different between two skeletons. So, you should specify how to match the bones, and you can do it with a chain.</p><h1 id="Setup-Chain"><a href="#Setup-Chain" class="headerlink" title="Setup Chain"></a><code>Setup Chain</code></h1><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/21.png" class=""><p>The IK Rig asset has a panel <code>IK Retargeting</code> beside a panel <code>Asset Browser</code>. You can specify some chains here, and it chains a part of bones as a group. UnrealEngine matches the group of same name when you attempt to retarget animations. Let me show you an example. Add new chain, and name it as <code>leg_left</code>. We are going to group bones for the left leg.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/22.png" class=""><p>Check the bones. After the pelvis, left leg starts at <code>thigh_l</code> and ends at <code>ball_l</code>. So, set the <code>Start Bone</code> and <code>End Bone</code> of chain <code>leg_left</code>. You have set the chain for left leg in UE4 skeleton. Next, you should set the chain in UE5 skeleton, too.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/23.png" class=""><p>Create a chain <code>leg_left</code>. Check the bones for left leg. Set the <code>Start Bone</code> and <code>End Bone</code>. Then, we are good to go.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/24.png" class=""><p>Back to the retargeter asset, click the panel <code>Chain Mapping</code>. And click the button <code>Auto-Map Chains</code>. The <code>Auto-Map Chains</code> will match the chains of similar name. You can also match the chains of different name, but you should do it manually in that case.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/EK2101WQNC0" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Try to play some animations. You can notice there is a change. Yes, as you can see in the video, the left leg is synchronized. All you have to do is, create chains and match them.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/25.png" class=""><p>I recommend you to create the chains; <code>leg_right</code>, <code>spine</code>, <code>arm_left</code>, <code>arm_right</code>, <code>head</code>. Here are the chain settings I used for UE4 skeleton.</p><table><thead><tr><th>Chain Name</th><th>Start Bone</th><th>End Bone</th></tr></thead><tbody><tr><td>leg_left</td><td>thigh_l</td><td>ball_l</td></tr><tr><td>leg_right</td><td>thigh_r</td><td>ball_r</td></tr><tr><td>spine</td><td>spine_01</td><td>spine_03</td></tr><tr><td>arm_left</td><td>clavicle_l</td><td>hand_l</td></tr><tr><td>arm_right</td><td>clavicle_l</td><td>hand_r</td></tr><tr><td>head</td><td>neck_01</td><td>head</td></tr></tbody></table><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/26.png" class=""><p>Unfortunately, UnrealEngine does not support to copy the chain settings yet. So, you should write the same settings in UE5 skeleton.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/6UqOYwRcv_4" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Back to the retargeter asset, again. Click the button <code>Auto-Map Chains</code>, and try to play some animations. It looks like the video. Does it look like perfect ? No, focus on their hands. You shoud care about fingers, too. (Even for toes if the animation covers them 🤣)</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/27.png" class=""><p>I will show you an example for index finger, rest of fingers are your work.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/L-m4X-hfExY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>After the work for all fingers, it should look like this video.</p><h1 id="Edit-Pose"><a href="#Edit-Pose" class="headerlink" title="Edit Pose"></a><code>Edit Pose</code></h1><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/28.png" class=""><p>Sometimes, you might want to retarget animations but two skeleton are different each other. Suppose you have a skeleton of pose A, and a skeleton of pose T.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/w9triL2bnVY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>In this situation, the retargeted animations look weird even you set the chains well. Just like the video. Oh…it is like the necromorph in the Dead Space…😱 It happens due to the pose, the two skeletons are different on the pose. You should edit one’s pose so that they have the same pose.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/29.png" class=""><p>Here, I will edit the skeleton of pose T. Let me edit the pose as A. First, click the button <code>Edit Pose</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/30.png" class=""><p>We have returned to the base pose. Now you can select bones of the target IK Rig.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/31.png" class=""><p>I recommend you to change the property <code>Target Actor Offset</code> if you need. You can check the rotation more precisely when it is set by 0.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/32.png" class=""></br><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/33.png" class=""><p>I have editted the pose by this settings;</p><ul><li>Rotating the upper arm by -60 degrees on the axis Y.</li><li>Rotating the lower arm by +40 degrees on the axis Z.</li></ul><p>Do this settings on two arms.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/34.png" class=""><p>Now it seems okay. Then, set a proper value to <code>Target Actor Offset</code>. Click the button <code>Edit Pose</code> to leave the edit mode.</p><div class="video-container"><iframe src="https://www.youtube.com/embed/poPoFTkDmgk" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>You would see the result just like the video. Quite better than before. But, there is onething you should remember about the feature <code>Edit Pose</code>. It is that, you cannot rotate bones not in any chain.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/35.png" class=""><p>Suppose an IK Rig asset does not have a chain for right leg. As you can see in the screenshot, there is only a chain for left leg. Go to the retargeter asset.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/36.png" class=""><p>You cannot see the section for right leg, even you have entered the edit mode. So, it is crucial that creating necessary chains before you attempt to edit pose in the retargeter asset.</p><h1 id="Export"><a href="#Export" class="headerlink" title="Export"></a><code>Export</code></h1><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/37.png" class=""><p>Get back to the UE4 &amp; UE5 skeletons. You could play animations for UE4 skeleton via the <code>Asset Browser</code> in the retargeter asset <code>UE4_TO_UE5</code>. Plus, you can export selected animations to create animation assets for UE5 skeleton, which is the target skeleton.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/38.png" class=""></br><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/39.png" class=""><p>Export animations at <code>Content/AnimStarterPack/RetargetedAnimations</code>.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/40.png" class=""><p>When you open it up, you can see the asset is using the skeletal mesh for UE5 skeleton. Great. It is simple that retargeting animations in opposite direction; UE5 -&gt; UE4.</p><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/41.png" class=""><ul><li>Create a retargeter asset based on <code>IKRigUE5</code>.</li><li>Set the <code>Target IKRig Asset</code> as <code>IKRigUE4</code>.</li><li>Click the button <code>Auto-Map Chains</code>.</li><li>Select animations you want to export.</li><li>Export them, profit !</li></ul><img src="/2022/10/04/retargeting-animations-in-unreal-engine-5/42.png" class=""><p>You can see it is using the skeletal mesh for UE4 skeleton. 😎</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;version: 5.0.3&lt;/code&gt;&lt;/td&gt;
&lt;/</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
    <category term="Animation" scheme="https://baemincheon.github.io/tags/Animation/"/>
    
    <category term="Retargeting" scheme="https://baemincheon.github.io/tags/Retargeting/"/>
    
  </entry>
  
  <entry>
    <title>How the RichTextBlock works in UnrealEngine (part.1)</title>
    <link href="https://baemincheon.github.io/2022/07/28/how-the-rich-text-block-works-in-unrealengine/"/>
    <id>https://baemincheon.github.io/2022/07/28/how-the-rich-text-block-works-in-unrealengine/</id>
    <published>2022-07-28T11:59:20.000Z</published>
    <updated>2022-07-28T11:59:20.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>branch: 5.0</code></td></tr><tr><td>Visual Studio 2022</td><td><code>version: 17.2.6</code></td></tr><tr><td>Windows 11 Pro</td><td><code>build: 22000.795</code></td></tr></tbody></table><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><p>We have learned about the <code>TextBlock</code> in UnrealEngine at <a href="https://baemincheon.github.io/2022/03/22/how-the-text-wrap-works-in-unrealengine/">the previous post</a>. As we saw, the <code>TextBlock</code> provides the function to split a long text into multiple lines. But, it was only for the text, combinations of character.</p><p>Sometimes, we want to put something that is not a character in the middle of text. For example, you may want to put an image for key icon into the text that describes character’s skill. Maybe, you want to highlight a part of the text by coloring it. Furthermore, you could want to put a “widget” in the middle of text. The widget would interact with the player’s action so that they can have better experience of the user interface.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/01.png" class=""><blockquote><p>An option description in PUBG Xbox.</p></blockquote><p>UnrealEngine has a solution for that, <a href="https://docs.unrealengine.com/4.27/en-US/InteractiveExperiences/UMG/UserGuide/UMGRichTextBlock/">the RichTextBlock widget</a>. You can put an image or anything else in the middle of text. Plus, it also supports auto-wrapping just like at the <code>TextBlock</code>. Now you know why its name is the “Rich”TextBlock. Then, let us check out how the <code>RichTextBlock</code> widget is implemented and how it works.</p><h1 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a><em><code>An example</code></em></h1><p>Already there is a tutorial in <a href="https://docs.unrealengine.com/4.27/en-US/InteractiveExperiences/UMG/UserGuide/UMGRichTextBlock/">the document</a>, but I will show you an another example including how to make your custom <code>RichTextBlock</code> decorator. Suppose you want to display the text like the screenshot below.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/02.png" class=""><p>The size of <code>SizeBox</code> is (512, 512). The text used in <code>RichTextBlock</code> is here:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Test &lt;Emphasis&gt; Test &lt;/&gt; &lt;somewidget id=&quot;Ferris_02&quot;/&gt; Test &lt;somewidget id=&quot;Ferris_01&quot;/&gt; Test aaa aaa aaa aaa aaa aaa aaa aaa &lt;img id=&quot;Ferris_01&quot;/&gt; aaa &lt;somewidget id=&quot;Ferris_02&quot;/&gt; aaa</span><br></pre></td></tr></table></figure><p>As we can see, the images are put in the middle of text. The <code>RichTextBlock</code> parses the input text and decorates the text with your configurations. Without some configurations, the tags such as <code>&lt;Emphasis&gt;</code> and <code>&lt;somewidget&gt;</code> would be displayed as a plain text. Yes, you should do some configurations for using the <code>RichTextBlock</code>.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/03.png" class=""><p>I have already set some properties, <code>TextStyleSet</code> and <code>DecoratorClasses</code>.</p><h1 id="RichTextStyle"><a href="#RichTextStyle" class="headerlink" title="RichTextStyle"></a><em><code>RichTextStyle</code></em></h1><p>The <code>TextStyleSet</code> is used for decorating a text just like a markup. You can specify a font, size, color, and so on with it. I made two data rows in the data table, and that is why some of text was displayed with green color. Check the screenshot below.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/04.png" class=""><br/><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/05.png" class=""><p>The <code>RichTextBlock</code> decorates rest of text if you make a <code>Default</code> row. That is why the text not embraced with tags was displayed with white color.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/06.png" class=""><p>Without the <code>TextStyleSet</code>, the <code>RichTextBlock</code> cannot display the text properly. You can make a data table containing <code>RichTextStyleRow</code> with the instructions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Right click on contents browser.</span><br><span class="line">2. find the item `Data Table` at the category `Miscellaneous`, and click it.</span><br><span class="line">3. The dialog `Pick Row Structure` pops up.</span><br><span class="line">4. Click the drop down, and select `RichTextStyleRow`.</span><br></pre></td></tr></table></figure><p>Now, you can manipulate the data table. But, you should be careful that the name of data row is the same with the name of tag in the <code>RichTextBlock</code>.</p><h1 id="RichImage"><a href="#RichImage" class="headerlink" title="RichImage"></a><em><code>RichImage</code></em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Simple struct for rich text styles */</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(Blueprintable, BlueprintType)</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UMG_API</span> FRichImageRow : <span class="keyword">public</span> FTableRowBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_USTRUCT_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, Category = Appearance)</span><br><span class="line">FSlateBrush Brush;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allows you to setup an image decorator that can be configured</span></span><br><span class="line"><span class="comment"> * to map certain keys to certain images.  We recommend you subclass this</span></span><br><span class="line"><span class="comment"> * as a blueprint to configure the instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Understands the format &lt;img id=&quot;NameOfBrushInTable&quot;&gt;&lt;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract, Blueprintable)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UMG_API</span> URichTextBlockImageDecorator : <span class="keyword">public</span> URichTextBlockDecorator</span><br></pre></td></tr></table></figure><p>UnrealEngine provides a decorator class, <code>URichTextBlockImageDecorator</code>. It helps you add an image widget in the middle of text.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/07.png" class=""><p>Without it, the <code>RichTextBlock</code> cannot create an image from the tag <code>img</code>. You can make a data table containing <code>RichImageRow</code> with the instructions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Right click on contents browser.</span><br><span class="line">2. find the item `Data Table` at the category `Miscellaneous`, and click it.</span><br><span class="line">3. The dialog `Pick Row Structure` pops up.</span><br><span class="line">4. Click the drop down, and select `RichImageRow`.</span><br></pre></td></tr></table></figure><p>Now, you can manipulate the data table. Also, you should be careful that the name of data row is the same with the name of tag in the <code>RichTextBlock</code> as I mentioned at the <code>RichTextStyle</code>. So, remember it because this mechanism will work on other cases (Decorators using their own data table) too.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/08.png" class=""><p>However, you need one step more to apply the data table.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Engine/Source/Runtime/UMG/Public/Components/RichTextBlock.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, Category=Appearance, meta=(RequiredAssetDataTags = <span class="string">&quot;RowStructure=RichTextStyleRow&quot;</span>))</span><br><span class="line">TObjectPtr&lt;<span class="keyword">class</span> <span class="title class_">UDataTable</span>&gt; TextStyleSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**  */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, Category=Appearance)</span><br><span class="line">TArray&lt;TSubclassOf&lt;URichTextBlockDecorator&gt;&gt; DecoratorClasses;</span><br></pre></td></tr></table></figure><p>The <code>TextStyleSet</code> needs only a data table, but the <code>DecoratorClasses</code> takes a class inherits <code>URichTextBlockDecorator</code>. That is why <code>URichTextBlockImageDecorator</code> inherits that.</p><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/11.png" class=""><br/><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/10.png" class=""><br/><img src="/2022/07/28/how-the-rich-text-block-works-in-unrealengine/09.png" class=""><p>So, you should create a blueprint class inherits <code>URichTextBlockImageDecorator</code> because the class <code>URichTextBlockImageDecorator</code> has the UCLASS keyword <code>Abstract</code>. And, assign it into the <code>DecoratorClasses</code> at the <code>RichTextBlock</code> widget. The blueprint class should reference the data table for images.</p><h1 id="Custom-decorator"><a href="#Custom-decorator" class="headerlink" title="Custom decorator"></a><em><code>Custom decorator</code></em></h1><p>I have written a custom decorator for this example, the <code>URichTextBlockSomeWidgetDecorator</code>. As you can see in the example, it displays a combination of image and text. First of all, the code for this class is here.</p><ul><li><a href="https://gist.github.com/BaeMinCheon/109b251f1c88ae3f7e73dd711d0cc153">RichTextBlockSomeWidgetDecorator.h</a></li><li><a href="https://gist.github.com/BaeMinCheon/6521a88bce86bd4cd60b7b383cf45637">RichTextBlockSomeWidgetDecorator.cpp</a></li></ul><p>And the followings are the major changes.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestRichTextBlock</span> : ModuleRules</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TestRichTextBlock</span><span class="params">(ReadOnlyTargetRules Target)</span> : base(Target)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line"></span><br><span class="line">PublicDependencyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>, <span class="string">&quot;HeadMountedDisplay&quot;</span>, <span class="string">&quot;UMG&quot;</span>, <span class="string">&quot;Slate&quot;</span>, <span class="string">&quot;SlateCore&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You must add the modules at your <code>Build.cs</code>: <code>UMG</code>, <code>Slate</code>, and <code>SlateCore</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FRichInlineSomeWidget::Supports</span><span class="params">(<span class="type">const</span> FTextRunParseResults&amp; RunParseResult, <span class="type">const</span> FString&amp; Text)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> Result = <span class="literal">false</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsContainId = RunParseResult.MetaData.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsNameSomeWidget = RunParseResult.Name == <span class="built_in">TEXT</span>(<span class="string">&quot;somewidget&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (IsContainId &amp;&amp; IsNameSomeWidget)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FTextRange&amp; IdRange = RunParseResult.MetaData[<span class="built_in">TEXT</span>(<span class="string">&quot;id&quot;</span>)];</span><br><span class="line"><span class="type">const</span> FString TagId = Text.<span class="built_in">Mid</span>(IdRange.BeginIndex, IdRange.EndIndex - IdRange.BeginIndex);</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> bWarnIfMissing = <span class="literal">false</span>;</span><br><span class="line">Result = Decorator-&gt;<span class="built_in">FindSomeWidgetRow</span>(*TagId, bWarnIfMissing) != <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I have changed the tag that my decorator supports. <code>img -&gt; somewidget</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SRichInlineSomeWidget::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs, <span class="type">const</span> FRichSomeWidgetRow* Row, <span class="type">const</span> FTextBlockStyle&amp; TextStyle, TOptional&lt;int32&gt; Width, TOptional&lt;int32&gt; Height, EStretch::Type Stretch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> FSlateBrush* InBrush = &amp;(Row-&gt;Brush);</span><br><span class="line"><span class="built_in">check</span>(InBrush)</span><br><span class="line"><span class="type">const</span> FText InText = Row-&gt;Text;</span><br><span class="line"><span class="type">const</span> TSharedRef&lt;FSlateFontMeasure&gt; FontMeasure = FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">GetRenderer</span>()-&gt;<span class="built_in">GetFontMeasureService</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> MaxHeight = FontMeasure-&gt;<span class="built_in">GetMaxCharacterHeight</span>(TextStyle.Font, <span class="number">1.0f</span>);</span><br><span class="line"><span class="type">float</span> IconHeight = FMath::<span class="built_in">Max</span>(MaxHeight, InBrush-&gt;ImageSize.Y);</span><br><span class="line"><span class="keyword">if</span> (Height.<span class="built_in">IsSet</span>())</span><br><span class="line">&#123;</span><br><span class="line">IconHeight = Height.<span class="built_in">GetValue</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">float</span> IconWidth = IconHeight;</span><br><span class="line"><span class="keyword">if</span> (Width.<span class="built_in">IsSet</span>())</span><br><span class="line">&#123;</span><br><span class="line">IconWidth = Width.<span class="built_in">GetValue</span>();</span><br><span class="line">&#125;</span><br><span class="line">ChildSlot</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBox)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line"></span><br><span class="line">+SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">AutoWidth</span>()</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(InBrush)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">+SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">AutoWidth</span>()</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(InText)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Used the max value for <code>IconHeight</code> because I wanted to display the image properly. Plus, the decorator has a <code>TextBlock</code> for descripting an image. In the example, a text <code>Ferris_01</code> or <code>Ferris_02</code> is located on the right of Ferris’ image.</p><p>So, you can create a custom decorator like this. Rest works are just similar with <code>RichImage</code>, creating some blueprint classes (decorator and data table) and assigning each other. Let your decorator have awesome functions :)</p><h1 id="Preview-of-Part-2"><a href="#Preview-of-Part-2" class="headerlink" title="Preview of Part #2"></a><em><code>Preview of Part #2</code></em></h1><p>At this part, we have seen how to use the <code>RichTextBlock</code> and how to make a custom decorator.</p><ul><li>Only for a text, you should create a data table and assign it.</li><li>For other content, you should create a custom decorator and assign it. But, UnrealEngine has already made a default decorator for an image, <code>URichTextBlockImageDecorator</code>.</li><li>When creating a custom decorator, you should know them below:<ul><li>Specify an unique tag name. There should be no confliction.</li><li>Design a widget layout with Slate. You can reference many examples from engine codes, just find all references of <code>ChildSlot</code>.</li><li>Create a SWidget version of your widget if you want to put your widget into the custom decorator. As you can see, the <code>SNew</code> accepts only the class inherits <code>SWidget</code>. In most of cases, it is okay to inherit the class <code>SLeafWidget</code>.</li></ul></li></ul><p>At next part, we would find out how does the <code>RichTextBlock</code> wrap its contents. It will be interesting because the <code>RichTextBlock</code> can have an image as a content.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;branch: 5.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
    <category term="TextBlock" scheme="https://baemincheon.github.io/tags/TextBlock/"/>
    
    <category term="RichTextBlock" scheme="https://baemincheon.github.io/tags/RichTextBlock/"/>
    
  </entry>
  
  <entry>
    <title>How the text wrap works in UnrealEngine</title>
    <link href="https://baemincheon.github.io/2022/03/22/how-the-text-wrap-works-in-unrealengine/"/>
    <id>https://baemincheon.github.io/2022/03/22/how-the-text-wrap-works-in-unrealengine/</id>
    <published>2022-03-21T15:07:38.000Z</published>
    <updated>2022-03-21T15:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>branch: 5.0</code></td></tr><tr><td>Visual Studio 2022</td><td><code>version: 17.1.1</code></td></tr><tr><td>Windows 11 Pro</td><td><code>build: 22000.556</code></td></tr></tbody></table><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/01.png" class=""><p>A TextBlock has an option <code>AutoWrapText</code> and the option makes the TextBlock can wrap its text. Thanks to the option, we can display a text without concerning about breaking lines. For general cases of text, even the option works within very short time, almost 1 tick. How does it possible ? What is the implementation of that option ? Let us find out it in this post.</p><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/02.png" class=""><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/03.png" class=""><p>The TextBlock upper has the option turned on. Contrary, the TextBlock lower has the option turned off.</p><h1 id="Where-is-the-code"><a href="#Where-is-the-code" class="headerlink" title="Where is the code"></a><em><code>Where is the code</code></em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TextWidgetTypes.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** True if we&#x27;re wrapping text automatically based on the computed horizontal space for this widget. */</span></span><br><span class="line"><span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category=Wrapping)</span><br><span class="line">uint8 AutoWrapText:<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>The option is loacted in the class <code>UTextLayoutWidget</code>. We can see the option as the class <code>UTextBlock</code> inherites <code>UTextLayoutWidget</code>. Unfortunately, the variable is not directly used for wrapping text, but used for saving the value of option.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTextBlock::SynchronizeProperties</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">SynchronizeProperties</span>();</span><br><span class="line"></span><br><span class="line">TAttribute&lt;FText&gt; TextBinding = <span class="built_in">GetDisplayText</span>();</span><br><span class="line">TAttribute&lt;FSlateColor&gt; ColorAndOpacityBinding = <span class="built_in">PROPERTY_BINDING</span>(FSlateColor, ColorAndOpacity);</span><br><span class="line">TAttribute&lt;FLinearColor&gt; ShadowColorAndOpacityBinding = <span class="built_in">PROPERTY_BINDING</span>(FLinearColor, ShadowColorAndOpacity);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( MyTextBlock.<span class="built_in">IsValid</span>() )</span><br><span class="line">&#123;</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetText</span>( TextBinding );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetFont</span>( Font );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetStrikeBrush</span>( &amp;StrikeBrush );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetColorAndOpacity</span>( ColorAndOpacityBinding );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetShadowOffset</span>( ShadowOffset );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetShadowColorAndOpacity</span>( ShadowColorAndOpacityBinding );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetMinDesiredWidth</span>( MinDesiredWidth );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetTransformPolicy</span>( TextTransformPolicy );</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetOverflowPolicy</span>(TextOverflowPolicy);</span><br><span class="line"></span><br><span class="line">Super::<span class="built_in">SynchronizeTextLayoutProperties</span>( *MyTextBlock );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When you turn on or turn off the option <code>AutoWrapText</code>, widget’s <code>SynchronizeProperties()</code> would be called. By the code <code>Super::SynchronizeTextLayoutProperties(*MyTextBlock);</code> executed, Parent’s <code>SynchronizeProperties(TWidgetType&amp;)</code> is called.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Synchronize the properties with the given widget. A template as the Slate widgets conform to the same API, but don&#x27;t derive from a common base. */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TWidgetType&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SynchronizeTextLayoutProperties</span><span class="params">(TWidgetType&amp; InWidget)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ShapedTextOptions.<span class="built_in">SynchronizeShapedTextProperties</span>(InWidget);</span><br><span class="line"></span><br><span class="line">    InWidget.<span class="built_in">SetJustification</span>(Justification);</span><br><span class="line">    InWidget.<span class="built_in">SetAutoWrapText</span>(!!AutoWrapText);</span><br><span class="line">    InWidget.<span class="built_in">SetWrapTextAt</span>(WrapTextAt != <span class="number">0</span> ? WrapTextAt : <span class="built_in">TAttribute</span>&lt;<span class="type">float</span>&gt;());</span><br><span class="line">    InWidget.<span class="built_in">SetWrappingPolicy</span>(WrappingPolicy);</span><br><span class="line">    InWidget.<span class="built_in">SetMargin</span>(Margin);</span><br><span class="line">    InWidget.<span class="built_in">SetLineHeightPercentage</span>(LineHeightPercentage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this function, <code>InWidget</code> is our TextBlock. And it would call the function <code>SetAutoWrapText(bool)</code> for updating the option.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UTextBlock::SetAutoWrapText</span><span class="params">(<span class="type">bool</span> InAutoWrapText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AutoWrapText = InAutoWrapText;</span><br><span class="line"><span class="keyword">if</span>(MyTextBlock.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">MyTextBlock-&gt;<span class="built_in">SetAutoWrapText</span>(InAutoWrapText);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good. The parameter <code>InAutoWrapText</code> updates the variable <code>AutoWrapText</code> and <code>MyTextBlock</code>. The variable <code>MyTextBlock</code> is <code>TSharedPtr&lt;STextBlock&gt;</code>. Now, the time to jump to <code>STextBlock</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">STextBlock::SetAutoWrapText</span><span class="params">(TAttribute&lt;<span class="type">bool</span>&gt; InAutoWrapText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AutoWrapText.<span class="built_in">Assign</span>(*<span class="keyword">this</span>, <span class="built_in">MoveTemp</span>(InAutoWrapText), <span class="number">0.f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, in <code>STextBlock</code> the variable <code>AutoWrapText</code> holds the value of option. The function <code>Assign()</code> just saves the value its inside. The value of <code>AutoWrapText</code> is used in two positions.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// STextBlock.cpp</span></span><br><span class="line"><span class="function">FVector2D <span class="title">STextBlock::ComputeDesiredSize</span><span class="params">(<span class="type">float</span> LayoutScaleMultiplier)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">SCOPE_CYCLE_COUNTER</span>(Stat_SlateTextBlockCDS);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bSimpleTextMode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FVector2D LocalShadowOffset = <span class="built_in">GetShadowOffset</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> LocalOutlineSize = (<span class="type">float</span>)(<span class="built_in">GetFont</span>().OutlineSettings.OutlineSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Account for the outline width impacting both size of the text by multiplying by 2</span></span><br><span class="line"><span class="comment">// Outline size in Y is accounted for in MaxHeight calculation in Measure()</span></span><br><span class="line"><span class="function"><span class="type">const</span> FVector2D <span class="title">ComputedOutlineSize</span><span class="params">(LocalOutlineSize * <span class="number">2.f</span>, LocalOutlineSize)</span></span>;</span><br><span class="line"><span class="type">const</span> FVector2D TextSize = FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">GetRenderer</span>()-&gt;<span class="built_in">GetFontMeasureService</span>()-&gt;<span class="built_in">Measure</span>(BoundText.<span class="built_in">Get</span>(), <span class="built_in">GetFont</span>()) + ComputedOutlineSize + LocalShadowOffset;</span><br><span class="line"></span><br><span class="line">CachedSimpleDesiredSize = <span class="built_in">FVector2f</span>(FMath::<span class="built_in">Max</span>(MinDesiredWidth.<span class="built_in">Get</span>(), TextSize.X), TextSize.Y);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FVector2D</span>(CachedSimpleDesiredSize.<span class="built_in">GetValue</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ComputeDesiredSize will also update the text layout cache if required</span></span><br><span class="line"><span class="type">const</span> FVector2D TextSize = TextLayoutCache-&gt;<span class="built_in">ComputeDesiredSize</span>(</span><br><span class="line">FSlateTextBlockLayout::<span class="built_in">FWidgetDesiredSizeArgs</span>(</span><br><span class="line">BoundText.<span class="built_in">Get</span>(),</span><br><span class="line">HighlightText.<span class="built_in">Get</span>(),</span><br><span class="line">WrapTextAt.<span class="built_in">Get</span>(),</span><br><span class="line">AutoWrapText.<span class="built_in">Get</span>(),</span><br><span class="line">WrappingPolicy.<span class="built_in">Get</span>(),</span><br><span class="line"><span class="built_in">GetTransformPolicyImpl</span>(),</span><br><span class="line">Margin.<span class="built_in">Get</span>(),</span><br><span class="line">LineHeightPercentage.<span class="built_in">Get</span>(),</span><br><span class="line">Justification.<span class="built_in">Get</span>()),</span><br><span class="line">LayoutScaleMultiplier, <span class="built_in">GetComputedTextStyle</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FVector2D</span>(FMath::<span class="built_in">Max</span>(MinDesiredWidth.<span class="built_in">Get</span>(), TextSize.X), TextSize.Y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callstack</span></span><br><span class="line">UnrealEditor-Slate.dll!STextBlock::<span class="built_in">ComputeDesiredSize</span>(<span class="type">float</span> LayoutScaleMultiplier) Line <span class="number">300</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">CacheDesiredSize</span>(<span class="type">float</span> InLayoutScaleMultiplier) Line <span class="number">936</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Prepass_Internal</span>(<span class="type">float</span> InLayoutScaleMultiplier) Line <span class="number">1714</span>C++</span><br><span class="line">[Inline Frame] UnrealEditor-SlateCore.dll!SWidget::Prepass_ChildLoop::__l2::&lt;lambda_a0677895c4614612fd5b4c5f4771eae9&gt;::<span class="built_in">operator</span>()(SWidget &amp;) Line <span class="number">1751</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!FChildren::ForEachWidget&lt;&lt;lambda_a0677895c4614612fd5b4c5f4771eae9&gt;&gt;(SWidget::Prepass_ChildLoop::__l2::&lt;lambda_a0677895c4614612fd5b4c5f4771eae9&gt; Pred) Line <span class="number">67</span>C++</span><br><span class="line">[Inline Frame] UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Prepass_ChildLoop</span>(<span class="type">float</span>) Line <span class="number">1721</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Prepass_Internal</span>(<span class="type">float</span> InLayoutScaleMultiplier) Line <span class="number">1708</span>C++</span><br><span class="line">...</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Prepass_Internal</span>(<span class="type">float</span> InLayoutScaleMultiplier) Line <span class="number">1708</span>C++</span><br><span class="line">[Inline Frame] UnrealEditor-SlateCore.dll!SWidget::Prepass_ChildLoop::__l2::&lt;lambda_a0677895c4614612fd5b4c5f4771eae9&gt;::<span class="built_in">operator</span>()(SWidget &amp;) Line <span class="number">1751</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!FChildren::ForEachWidget&lt;&lt;lambda_a0677895c4614612fd5b4c5f4771eae9&gt;&gt;(SWidget::Prepass_ChildLoop::__l2::&lt;lambda_a0677895c4614612fd5b4c5f4771eae9&gt; Pred) Line <span class="number">67</span>C++</span><br><span class="line">[Inline Frame] UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Prepass_ChildLoop</span>(<span class="type">float</span>) Line <span class="number">1721</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Prepass_Internal</span>(<span class="type">float</span> InLayoutScaleMultiplier) Line <span class="number">1708</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">SlatePrepass</span>(<span class="type">float</span> InLayoutScaleMultiplier) Line <span class="number">690</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!<span class="built_in">PrepassWindowAndChildren</span>(TSharedRef&lt;SWindow,<span class="number">1</span>&gt; WindowToPrepass) Line <span class="number">1197</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">DrawPrepass</span>(TSharedPtr&lt;SWindow,<span class="number">1</span>&gt; DrawOnlyThisWindow) Line <span class="number">1249</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">PrivateDrawWindows</span>(TSharedPtr&lt;SWindow,<span class="number">1</span>&gt; DrawOnlyThisWindow) Line <span class="number">1294</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">DrawWindows</span>() Line <span class="number">1060</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">TickAndDrawWidgets</span>(<span class="type">float</span> DeltaTime) Line <span class="number">1625</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">Tick</span>(ESlateTickType TickType) Line <span class="number">1482</span>C++</span><br><span class="line">UnrealEditor.exe!FEngineLoop::<span class="built_in">Tick</span>() Line <span class="number">5325</span>C++</span><br><span class="line">[Inline Frame] UnrealEditor.exe!<span class="built_in">EngineTick</span>() Line <span class="number">62</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">GuardedMain</span>(<span class="type">const</span> <span class="type">wchar_t</span> * CmdLine) Line <span class="number">183</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">GuardedMainWrapper</span>(<span class="type">const</span> <span class="type">wchar_t</span> * CmdLine) Line <span class="number">147</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">LaunchWindowsStartup</span>(HINSTANCE__ * hInInstance, HINSTANCE__ * hPrevInstance, <span class="type">char</span> * __formal, <span class="type">int</span> nCmdShow, <span class="type">const</span> <span class="type">wchar_t</span> * CmdLine) Line <span class="number">283</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">WinMain</span>(HINSTANCE__ * hInInstance, HINSTANCE__ * hPrevInstance, <span class="type">char</span> * pCmdLine, <span class="type">int</span> nCmdShow) Line <span class="number">330</span>C++</span><br><span class="line">[External Code]</span><br></pre></td></tr></table></figure><p>First, an execution flow by Prepass.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// STextBlock.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">STextBlock::OnPaint</span><span class="params">( <span class="type">const</span> FPaintArgs&amp; Args, <span class="type">const</span> FGeometry&amp; AllottedGeometry, <span class="type">const</span> FSlateRect&amp; MyCullingRect, FSlateWindowElementList&amp; OutDrawElements, int32 LayerId, <span class="type">const</span> FWidgetStyle&amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled )</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">SCOPE_CYCLE_COUNTER</span>(Stat_SlateTextBlockOnPaint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bSimpleTextMode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Draw the optional shadow</span></span><br><span class="line"><span class="type">const</span> FLinearColor LocalShadowColorAndOpacity = <span class="built_in">GetShadowColorAndOpacity</span>();</span><br><span class="line"><span class="type">const</span> FVector2D LocalShadowOffset = <span class="built_in">GetShadowOffset</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> ShouldDropShadow = LocalShadowColorAndOpacity.A &gt; <span class="number">0.f</span> &amp;&amp; LocalShadowOffset.<span class="built_in">SizeSquared</span>() &gt; <span class="number">0.f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> bShouldBeEnabled = <span class="built_in">ShouldBeEnabled</span>(bParentEnabled);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> FText&amp; LocalText = BoundText.<span class="built_in">Get</span>();</span><br><span class="line">FSlateFontInfo LocalFont = <span class="built_in">GetFont</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ShouldDropShadow)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> int32 OutlineSize = LocalFont.OutlineSettings.OutlineSize;</span><br><span class="line"><span class="keyword">if</span> (!LocalFont.OutlineSettings.bApplyOutlineToDropShadows)</span><br><span class="line">&#123;</span><br><span class="line">LocalFont.OutlineSettings.OutlineSize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FSlateDrawElement::<span class="built_in">MakeText</span>(</span><br><span class="line">OutDrawElements,</span><br><span class="line">LayerId,</span><br><span class="line">AllottedGeometry.<span class="built_in">ToOffsetPaintGeometry</span>(LocalShadowOffset),</span><br><span class="line">LocalText,</span><br><span class="line">LocalFont,</span><br><span class="line">bShouldBeEnabled ? ESlateDrawEffect::None : ESlateDrawEffect::DisabledEffect,</span><br><span class="line">InWidgetStyle.<span class="built_in">GetColorAndOpacityTint</span>() * LocalShadowColorAndOpacity</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Restore outline size for main text</span></span><br><span class="line">LocalFont.OutlineSettings.OutlineSize = OutlineSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// actual text should appear above the shadow</span></span><br><span class="line">++LayerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Draw the text itself</span></span><br><span class="line">FSlateDrawElement::<span class="built_in">MakeText</span>(</span><br><span class="line">OutDrawElements,</span><br><span class="line">LayerId,</span><br><span class="line">AllottedGeometry.<span class="built_in">ToPaintGeometry</span>(),</span><br><span class="line">LocalText,</span><br><span class="line">LocalFont,</span><br><span class="line">bShouldBeEnabled ? ESlateDrawEffect::None : ESlateDrawEffect::DisabledEffect,</span><br><span class="line">InWidgetStyle.<span class="built_in">GetColorAndOpacityTint</span>() * <span class="built_in">GetColorAndOpacity</span>().<span class="built_in">GetColor</span>(InWidgetStyle)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FVector2D LastDesiredSize = TextLayoutCache-&gt;<span class="built_in">GetDesiredSize</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// OnPaint will also update the text layout cache if required</span></span><br><span class="line">LayerId = TextLayoutCache-&gt;<span class="built_in">OnPaint</span>(Args, AllottedGeometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, <span class="built_in">ShouldBeEnabled</span>(bParentEnabled));</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> FVector2D NewDesiredSize = TextLayoutCache-&gt;<span class="built_in">GetDesiredSize</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">HACK:</span> Due to the nature of wrapping and layout, we may have been arranged in a different box than what we were cached with.  Which</span></span><br><span class="line"><span class="comment">// might update wrapping, so make sure we always set the desired size to the current size of the text layout, which may have changed</span></span><br><span class="line"><span class="comment">// during paint.</span></span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> bCanWrap = WrapTextAt.<span class="built_in">Get</span>() &gt; <span class="number">0</span> || AutoWrapText.<span class="built_in">Get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bCanWrap &amp;&amp; !NewDesiredSize.<span class="built_in">Equals</span>(LastDesiredSize))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">const_cast</span>&lt;STextBlock*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">Invalidate</span>(EInvalidateWidgetReason::Layout);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> LayerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Callstack</span></span><br><span class="line">UnrealEditor-Slate.dll!STextBlock::<span class="built_in">OnPaint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">255</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Paint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">1543</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SPanel::<span class="built_in">PaintArrangedChildren</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FArrangedChildren &amp; ArrangedChildren, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">31</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SPanel::<span class="built_in">OnPaint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">12</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Paint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">1543</span>C++</span><br><span class="line">...</span><br><span class="line">UnrealEditor-SlateCore.dll!SPanel::<span class="built_in">PaintArrangedChildren</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FArrangedChildren &amp; ArrangedChildren, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">31</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SPanel::<span class="built_in">OnPaint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">12</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Paint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">1543</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SOverlay::<span class="built_in">OnPaint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">200</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Paint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">1543</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SCompoundWidget::<span class="built_in">OnPaint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">46</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWidget::<span class="built_in">Paint</span>(<span class="type">const</span> FPaintArgs &amp; Args, <span class="type">const</span> FGeometry &amp; AllottedGeometry, <span class="type">const</span> FSlateRect &amp; MyCullingRect, FSlateWindowElementList &amp; OutDrawElements, <span class="type">int</span> LayerId, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">1543</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWindow::<span class="built_in">PaintSlowPath</span>(<span class="type">const</span> FSlateInvalidationContext &amp; Context) Line <span class="number">2073</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!FSlateInvalidationRoot::<span class="built_in">PaintInvalidationRoot</span>(<span class="type">const</span> FSlateInvalidationContext &amp; Context) Line <span class="number">399</span>C++</span><br><span class="line">UnrealEditor-SlateCore.dll!SWindow::<span class="built_in">PaintWindow</span>(<span class="type">double</span> CurrentTime, <span class="type">float</span> DeltaTime, FSlateWindowElementList &amp; OutDrawElements, <span class="type">const</span> FWidgetStyle &amp; InWidgetStyle, <span class="type">bool</span> bParentEnabled) Line <span class="number">2105</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">DrawWindowAndChildren</span>(<span class="type">const</span> TSharedRef&lt;SWindow,<span class="number">1</span>&gt; &amp; WindowToDraw, FDrawWindowArgs &amp; DrawWindowArgs) Line <span class="number">1106</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">PrivateDrawWindows</span>(TSharedPtr&lt;SWindow,<span class="number">1</span>&gt; DrawOnlyThisWindow) Line <span class="number">1338</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">DrawWindows</span>() Line <span class="number">1060</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">TickAndDrawWidgets</span>(<span class="type">float</span> DeltaTime) Line <span class="number">1625</span>C++</span><br><span class="line">UnrealEditor-Slate.dll!FSlateApplication::<span class="built_in">Tick</span>(ESlateTickType TickType) Line <span class="number">1482</span>C++</span><br><span class="line">UnrealEditor.exe!FEngineLoop::<span class="built_in">Tick</span>() Line <span class="number">5325</span>C++</span><br><span class="line">[Inline Frame] UnrealEditor.exe!<span class="built_in">EngineTick</span>() Line <span class="number">62</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">GuardedMain</span>(<span class="type">const</span> <span class="type">wchar_t</span> * CmdLine) Line <span class="number">183</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">GuardedMainWrapper</span>(<span class="type">const</span> <span class="type">wchar_t</span> * CmdLine) Line <span class="number">147</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">LaunchWindowsStartup</span>(HINSTANCE__ * hInInstance, HINSTANCE__ * hPrevInstance, <span class="type">char</span> * __formal, <span class="type">int</span> nCmdShow, <span class="type">const</span> <span class="type">wchar_t</span> * CmdLine) Line <span class="number">283</span>C++</span><br><span class="line">UnrealEditor.exe!<span class="built_in">WinMain</span>(HINSTANCE__ * hInInstance, HINSTANCE__ * hPrevInstance, <span class="type">char</span> * pCmdLine, <span class="type">int</span> nCmdShow) Line <span class="number">330</span>C++</span><br><span class="line">[External Code]</span><br></pre></td></tr></table></figure><p>Second, an execution flow by Paint.</p><p>The flows are branched at <code>FSlateApplication::PrivateDrawWindows()</code>. In the function, <code>DrawPrepass()</code> is called at line #1292, and <code>DrawWindowAndChildren()</code> is called at line #1338. Respectively, Prepass and Paint. Engine just invalidate the widget in Paint flow, so we only need to look into Prepass flow.</p><h1 id="Calculating-a-length-of-text-wrap"><a href="#Calculating-a-length-of-text-wrap" class="headerlink" title="Calculating a length of text wrap"></a><em><code>Calculating a length of text wrap</code></em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FVector2D <span class="title">FSlateTextBlockLayout::ComputeDesiredSize</span><span class="params">(<span class="type">const</span> FWidgetDesiredSizeArgs&amp; InWidgetArgs, <span class="type">const</span> <span class="type">float</span> InScale, <span class="type">const</span> FTextBlockStyle&amp; InTextStyle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Cache the wrapping rules so that we can recompute the wrap at width in paint.</span></span><br><span class="line">CachedWrapTextAt = InWidgetArgs.WrapTextAt;</span><br><span class="line">bCachedAutoWrapText = InWidgetArgs.AutoWrapText;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> ETextTransformPolicy PreviousTransformPolicy = TextLayout-&gt;<span class="built_in">GetTransformPolicy</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the text layout information</span></span><br><span class="line">TextLayout-&gt;<span class="built_in">SetScale</span>(InScale);</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetWrappingWidth</span>(<span class="built_in">CalculateWrappingWidth</span>());</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetWrappingPolicy</span>(InWidgetArgs.WrappingPolicy);</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetTransformPolicy</span>(InWidgetArgs.TransformPolicy);</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetMargin</span>(InWidgetArgs.Margin);</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetJustification</span>(InWidgetArgs.Justification);</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetLineHeightPercentage</span>(InWidgetArgs.LineHeightPercentage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Has the transform policy changed? If so we need a full refresh as that is destructive to the model text</span></span><br><span class="line"><span class="keyword">if</span> (PreviousTransformPolicy != TextLayout-&gt;<span class="built_in">GetTransformPolicy</span>())</span><br><span class="line">&#123;</span><br><span class="line">Marshaller-&gt;<span class="built_in">MakeDirty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Has the style used for this text block changed?</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsStyleUpToDate</span>(InTextStyle))</span><br><span class="line">&#123;</span><br><span class="line">TextLayout-&gt;<span class="built_in">SetDefaultTextStyle</span>(InTextStyle);</span><br><span class="line">Marshaller-&gt;<span class="built_in">MakeDirty</span>(); <span class="comment">// will regenerate the text using the new default style</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">bool</span> bRequiresTextUpdate = <span class="literal">false</span>;</span><br><span class="line"><span class="type">const</span> FText&amp; TextToSet = InWidgetArgs.Text;</span><br><span class="line"><span class="keyword">if</span> (!TextLastUpdate.<span class="built_in">IdenticalTo</span>(TextToSet))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// The pointer used by the bound text has changed, however the text may still be the same - check that now</span></span><br><span class="line"><span class="keyword">if</span> (!TextLastUpdate.<span class="built_in">IsDisplayStringEqualTo</span>(TextToSet))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// The source text has changed, so update the internal text</span></span><br><span class="line">bRequiresTextUpdate = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update this even if the text is lexically identical, as it will update the pointer compared by IdenticalTo for the next Tick</span></span><br><span class="line">TextLastUpdate = <span class="built_in">FTextSnapshot</span>(TextToSet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bRequiresTextUpdate || Marshaller-&gt;<span class="built_in">IsDirty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UpdateTextLayout</span>(TextToSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FText&amp; HighlightTextToSet = InWidgetArgs.HighlightText;</span><br><span class="line"><span class="keyword">if</span> (!HighlightTextLastUpdate.<span class="built_in">IdenticalTo</span>(HighlightTextToSet))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// The pointer used by the bound text has changed, however the text may still be the same - check that now</span></span><br><span class="line"><span class="keyword">if</span> (!HighlightTextLastUpdate.<span class="built_in">IsDisplayStringEqualTo</span>(HighlightTextToSet))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UpdateTextHighlights</span>(HighlightTextToSet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update this even if the text is lexically identical, as it will update the pointer compared by IdenticalTo for the next Tick</span></span><br><span class="line">HighlightTextLastUpdate = <span class="built_in">FTextSnapshot</span>(HighlightTextToSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We need to update our size if the text layout has become dirty</span></span><br><span class="line">TextLayout-&gt;<span class="built_in">UpdateIfNeeded</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TextLayout-&gt;<span class="built_in">GetSize</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function <code>FSlateTextBlockLayout::ComputeDesiredSize()</code> is called during Prepass flow. Here, <code>bCachedAutoWrapText</code> caches the value of <code>InWidgetArgs.AutoWrapText</code>. This will be used at <code>CalculateWrappingWidth()</code> later.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">FSlateTextBlockLayout::CalculateWrappingWidth</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Text wrapping can either be used defined (WrapTextAt), automatic (bAutoWrapText and CachedSize), </span></span><br><span class="line"><span class="comment">// or a mixture of both. Take whichever has the smallest value (&gt;1)</span></span><br><span class="line"><span class="type">float</span> WrappingWidth = CachedWrapTextAt;</span><br><span class="line"><span class="keyword">if</span> (bCachedAutoWrapText &amp;&amp; CachedSize.X &gt;= <span class="number">1.0f</span>)</span><br><span class="line">&#123;</span><br><span class="line">WrappingWidth = (WrappingWidth &gt;= <span class="number">1.0f</span>) ? FMath::<span class="built_in">Min</span>(WrappingWidth, CachedSize.X) : CachedSize.X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FMath::<span class="built_in">Max</span>(<span class="number">0.0f</span>, WrappingWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>CachedWrapTextAt</code> will be the same with the value set by option <code>WrapTextAt</code> in editor. And, the <code>CachedSize</code> depends on the size of panel where the TextBlock resides in. In the example we are using, the variables would have a value like below:</p><ul><li><code>CachedWrapTextAt</code> &#x3D; 0</li><li><code>CachedSize.X</code> &#x3D; 100</li></ul><p>Because the width of SizeBox is 100 and we set the option <code>WrapTextAt</code> as 0. The function determines the length of wrapping, but it is not for the logic about how to divide texts or how to break lines. So, look back on <code>FSlateTextBlockLayout::ComputeDesiredSize()</code>.</p><h1 id="UpdateLayout-when-it-is-dirty"><a href="#UpdateLayout-when-it-is-dirty" class="headerlink" title="UpdateLayout when it is dirty"></a><em><code>UpdateLayout when it is dirty</code></em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SlateTextBlockLayout.cpp</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// We need to update our size if the text layout has become dirty</span></span><br><span class="line">TextLayout-&gt;<span class="built_in">UpdateIfNeeded</span>();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// TextLayout.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::UpdateIfNeeded</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (CachedLayoutGeneration != GSlateLayoutGeneration)</span><br><span class="line">&#123;</span><br><span class="line">CachedLayoutGeneration = GSlateLayoutGeneration;</span><br><span class="line">DirtyFlags |= ETextLayoutDirtyState::Layout;</span><br><span class="line"><span class="built_in">DirtyAllLineModels</span>(ELineModelDirtyState::All);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> bHasChangedLayout = !!(DirtyFlags &amp; ETextLayoutDirtyState::Layout);</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> bHasChangedHighlights = !!(DirtyFlags &amp; ETextLayoutDirtyState::Highlights);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( bHasChangedLayout )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// if something has changed then create a new View</span></span><br><span class="line"><span class="built_in">UpdateLayout</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the layout has changed, we always need to update the highlights</span></span><br><span class="line"><span class="keyword">if</span> ( bHasChangedLayout || bHasChangedHighlights)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UpdateHighlights</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the function, there is some code to call <code>FTextLayout::UpdateIfNeeded()</code>. Oh, the <code>UpdateLayout()</code> looks like the one we wanted. The code will be executed when <code>bHasChangedLayout</code> is true, and the value is usually set by <code>SetWrappingWidth()</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::SetWrappingWidth</span><span class="params">( <span class="type">float</span> Value )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> WasWrapping = WrappingWidth &gt; <span class="number">0.0f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsWrapping = Value &gt; <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( WrappingWidth != Value )</span><br><span class="line">&#123;</span><br><span class="line">WrappingWidth = Value; </span><br><span class="line">DirtyFlags |= ETextLayoutDirtyState::Layout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( WasWrapping != IsWrapping )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Changing from wrapping/not-wrapping will affect the wrapping information for *all lines*</span></span><br><span class="line"><span class="comment">// Clear out the entire cache so it gets regenerated on the text call to FlowLayout</span></span><br><span class="line"><span class="built_in">DirtyAllLineModels</span>(ELineModelDirtyState::WrappingInformation);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Suppose you switch the option <code>AutoWrapText</code> from false into true. Here, <code>DirtyFlags</code> will flag the <code>ETextLayoutDirtyState::Layout</code>, which is 1. Therefore, <code>!!(DirtyFlags &amp; ETextLayoutDirtyState::Layout)</code> turns into 1. The <code>bHasChangedLayout</code> becomes 1, too.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::UpdateLayout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">SCOPE_CYCLE_COUNTER</span>(STAT_SlateTextLayout);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ClearView</span>();</span><br><span class="line"><span class="built_in">BeginLayout</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">FlowLayout</span>();</span><br><span class="line"><span class="built_in">JustifyLayout</span>();</span><br><span class="line"><span class="built_in">MarginLayout</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">EndLayout</span>();</span><br><span class="line"></span><br><span class="line">DirtyFlags &amp;= ~ETextLayoutDirtyState::Layout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>ClearView()</code> and <code>BeginLayout()</code> are not important in this post. Plus, they do not something important either.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::FlowLayout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> WrappingDrawWidth = <span class="built_in">GetWrappingDrawWidth</span>();</span><br><span class="line"></span><br><span class="line">TArray&lt; TSharedRef&lt; ILayoutBlock &gt; &gt; SoftLine;</span><br><span class="line"><span class="keyword">for</span> (int32 LineModelIndex = <span class="number">0</span>; LineModelIndex &lt; LineModels.<span class="built_in">Num</span>(); LineModelIndex++)</span><br><span class="line">&#123;</span><br><span class="line">FLineModel&amp; LineModel = LineModels[ LineModelIndex ];</span><br><span class="line"><span class="built_in">CalculateLineTextDirection</span>(LineModel);</span><br><span class="line"><span class="built_in">FlushLineTextShapingCache</span>(LineModel);</span><br><span class="line"><span class="built_in">CreateLineWrappingCache</span>(LineModel);</span><br><span class="line"></span><br><span class="line"><span class="built_in">FlowLineLayout</span>(LineModelIndex, WrappingDrawWidth, SoftLine);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the <code>FlowLayout()</code>, the code that calls <code>CreateLineWrappingCache()</code> is a point since the <code>CreateLineWrappingCache()</code> creates data for wrapping text.</p><h1 id="Break-lines-1-3-Separating-text-into-slices"><a href="#Break-lines-1-3-Separating-text-into-slices" class="headerlink" title="Break lines (1/3); Separating text into slices"></a><em><code>Break lines (1/3); Separating text into slices</code></em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::CreateLineWrappingCache</span><span class="params">(FLineModel&amp; LineModel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(LineModel.DirtyFlags &amp; ELineModelDirtyState::WrappingInformation))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LineModel.BreakCandidates.<span class="built_in">Empty</span>();</span><br><span class="line">LineModel.DirtyFlags &amp;= ~ELineModelDirtyState::WrappingInformation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int32 RunIndex = <span class="number">0</span>; RunIndex &lt; LineModel.Runs.<span class="built_in">Num</span>(); RunIndex++)</span><br><span class="line">&#123;</span><br><span class="line">LineModel.Runs[RunIndex].<span class="built_in">ClearCache</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsWrapping = WrappingWidth &gt; <span class="number">0.0f</span>;</span><br><span class="line"><span class="keyword">if</span> (!IsWrapping)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we&#x27;ve not yet been provided with a custom line break iterator, then just use the default one</span></span><br><span class="line"><span class="keyword">if</span> (!LineBreakIterator.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">LineBreakIterator = FBreakIterator::<span class="built_in">CreateLineBreakIterator</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LineBreakIterator-&gt;<span class="built_in">SetStringRef</span>(&amp;LineModel.Text.<span class="built_in">Get</span>());</span><br><span class="line"></span><br><span class="line">int32 PreviousBreak = <span class="number">0</span>;</span><br><span class="line">int32 CurrentBreak = <span class="number">0</span>;</span><br><span class="line">int32 CurrentRunIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( ( CurrentBreak = LineBreakIterator-&gt;<span class="built_in">MoveToNext</span>() ) != INDEX_NONE )</span><br><span class="line">&#123;</span><br><span class="line">LineModel.BreakCandidates.<span class="built_in">Add</span>( <span class="built_in">CreateBreakCandidate</span>(<span class="comment">/*OUT*/</span>CurrentRunIndex, LineModel, PreviousBreak, CurrentBreak) );</span><br><span class="line">PreviousBreak = CurrentBreak;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LineBreakIterator-&gt;<span class="built_in">ClearString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this function, we found some variables that have a name of <code>LineBreak</code>. Let us check what the line break iterator does.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;IBreakIterator&gt; <span class="title">FBreakIterator::CreateLineBreakIterator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FICULineBreakIterator</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>LinBreakIterator</code> is a line break iterator using the implementation of <a href="https://github.com/unicode-org/icu/blob/main/icu4c/source/common/unicode/brkiter.h">ICU(International Components for Unicode)’s break iterator</a>. The break iterator does a job of finding a location of boundaries in text. Visit <a href="https://unicode-org.github.io/icu-docs/apidoc/dev/icu4c/classicu_1_1BreakIterator.html#details">here</a> for more details. To summarize, the break iterator can find where each word ends. For example, we have a text of <code>Text Block Test</code> and the break iterator can find locations just like this <code>Text (HERE)Block (HERE)Test(HERE)</code>. So, let us see how it works.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">int32 <span class="title">FICULineBreakIterator::MoveToNextImpl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TSharedRef&lt;icu::BreakIterator&gt; LineBrkIt = <span class="built_in">GetInternalLineBreakIterator</span>();</span><br><span class="line">FICUTextCharacterIterator&amp; CharIt = <span class="built_in">static_cast</span>&lt;FICUTextCharacterIterator&amp;&gt;(LineBrkIt-&gt;<span class="built_in">getText</span>());</span><br><span class="line"></span><br><span class="line">int32 InternalPosition = CharIt.<span class="built_in">SourceIndexToInternalIndex</span>(CurrentPosition);</span><br><span class="line"></span><br><span class="line"><span class="comment">// For Hangul using per-word wrapping, we walk forward to the last Hangul character in the word and use that as the starting point for the </span></span><br><span class="line"><span class="comment">// line-break iterator, as this will correctly handle the remaining Geumchik wrapping rules, without also causing per-syllable wrapping</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetHangulTextWrappingMethod</span>() == EHangulTextWrappingMethod::PerWord)</span><br><span class="line">&#123;</span><br><span class="line">CharIt.<span class="built_in">setIndex32</span>(InternalPosition);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsHangul</span>(CharIt.<span class="built_in">current32</span>()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Walk to the end of the Hangul characters</span></span><br><span class="line"><span class="keyword">while</span> (CharIt.<span class="built_in">hasNext</span>() &amp;&amp; <span class="built_in">IsHangul</span>(CharIt.<span class="built_in">next32</span>()))</span><br><span class="line">&#123;</span><br><span class="line">InternalPosition = CharIt.<span class="built_in">getIndex</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InternalPosition = LineBrkIt-&gt;<span class="built_in">following</span>(InternalPosition);</span><br><span class="line">CurrentPosition = CharIt.<span class="built_in">InternalIndexToSourceIndex</span>(InternalPosition);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> CurrentPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>MoveToNext()</code> calls the <code>MoveToNextImpl()</code>. And, the <code>MoveToNextImpl()</code> change the <code>InternalPosition</code>, which is used for finding a location in text.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UnrealEngine/Engine/Source/ThirdParty/ICU/icu4c-64_1/include/unicode/brkiter.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Advance the iterator to the first boundary following the specified offset.</span></span><br><span class="line"><span class="comment"> * The value returned is always greater than the offset or</span></span><br><span class="line"><span class="comment"> * the value BreakIterator.DONE</span></span><br><span class="line"><span class="comment"> * @param offset the offset to begin scanning.</span></span><br><span class="line"><span class="comment"> * @return The first boundary after the specified offset.</span></span><br><span class="line"><span class="comment"> * @stable ICU 2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">following</span><span class="params">(<span class="type">int32_t</span> offset)</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>The <code>InternalPosition</code> is passed into <code>following</code> and it is the code of ICU library.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[index] 0123456789...</span><br><span class="line">[array] Text Block Test</span><br><span class="line"></span><br><span class="line">[flow]</span><br><span class="line">PreviousBreak = 0, CurrentBreak = 0</span><br><span class="line">MoveToNext()</span><br><span class="line">PreviousBreak = 0, CurrentBreak = 5</span><br><span class="line">CreateBreakCandidate()</span><br><span class="line">PreviousBreak = 5, CurrentBreak = 5</span><br><span class="line">MoveToNext()</span><br><span class="line">PreviousBreak = 5, CurrentBreak = 11</span><br><span class="line">CreateBreakCandidate()</span><br><span class="line">PreviousBreak = 11, CurrentBreak = 11</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In our test text, the flow looks like above.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FBreakCandidate</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/** Range inclusive of trailing whitespace, as used to visually display and interact with the text */</span></span><br><span class="line">FTextRange ActualRange;</span><br><span class="line"><span class="comment">/** Range exclusive of trailing whitespace, as used to perform wrapping on a word boundary */</span></span><br><span class="line">FTextRange TrimmedRange;</span><br><span class="line"><span class="comment">/** Measured size inclusive of trailing whitespace, as used to visually display and interact with the text */</span></span><br><span class="line">FVector2D ActualSize;</span><br><span class="line"><span class="comment">/** Measured width exclusive of trailing whitespace, as used to perform wrapping on a word boundary */</span></span><br><span class="line"><span class="type">float</span> TrimmedWidth;</span><br><span class="line"><span class="comment">/** If this break candidate has trailing whitespace, this is the width of the first character of the trailing whitespace */</span></span><br><span class="line"><span class="type">float</span> FirstTrailingWhitespaceCharWidth;</span><br><span class="line"></span><br><span class="line">int16 MaxAboveBaseline;</span><br><span class="line">int16 MaxBelowBaseline;</span><br><span class="line"></span><br><span class="line">int8 Kerning;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> TEXT_LAYOUT_DEBUG</span></span><br><span class="line">FString DebugSlice;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>A <code>FBreakCandidate</code> will be inserted into <code>BreakCandidates</code> each iteration. It seems the <code>FBreakCandidate</code> knows the size of word (or a part of text). What happened in <code>CreateBreakCandidate()</code> ? How could they know the actual size of text ?</p><h1 id="Break-lines-2-3-Measuring-size-of-each-slice"><a href="#Break-lines-2-3-Measuring-size-of-each-slice" class="headerlink" title="Break lines (2/3); Measuring size of each slice"></a><em><code>Break lines (2/3); Measuring size of each slice</code></em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FTextLayout::FBreakCandidate <span class="title">FTextLayout::CreateBreakCandidate</span><span class="params">( int32&amp; OutRunIndex, FLineModel&amp; Line, int32 PreviousBreak, int32 CurrentBreak )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// We need to consider the Runs when detecting and measuring the text lengths of Lines because</span></span><br><span class="line"><span class="comment">// the font style used makes a difference.</span></span><br><span class="line"><span class="type">const</span> int32 FirstRunIndexChecked = OutRunIndex;</span><br><span class="line"><span class="keyword">for</span> (; OutRunIndex &lt; Line.Runs.<span class="built_in">Num</span>(); OutRunIndex++)</span><br><span class="line">&#123;</span><br><span class="line">FRunModel&amp; Run = Line.Runs[ OutRunIndex ];</span><br><span class="line"><span class="type">const</span> FTextRange Range = Run.<span class="built_in">GetTextRange</span>();</span><br><span class="line"></span><br><span class="line">FVector2D SliceSize;</span><br><span class="line">FVector2D SliceSizeWithoutTrailingWhitespace;</span><br><span class="line">int32 StopIndex = PreviousBreak;</span><br><span class="line"></span><br><span class="line">WhitespaceStopIndex = StopIndex = FMath::<span class="built_in">Min</span>( Range.EndIndex, CurrentBreak );</span><br><span class="line">int32 BeginIndex = FMath::<span class="built_in">Max</span>( PreviousBreak, Range.BeginIndex );</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( WhitespaceStopIndex &gt; BeginIndex &amp;&amp; FText::<span class="built_in">IsWhitespace</span>( (*Line.Text)[ WhitespaceStopIndex - <span class="number">1</span> ] ) )</span><br><span class="line">&#123;</span><br><span class="line">--WhitespaceStopIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( BeginIndex == StopIndex )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This slice is empty, no need to adjust anything</span></span><br><span class="line">SliceSize = SliceSizeWithoutTrailingWhitespace = FVector2D::ZeroVector;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( BeginIndex == WhitespaceStopIndex )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This slice contains only whitespace, no need to adjust SliceSizeWithoutTrailingWhitespace</span></span><br><span class="line">SliceSize = Run.<span class="built_in">Measure</span>( BeginIndex, StopIndex, Scale, RunTextContext );</span><br><span class="line">SliceSizeWithoutTrailingWhitespace = FVector2D::ZeroVector;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( WhitespaceStopIndex != StopIndex )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This slice contains trailing whitespace, measure the text size, then add on the whitespace size</span></span><br><span class="line">SliceSize = SliceSizeWithoutTrailingWhitespace = Run.<span class="built_in">Measure</span>( BeginIndex, WhitespaceStopIndex, Scale, RunTextContext );</span><br><span class="line"><span class="type">const</span> <span class="type">float</span> WhitespaceWidth = Run.<span class="built_in">Measure</span>( WhitespaceStopIndex, StopIndex, Scale, RunTextContext ).X;</span><br><span class="line">SliceSize.X += WhitespaceWidth;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We also need to measure the width of the first piece of trailing whitespace</span></span><br><span class="line"><span class="keyword">if</span> ( WhitespaceStopIndex + <span class="number">1</span> == StopIndex )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Only have one piece of whitespace</span></span><br><span class="line">FirstTrailingWhitespaceCharWidth = WhitespaceWidth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Deliberately use the run version of Measure as we don&#x27;t want the run model to cache this measurement since it may be out of order and break the binary search</span></span><br><span class="line">FirstTrailingWhitespaceCharWidth = Run.<span class="built_in">GetRun</span>()-&gt;<span class="built_in">Measure</span>( WhitespaceStopIndex, WhitespaceStopIndex + <span class="number">1</span>, Scale, RunTextContext ).X;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This slice contains no whitespace, both sizes are the same and can use the same measurement</span></span><br><span class="line">SliceSize = SliceSizeWithoutTrailingWhitespace = Run.<span class="built_in">Measure</span>( BeginIndex, StopIndex, Scale, RunTextContext );</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>CreateBreakCandidate()</code> function is quite big size, about 200 lines. But the core of function is to calculate a size of slice. Do you remember the variable <code>CurrentBreak</code> that indicates where each slice ends ? Here, the function make a slice according to <code>CurrentBreak</code> and trim it. Trimming happens in <code>while</code> statement, which decreases the <code>WhitespaceStopIndex</code> until it indicates an end of last word.</p><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/04.png" class=""><p>The <code>WhitespaceStopIndex</code> would be 4 in our test text. That is because the index of first whitespace is 4 in <code>Text Block Test</code>. Eventually, we will enter the function <code>Measure()</code> as the slice is not empty. The only case that <code>Measure()</code> not called is when <code>BeginIndex == StopIndex</code> is true, in other words <code>CurrentBreak == 0</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TextLayout.cpp</span></span><br><span class="line">FVector2D FTextLayout::FRunModel::<span class="built_in">Measure</span>(int32 BeginIndex, int32 EndIndex, <span class="type">float</span> InScale, <span class="type">const</span> FRunTextContext&amp; InTextContext)</span><br><span class="line">&#123;</span><br><span class="line">FVector2D Size = Run-&gt;<span class="built_in">Measure</span>(BeginIndex, EndIndex, InScale, InTextContext);</span><br><span class="line"></span><br><span class="line">MeasuredRanges.<span class="built_in">Add</span>( <span class="built_in">FTextRange</span>( BeginIndex, EndIndex ) );</span><br><span class="line">MeasuredRangeSizes.<span class="built_in">Add</span>(Size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SlateTextRun.cpp</span></span><br><span class="line"><span class="function">FVector2D <span class="title">FSlateTextRun::Measure</span><span class="params">( int32 BeginIndex, int32 EndIndex, <span class="type">float</span> Scale, <span class="type">const</span> FRunTextContext&amp; TextContext )</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="type">const</span> FVector2D <span class="title">ShadowOffsetToApply</span><span class="params">((EndIndex == Range.EndIndex) ? FMath::Abs(Style.ShadowOffset.X * Scale) : <span class="number">0.0f</span>, FMath::Abs(Style.ShadowOffset.Y * Scale))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Offset the measured shaped text by the outline since the outline was not factored into the size of the text</span></span><br><span class="line"><span class="comment">// Need to add the outline offsetting to the beginning and the end because it surrounds both sides.</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> ScaledOutlineSize = Style.Font.OutlineSettings.OutlineSize * Scale;</span><br><span class="line"><span class="function"><span class="type">const</span> FVector2D <span class="title">OutlineSizeToApply</span><span class="params">((BeginIndex == Range.BeginIndex ? ScaledOutlineSize : <span class="number">0</span>) + (EndIndex == Range.EndIndex ? ScaledOutlineSize : <span class="number">0</span>), ScaledOutlineSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (EndIndex - BeginIndex == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FVector2D</span>(<span class="number">0</span>, <span class="built_in">GetMaxHeight</span>(Scale)) + ShadowOffsetToApply + OutlineSizeToApply;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the full text range (rather than the run range) so that text that spans runs will still be shaped correctly</span></span><br><span class="line"><span class="keyword">return</span> ShapedTextCacheUtil::<span class="built_in">MeasureShapedText</span>(TextContext.ShapedTextCache, <span class="built_in">FCachedShapedTextKey</span>(<span class="built_in">FTextRange</span>(<span class="number">0</span>, Text-&gt;<span class="built_in">Len</span>()), Scale, TextContext, Style.Font), <span class="built_in">FTextRange</span>(BeginIndex, EndIndex), **Text) + ShadowOffsetToApply + OutlineSizeToApply;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We will get a FVector2D from <code>FSlateTextRun::Measure()</code>, which is the size of slice. The code <code>Run-&gt;Measure()</code> is the same with calling <code>ShapedTextCacheUtil::MeasureShapedText()</code> when you are using a TextBlock. Calculating shadow offset is not important in this post, so we need to focus on <code>ShapedTextCacheUtil::MeasureShapedText()</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ShapedTextFwd.h</span></span><br><span class="line"><span class="keyword">typedef</span> TSharedRef&lt;<span class="type">const</span> FShapedGlyphSequence&gt; FShapedGlyphSequenceRef;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShapedTextCache.cpp</span></span><br><span class="line"><span class="function">FVector2D <span class="title">ShapedTextCacheUtil::MeasureShapedText</span><span class="params">(<span class="type">const</span> FShapedTextCacheRef&amp; InShapedTextCache, <span class="type">const</span> FCachedShapedTextKey&amp; InRunKey, <span class="type">const</span> FTextRange&amp; InMeasureRange, <span class="type">const</span> TCHAR* InText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Get the shaped text for the entire run and try and take a sub-measurement from it - this can help minimize the amount of text shaping that needs to be done when measuring text</span></span><br><span class="line">FShapedGlyphSequenceRef ShapedText = InShapedTextCache-&gt;<span class="built_in">FindOrAddShapedText</span>(InRunKey, InText);</span><br><span class="line"></span><br><span class="line">TOptional&lt;int32&gt; MeasuredWidth = ShapedText-&gt;<span class="built_in">GetMeasuredWidth</span>(InMeasureRange.BeginIndex, InMeasureRange.EndIndex);</span><br><span class="line"><span class="keyword">if</span> (!MeasuredWidth.<span class="built_in">IsSet</span>())</span><br><span class="line">&#123;</span><br><span class="line">FCachedShapedTextKey MeasureKey = InRunKey;</span><br><span class="line">MeasureKey.TextRange = InMeasureRange;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Couldn&#x27;t measure the sub-range, try and measure from a shape of the specified range</span></span><br><span class="line">ShapedText = InShapedTextCache-&gt;<span class="built_in">FindOrAddShapedText</span>(MeasureKey, InText);</span><br><span class="line">MeasuredWidth = ShapedText-&gt;<span class="built_in">GetMeasuredWidth</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">check</span>(MeasuredWidth.<span class="built_in">IsSet</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FVector2D</span>(MeasuredWidth.<span class="built_in">GetValue</span>(), ShapedText-&gt;<span class="built_in">GetMaxTextHeight</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, the <code>FShapedGlyphSequenceRef</code> is a shared reference of <code>FShapedGlyphSequence</code>. Then, what the hell is <code>FShapedGlyphSequence</code> ? And what it does ?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FShapedGlyphSequenceRef <span class="title">FShapedTextCache::FindOrAddShapedText</span><span class="params">(<span class="type">const</span> FCachedShapedTextKey&amp; InKey, <span class="type">const</span> TCHAR* InText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FShapedGlyphSequencePtr ShapedText = <span class="built_in">FindShapedText</span>(InKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ShapedText.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">ShapedText = <span class="built_in">AddShapedText</span>(InKey, InText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ShapedText.<span class="built_in">ToSharedRef</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FShapedGlyphSequencePtr <span class="title">FShapedTextCache::FindShapedText</span><span class="params">(<span class="type">const</span> FCachedShapedTextKey&amp; InKey)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FShapedGlyphSequencePtr ShapedText = CachedShapedText.<span class="built_in">FindRef</span>(InKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ShapedText.<span class="built_in">IsValid</span>() &amp;&amp; !ShapedText-&gt;<span class="built_in">IsDirty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ShapedText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FShapedGlyphSequenceRef <span class="title">FShapedTextCache::AddShapedText</span><span class="params">(<span class="type">const</span> FCachedShapedTextKey&amp; InKey, FShapedGlyphSequenceRef InShapedText)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CachedShapedText.<span class="built_in">Add</span>(InKey, InShapedText);</span><br><span class="line"><span class="keyword">return</span> InShapedText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, engine tries to find if there is already existing one. If not, creates new one and insert it into the cache.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FontCache.h</span></span><br><span class="line"><span class="comment">/** Information for rendering a shaped text sequence */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SLATECORE_API</span> FShapedGlyphSequence</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/** Array of glyphs in this sequence. This data will be ordered so that you can iterate and draw left-to-right, which means it will be backwards for right-to-left languages */</span></span><br><span class="line">TArray&lt;FShapedGlyphEntry&gt; GlyphsToRender;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Information for rendering one glyph in a shaped text sequence */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FShapedGlyphEntry</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/** The index of this glyph from the source text. The source indices may skip characters if the sequence contains ligatures, additionally, some characters produce multiple glyphs leading to duplicate source indices */</span></span><br><span class="line">int32 SourceIndex = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/** The amount to advance in X before drawing the next glyph in the sequence */</span></span><br><span class="line">int16 XAdvance = <span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// FontCache.cpp</span></span><br><span class="line">FShapedGlyphSequence::<span class="built_in">FShapedGlyphSequence</span>(TArray&lt;FShapedGlyphEntry&gt; InGlyphsToRender, <span class="type">const</span> int16 InTextBaseline, <span class="type">const</span> uint16 InMaxTextHeight, <span class="type">const</span> UObject* InFontMaterial, <span class="type">const</span> FFontOutlineSettings&amp; InOutlineSettings, <span class="type">const</span> FSourceTextRange&amp; InSourceTextRange)</span><br><span class="line">: <span class="built_in">GlyphsToRender</span>(<span class="built_in">MoveTemp</span>(InGlyphsToRender))</span><br><span class="line">, <span class="built_in">TextBaseline</span>(InTextBaseline)</span><br><span class="line">, <span class="built_in">MaxTextHeight</span>(InMaxTextHeight)</span><br><span class="line">, <span class="built_in">FontMaterial</span>(InFontMaterial)</span><br><span class="line">, <span class="built_in">OutlineSettings</span>(InOutlineSettings)</span><br><span class="line">, <span class="built_in">SequenceWidth</span>(<span class="number">0</span>)</span><br><span class="line">, <span class="built_in">GlyphFontFaces</span>()</span><br><span class="line">, <span class="built_in">SourceIndicesToGlyphData</span>(InSourceTextRange)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> int32 NumGlyphsToRender = GlyphsToRender.<span class="built_in">Num</span>();</span><br><span class="line"><span class="keyword">for</span> (int32 CurrentGlyphIndex = <span class="number">0</span>; CurrentGlyphIndex &lt; NumGlyphsToRender; ++CurrentGlyphIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FShapedGlyphEntry&amp; CurrentGlyph = GlyphsToRender[CurrentGlyphIndex];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Track unique font faces</span></span><br><span class="line"><span class="keyword">if</span> (CurrentGlyph.FontFaceData-&gt;FontFace.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">GlyphFontFaces.<span class="built_in">AddUnique</span>(CurrentGlyph.FontFaceData-&gt;FontFace);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the measured width</span></span><br><span class="line">SequenceWidth += CurrentGlyph.XAdvance;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The <code>FShapedGlyphSequence</code> has a TArray of <code>FShapedGlyphEntry</code>. And the <code>FShapedGlyphEntry</code> has several properties such as <code>SourceIndex</code> and <code>XAdvance</code>. Looks like the <code>FShapedGlyphEntry</code> has properties responding each character in text, and the <code>FShapedGlyphSequence</code> has properties responding whole text. The properties are for how to render the text appropriately. So here, we can regard the term <code>Glyph</code> as one single character.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SlateTextShaper.cpp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSlateTextShaper::PerformKerningOnlyTextShaping</span><span class="params">(<span class="type">const</span> TCHAR* InText, <span class="type">const</span> int32 InTextStart, <span class="type">const</span> int32 InTextLen, <span class="type">const</span> FSlateFontInfo&amp; InFontInfo, <span class="type">const</span> <span class="type">float</span> InFontScale, TArray&lt;FShapedGlyphEntry&gt;&amp; OutGlyphsToRender)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (int32 SequenceCharIndex = <span class="number">0</span>; SequenceCharIndex &lt; KerningOnlyTextSequenceEntry.TextLength; ++SequenceCharIndex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> int32 CurrentCharIndex = KerningOnlyTextSequenceEntry.TextStartIndex + SequenceCharIndex;</span><br><span class="line"><span class="type">const</span> TCHAR CurrentChar = InText[CurrentCharIndex];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">InsertSubstituteGlyphs</span>(InText, CurrentCharIndex, ShapedGlyphFaceData, AdvanceCache, OutGlyphsToRender, LetterSpacingScaled))</span><br><span class="line">&#123;</span><br><span class="line">uint32 GlyphIndex = <span class="built_in">FT_Get_Char_Index</span>(KerningOnlyTextSequenceEntry.FaceAndMemory-&gt;<span class="built_in">GetFace</span>(), CurrentChar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the given font can&#x27;t render that character (as the fallback font may be missing), try again with the fallback character</span></span><br><span class="line"><span class="keyword">if</span> (CurrentChar != <span class="number">0</span> &amp;&amp; GlyphIndex == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">GlyphIndex = <span class="built_in">FT_Get_Char_Index</span>(KerningOnlyTextSequenceEntry.FaceAndMemory-&gt;<span class="built_in">GetFace</span>(), SlateFontRendererUtils::InvalidSubChar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int16 XAdvance = <span class="number">0</span>;</span><br><span class="line">&#123;</span><br><span class="line">FT_Fixed CachedAdvanceData = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (AdvanceCache-&gt;<span class="built_in">FindOrCache</span>(GlyphIndex, CachedAdvanceData))</span><br><span class="line">&#123;</span><br><span class="line">XAdvance = FreeTypeUtils::<span class="built_in">Convert26Dot6ToRoundedPixel</span>&lt;int16&gt;((CachedAdvanceData + (<span class="number">1</span>&lt;&lt;<span class="number">9</span>)) &gt;&gt; <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> int32 CurrentGlyphEntryIndex = OutGlyphsToRender.<span class="built_in">AddDefaulted</span>();</span><br><span class="line">FShapedGlyphEntry&amp; ShapedGlyphEntry = OutGlyphsToRender[CurrentGlyphEntryIndex];</span><br><span class="line">ShapedGlyphEntry.FontFaceData = ShapedGlyphFaceData;</span><br><span class="line">ShapedGlyphEntry.GlyphIndex = GlyphIndex;</span><br><span class="line">ShapedGlyphEntry.SourceIndex = CurrentCharIndex;</span><br><span class="line">ShapedGlyphEntry.XAdvance = XAdvance;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Usually, the <code>XAdvande</code> is determined at <code>FSlateTextShaper::PerformKerningOnlyTextShaping()</code>. Engine uses <a href="https://gitlab.freedesktop.org/freetype/freetype">the FreeType library</a> for getting a estimated size of character when it rendered. The <code>GlyphIndex</code> is calculated based on font and character value.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FFreeTypeAdvanceCache::FindOrCache</span><span class="params">(<span class="type">const</span> uint32 InGlyphIndex, FT_Fixed&amp; OutCachedAdvance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Try and find the advance from the cache...</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FT_Fixed* FoundCachedAdvance = AdvanceMap.<span class="built_in">Find</span>(InGlyphIndex);</span><br><span class="line"><span class="keyword">if</span> (FoundCachedAdvance)</span><br><span class="line">&#123;</span><br><span class="line">OutCachedAdvance = *FoundCachedAdvance;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FreeTypeUtils::<span class="built_in">ApplySizeAndScale</span>(Face, FontSize, FontScale);</span><br><span class="line"></span><br><span class="line"><span class="comment">// No cached data, go ahead and add an entry for it...</span></span><br><span class="line"><span class="type">const</span> FT_Error Error = <span class="built_in">FT_Get_Advance</span>(Face, InGlyphIndex, LoadFlags, &amp;OutCachedAdvance);</span><br><span class="line"><span class="keyword">if</span> (Error == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">FT_IS_SCALABLE</span>(Face) &amp;&amp; <span class="built_in">FT_HAS_FIXED_SIZES</span>(Face))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Fixed size fonts don&#x27;t support scaling, but we calculated the scale to use for the glyph in ApplySizeAndScale</span></span><br><span class="line">OutCachedAdvance = <span class="built_in">FT_MulFix</span>(OutCachedAdvance, ((LoadFlags &amp; FT_LOAD_VERTICAL_LAYOUT) ? Face-&gt;size-&gt;metrics.y_scale : Face-&gt;size-&gt;metrics.x_scale));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AdvanceMap.<span class="built_in">Add</span>(InGlyphIndex, OutCachedAdvance);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code <code>AdvanceCache-&gt;FindOrCache(GlyphIndex, CachedAdvanceData)</code> finds at cache, but it creates new one and cache it if could not find. The <code>FT_Get_Advance()</code> returns the result with parameter <code>&amp;OutCachedAdvance</code>. We can get a size of single character through the function because the value <code>GlyphIndex</code> includes information of font and character value.</p><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/05.png" class=""><p>In our test text <code>Text Block Test</code>, the result is like below:</p><table><thead><tr><th>Index</th><th>Character</th><th>GlyphIndex</th><th>XAdvance</th></tr></thead><tbody><tr><td>0</td><td><code>T</code></td><td>55</td><td>18</td></tr><tr><td>1</td><td><code>e</code></td><td>72</td><td>17</td></tr><tr><td>2</td><td><code>x</code></td><td>91</td><td>16</td></tr><tr><td>3</td><td><code>t</code></td><td>87</td><td>11</td></tr><tr><td>4</td><td><code> </code></td><td>3</td><td>8</td></tr><tr><td>5</td><td><code>B</code></td><td>37</td><td>20</td></tr><tr><td>6</td><td><code>l</code></td><td>79</td><td>9</td></tr><tr><td>7</td><td><code>o</code></td><td>82</td><td>18</td></tr><tr><td>8</td><td><code>c</code></td><td>70</td><td>17</td></tr><tr><td>9</td><td><code>k</code></td><td>78</td><td>17</td></tr><tr><td>10</td><td><code> </code></td><td>3</td><td>8</td></tr><tr><td>11</td><td><code>T</code></td><td>55</td><td>18</td></tr><tr><td>12</td><td><code>e</code></td><td>72</td><td>17</td></tr><tr><td>13</td><td><code>s</code></td><td>86</td><td>17</td></tr><tr><td>14</td><td><code>t</code></td><td>87</td><td>11</td></tr></tbody></table><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/07.png" class=""><p>You can see that the same character has the same XAdvance value. For example, The character <code>T</code> has <code>55</code> of GlyphIndex and <code>18</code> of XAdvance. Go back to the <code>ShapedTextCacheUtil::MeasureShapedText()</code>, that is why the <code>MeasuredWidth</code> has a value of <code>220 ≒ 222 = 18 + 17 + ... + 17 + 11</code>. The difference <code>2</code> occurs by the kerning.</p><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/06.png" class=""><p>The final width may differ a little bit because some combination of characters need a kerning. For example, though <code>e</code> and <code>k</code> have the same XAdvance value <code>17</code>, a combination <code>Te</code> has a small size than a combination <code>Tk</code>. Because in the combination <code>Te</code>, <code>e</code> can stick to <code>T</code> closer than <code>k</code> in <code>Tk</code>. In other words, a character <code>T</code> can have XAdvance of <code>17</code> in the combinations such as <code>Ta/Tc/Td</code>, and so on. Otherwise such as <code>Tb/Tf/Th</code>, it can have XAdvance of <code>18</code>.</p><h1 id="Break-lines-3-3-Creating-lines-with-wrapping"><a href="#Break-lines-3-3-Creating-lines-with-wrapping" class="headerlink" title="Break lines (3/3); Creating lines with wrapping"></a><em><code>Break lines (3/3); Creating lines with wrapping</code></em></h1><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/08.png" class=""><p>Go back to the <code>FTextLayout::CreateLineWrappingCache()</code>, now we can wrap text according to size (exactly, width) of each slice. All slices are stored at the container <code>BreakCandidates</code>. In our test text <code>Text Block Test</code>, the result is like below:</p><table><thead><tr><th>BreakCandidates</th><th>ActualRange</th><th>TrimmedRange</th></tr></thead><tbody><tr><td>0</td><td><code>Text </code> [0, 5)</td><td><code>Text</code> [0, 4)</td></tr><tr><td>1</td><td><code>Block </code> [5, 11)</td><td><code>Block</code> [5, 10)</td></tr><tr><td>2</td><td><code>Test</code> [11, 15)</td><td><code>Test</code> [11, 15)</td></tr></tbody></table><p>※ <code>[0, 5)</code> is equal to <code>[0, 4]</code></p><p>Do you remember there is a code calls <code>FTextLayout::FlowLineLayout()</code> in <code>FTextLayout::FlowLayout()</code> ?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::FlowLineLayout</span><span class="params">(<span class="type">const</span> int32 LineModelIndex, <span class="type">const</span> <span class="type">float</span> WrappingDrawWidth, TArray&lt;TSharedRef&lt;ILayoutBlock&gt;&gt;&amp; SoftLine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="type">float</span> CurrentWidth = <span class="number">0.0f</span>;</span><br><span class="line"><span class="keyword">for</span> (int32 BreakIndex = <span class="number">0</span>; BreakIndex &lt; LineModel.BreakCandidates.<span class="built_in">Num</span>(); BreakIndex++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FBreakCandidate&amp; Break = LineModel.BreakCandidates[ BreakIndex ];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsLastBreak = BreakIndex + <span class="number">1</span> == LineModel.BreakCandidates.<span class="built_in">Num</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsFirstBreakOnSoftLine = CurrentWidth == <span class="number">0.0f</span>;</span><br><span class="line"><span class="type">const</span> int8 Kerning = ( IsFirstBreakOnSoftLine ) ? Break.Kerning : <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> BreakDoesFit = CurrentWidth + Break.ActualSize.X + Kerning &lt;= WrappingDrawWidth;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> BreakWithoutTrailingWhitespaceDoesFit = CurrentWidth + Break.TrimmedWidth + Kerning &lt;= WrappingDrawWidth;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here, we accumulate a width of each BreakCandidate on <code>CurrentWidth</code>. And wrapping text occurs whenever <code>CurrentWidth</code> almost reaches to <code>WrappingDrawWidth</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( !BreakDoesFit || IsLastBreak )</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">bool</span> IsFirstBreak = BreakIndex == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> FBreakCandidate&amp; FinalBreakOnSoftLine = ( !IsFirstBreak &amp;&amp; !IsFirstBreakOnSoftLine &amp;&amp; !BreakWithoutTrailingWhitespaceDoesFit ) ? LineModel.BreakCandidates[ --BreakIndex ] : Break;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We want the wrapped line width to contain the first piece of trailing whitespace for a line, however we only do this if we have trailing whitespace</span></span><br><span class="line"><span class="comment">// otherwise very long non-breaking words can cause the wrapped line width to expand beyond the desired wrap width</span></span><br><span class="line"><span class="type">float</span> WrappedLineWidth = CurrentWidth;</span><br><span class="line"><span class="keyword">if</span> ( BreakWithoutTrailingWhitespaceDoesFit )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This break has trailing whitespace</span></span><br><span class="line">WrappedLineWidth += ( FinalBreakOnSoftLine.TrimmedWidth + FinalBreakOnSoftLine.FirstTrailingWhitespaceCharWidth );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This break is longer than the wrapping point, so make sure and clamp the line size to the given wrapping width</span></span><br><span class="line">WrappedLineWidth += FinalBreakOnSoftLine.ActualSize.X;</span><br><span class="line">WrappedLineWidth = FMath::<span class="built_in">Min</span>(WrappedLineWidth, WrappingDrawWidth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// We want wrapped lines to ignore any trailing whitespace when justifying</span></span><br><span class="line"><span class="comment">// If FinalBreakOnSoftLine isn&#x27;t the current Break, then the size of FinalBreakOnSoftLine (including its trailing whitespace) will have already</span></span><br><span class="line"><span class="comment">// been added to CurrentWidth, so we need to remove that again before adding the trimmed width (which is the width we should justify with)</span></span><br><span class="line"><span class="comment">// We should not attempt to adjust the last break on a soft-line as that might have explicit trailing whitespace</span></span><br><span class="line">TOptional&lt;<span class="type">float</span>&gt; JustifiedLineWidth;</span><br><span class="line"><span class="keyword">if</span> ( &amp;FinalBreakOnSoftLine != &amp;LineModel.BreakCandidates.<span class="built_in">Last</span>() )</span><br><span class="line">&#123;</span><br><span class="line">JustifiedLineWidth = CurrentWidth - (&amp;FinalBreakOnSoftLine == &amp;Break ? <span class="number">0.0f</span> : FinalBreakOnSoftLine.ActualSize.X) + FinalBreakOnSoftLine.TrimmedWidth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CreateLineViewBlocks</span>( LineModelIndex, FinalBreakOnSoftLine.ActualRange.EndIndex, WrappedLineWidth, JustifiedLineWidth, <span class="comment">/*OUT*/</span>CurrentRunIndex, <span class="comment">/*OUT*/</span>CurrentRendererIndex, <span class="comment">/*OUT*/</span>PreviousBlockEnd, SoftLine );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( CurrentRunIndex &lt; LineModel.Runs.<span class="built_in">Num</span>() &amp;&amp; FinalBreakOnSoftLine.ActualRange.EndIndex == LineModel.Runs[ CurrentRunIndex ].<span class="built_in">GetTextRange</span>().EndIndex )</span><br><span class="line">&#123;</span><br><span class="line">++CurrentRunIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PreviousBlockEnd = FinalBreakOnSoftLine.ActualRange.EndIndex;</span><br><span class="line"></span><br><span class="line">CurrentWidth = <span class="number">0.0f</span>;</span><br><span class="line">SoftLine.<span class="built_in">Reset</span>();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>Usually, when wrapping text needed, the codes above would be executed. <code>FinalBreakOnSoftLine</code> indicates the BreakCandidate that needs a new line after itself. In our test text <code>Text Block Test</code>, <code>Text </code> could be assigned.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FTextLayout::CreateLineViewBlocks</span><span class="params">( int32 LineModelIndex, <span class="type">const</span> int32 StopIndex, <span class="type">const</span> <span class="type">float</span> WrappedLineWidth, <span class="type">const</span> TOptional&lt;<span class="type">float</span>&gt;&amp; JustificationWidth, int32&amp; OutRunIndex, int32&amp; OutRendererIndex, int32&amp; OutPreviousBlockEnd, TArray&lt; TSharedRef&lt; ILayoutBlock &gt; &gt;&amp; OutSoftLine )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Add the new block</span></span><br><span class="line">&#123;</span><br><span class="line">FBlockDefinition BlockDefine;</span><br><span class="line">BlockDefine.ActualRange = <span class="built_in">FTextRange</span>(BlockBeginIndex, BlockStopIndex);</span><br><span class="line">BlockDefine.Renderer = BlockRenderer;</span><br><span class="line"></span><br><span class="line">OutSoftLine.<span class="built_in">Add</span>( Run.<span class="built_in">CreateBlock</span>( BlockDefine, Scale, <span class="built_in">FLayoutBlockTextContext</span>(RunTextContext, BlockTextDirection) ) );</span><br><span class="line">OutPreviousBlockEnd = BlockStopIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the soft line bounds based on this new block (needed within this loop due to bi-directional text, as the extents of the line array are not always the start and end of the range)</span></span><br><span class="line"><span class="type">const</span> FTextRange&amp; BlockRange = OutSoftLine.<span class="built_in">Last</span>()-&gt;<span class="built_in">GetTextRange</span>();</span><br><span class="line">SoftLineRange.BeginIndex = FMath::<span class="built_in">Min</span>(SoftLineRange.BeginIndex, BlockRange.BeginIndex);</span><br><span class="line">SoftLineRange.EndIndex   = FMath::<span class="built_in">Max</span>(SoftLineRange.EndIndex, BlockRange.EndIndex);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">FTextLayout::FLineView LineView;</span><br><span class="line">LineView.Offset = CurrentOffset;</span><br><span class="line">LineView.Size = LineSize;</span><br><span class="line">LineView.TextHeight = UnscaleLineHeight;</span><br><span class="line">LineView.JustificationWidth = JustificationWidth.<span class="built_in">Get</span>(LineView.Size.X);</span><br><span class="line">LineView.Range = SoftLineRange;</span><br><span class="line">LineView.TextBaseDirection = LineModel.TextBaseDirection;</span><br><span class="line">LineView.ModelIndex = LineModelIndex;</span><br><span class="line">LineView.Blocks.<span class="built_in">Append</span>( OutSoftLine );</span><br><span class="line"></span><br><span class="line">LineViews.<span class="built_in">Add</span>( LineView );</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The function <code>FTextLayout::CreateLineViewBlocks()</code> creates new <code>FTextLayout::FLineView</code> and adds it into initialized <code>LineViews</code>. We already cleared the <code>LineViews</code> at the function <code>FTextLayout::ClearView()</code>. In our test txt, after all process, the <code>LineViews</code> will have the value like below:</p><table><thead><tr><th>LineViews</th><th>Range</th></tr></thead><tbody><tr><td>0</td><td>[0, 5)</td></tr><tr><td>1</td><td>[5, 11)</td></tr><tr><td>2</td><td>[11, 15)</td></tr></tbody></table><img src="/2022/03/22/how-the-text-wrap-works-in-unrealengine/09.png" class=""><p>Finally, we found that the result of wrapping text. All of prerequisites are for splitting a text. Now we understand how the text can be wrapped in UnrealEngine.</p><h1 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a><em><code>Wrap-up</code></em></h1><p>Text wrapping in UnrealEngine can be divided into 3 major steps.</p><ol><li><p><code>Separating a text into slices</code><br>Find where each word ends using ICU library.<br>Separate text into slices based on the indices.</p></li><li><p><code>Measuring size of each slice</code><br>Estimate size of rendered character using FreeType library.<br>Apply several modifications such as kerning, shadow, and so on.</p></li><li><p><code>Creating lines with wrapping</code><br>Add width until it reaches the wrapping width.<br>When it reaches, create new line.</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;branch: 5.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
    <category term="TextBlock" scheme="https://baemincheon.github.io/tags/TextBlock/"/>
    
    <category term="TextWrap" scheme="https://baemincheon.github.io/tags/TextWrap/"/>
    
  </entry>
  
  <entry>
    <title>How to rename your project in UnrealEngine</title>
    <link href="https://baemincheon.github.io/2022/02/22/how-to-rename-your-project-in-unrealengine/"/>
    <id>https://baemincheon.github.io/2022/02/22/how-to-rename-your-project-in-unrealengine/</id>
    <published>2022-02-22T13:36:08.000Z</published>
    <updated>2022-02-22T13:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>branch: 5.0</code></td></tr><tr><td>Visual Studio 2022</td><td><code>version: 17.0.4</code></td></tr><tr><td>Windows 11 Pro</td><td><code>build: 22000.493</code></td></tr></tbody></table><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><p>Sometimes, you might need to rename your project in some reasons.</p><ul><li>Just you may be bored with that name.</li><li>To unify the name same with your team name.</li><li>Due to change on design of game…etc.</li></ul><p>Unfortunately, in those situations, UnrealEngine does not provide any feature to rename your project.<br>So, in this post, we gonna find out how to rename your project manually.</p><h1 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a><em><code>Prerequisites</code></em></h1><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/01.png" class=""><p>Suppose we have a project created from template <code>Third Person</code> with options above.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[ProjectRoot]/Source/SomeProjectA/SomeProjectACharacter.<span class="function">h</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">UCLASS</span><span class="params">(config=Game)</span></span></span><br><span class="line"><span class="function"><span class="keyword">class</span> ASomeProjectACharacter : public ACharacter</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Camera boom positioning the camera behind the character */</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>(VisibleAnywhere, BlueprintReadOnly, Category = Camera, meta = (AllowPrivateAccess = <span class="string">&quot;true&quot;</span>))</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">USpringArmComponent</span>* CameraBoom;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** Returns CameraBoom subobject **/</span></span><br><span class="line">    <span class="function">FORCEINLINE <span class="keyword">class</span> USpringArmComponent* <span class="title">GetCameraBoom</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> CameraBoom; &#125;</span><br><span class="line">    <span class="comment">/** Returns FollowCamera subobject **/</span></span><br><span class="line">    <span class="function">FORCEINLINE <span class="keyword">class</span> UCameraComponent* <span class="title">GetFollowCamera</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> FollowCamera; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UFUCTION</span>(BlueprintPure)</span><br><span class="line">    <span class="function"><span class="type">const</span> FString <span class="title">GetSomeString</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;SomeString&quot;</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>After the project created, make a simple function <code>GetSomeString()</code> in the character class, which returns some string. We will try to migrate the function for example later in this post. Now, build editor with the combo <code>Development Editor + Win64</code> and run it.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/02.png" class=""><p>You can find a character blueprint created from template in the <code>Content/ThirdPersonCPP/Blueprints/ThirdPersonCharacter</code>. Furthermore, the blueprint has a parent class as the cpp class <code>SomeProjectACharacter</code>. It means that the blueprint can use the function we have just made.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/03.png" class=""><p>I think it would be proper to print that string when character spawned. Make some blueprint nodes for printing that string. Now, compile and save it.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/04.png" class=""><p>Check it works out. You should be able to see that string <code>SomeString</code> through the screen. Great.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.../SomeProjectA&gt; git log</span><br><span class="line">commit 32688a379adc5fad30ae7ba9765816684c62d05e (HEAD -&gt; master)</span><br><span class="line">Author: MinCheon Bae &lt;baemincheon@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line">.../SomeProjectA&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>I setup the project directory as git repository to clarify what is changed. You do not have to follow this, it is optional. But, you should prepare a gitignore fits in UnrealEngine if you want to follow this. (For example, <a href="https://github.com/github/gitignore/blob/main/UnrealEngine.gitignore">https://github.com/github/gitignore/blob/main/UnrealEngine.gitignore</a>)</p><p>We are all prepared, and let us change the name of project from <code>SomeProjectA</code> into <code>OtherProjectB</code>.</p><h1 id="Step-1-Clean-up"><a href="#Step-1-Clean-up" class="headerlink" title="Step #1; Clean-up"></a><em><code>Step #1; Clean-up</code></em></h1><p>First of all, we should remove some files. Some files and folders are generated by other files, so we do not have to care about that files would be generated later. Thus, we would better remove those files or folders listed below:</p><ul><li><code>.vs/</code></li><li><code>Binaries/</code></li><li><code>DerivedDataCache/</code></li><li><code>Intermediate/</code></li><li><code>Saved/</code></li><li><code>[ProjectName].sln</code></li></ul><p>You can check if the files or folders are generated. Remove them and generate VisualStudio project files. Then, files and folders related to VisualStudio would be generated. And you can build your project from VisualStudio project. After all, you will see the files and folders listed above are restored.</p><p>Plus, that is why gitignore for UnrealEngine contains those files or folders. We do not need them to be version-controlled.</p><h1 id="Step-2-Change-contents-of-files"><a href="#Step-2-Change-contents-of-files" class="headerlink" title="Step #2; Change contents of files"></a><em><code>Step #2; Change contents of files</code></em></h1><p>Now it is time to rename the project. There are some files usually contain the name of project in its contents. Therefore, we should change that part of contents. In this goal, we will manipulate the files like…</p><ul><li>all of files in <code>Config/</code><ul><li><code>.ini</code> files such as <code>DefaultEngine.ini</code></li></ul></li><li>all of files in <code>Source/</code></li><li><code>[ProjectName].uproject</code></li></ul><p>Maybe there some files contain the name of project in the folder <code>Content/</code>. Such as an absolute path of media file, and a blueprint class inherites a cpp class whose name contains the name of project. However, basically the files in <code>Content/</code> are binary type. So, manipulating its contents as text might not ensure a result we expect. In worst case, the manipulation could break some references between blueprints. That is why we handle only the files of text type in this step.</p><p>By the way, I recommend you to use <a href="https://notepad-plus-plus.org/">notepad++</a> when manipulating multiple text files, and I will use that in this post. It is open source and provides powerful features. The tool supports Windows and you can install it for ease. You do not have to install it, but I will show an example based on the tool.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/05.png" class=""><p>Open the notepad++ and drag your project folder from file explorer into notepad++. Now notepad++ would show the folder as list view at the left sidebar.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/06.png" class=""><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/07.png" class=""><p>Right click on <code>Config/</code> and select <code>Find in Files...</code>. Then, a dialog for search would appear.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/08.png" class=""><p>Click the tab <code>Find in Files</code> and type <code>SomeProjectA</code> and <code>OtherProjectB</code> respectively at <code>Find what</code> and <code>Replace with</code>. After that, click <code>Replace in Files</code>.</p><p>Repeat the steps on <code>Source/</code> folder.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/09.png" class=""><p>Open the <code>.uproject</code> file and Replace in similar manner.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.../SomeProjectA&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   Config/DefaultEngine.ini</span><br><span class="line">        modified:   SomeProjectA.uproject</span><br><span class="line">        modified:   Source/SomeProjectA.Target.cs</span><br><span class="line">        modified:   Source/SomeProjectA/SomeProjectA.Build.cs</span><br><span class="line">        modified:   Source/SomeProjectA/SomeProjectA.cpp</span><br><span class="line">        modified:   Source/SomeProjectA/SomeProjectACharacter.cpp</span><br><span class="line">        modified:   Source/SomeProjectA/SomeProjectACharacter.h</span><br><span class="line">        modified:   Source/SomeProjectA/SomeProjectAGameMode.cpp</span><br><span class="line">        modified:   Source/SomeProjectA/SomeProjectAGameMode.h</span><br><span class="line">        modified:   Source/SomeProjectAEditor.Target.cs</span><br></pre></td></tr></table></figure><p>We can see some files changed. Now the contents of file get ready.</p><h1 id="Step-3-Change-name-of-files"><a href="#Step-3-Change-name-of-files" class="headerlink" title="Step #3; Change name of files"></a><em><code>Step #3; Change name of files</code></em></h1><p>We have changed the contents of files. Next, let us change the name of files. This also works whole project without <code>Content/</code> folder with the same reason I mentioned.</p><p>Open a powershell prompt and type the command like below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%ProjectRoot% &gt; Get-ChildItem -Recurse -Path Config/* | Rename-Item -NewName &#123; $_.Name.replace(&quot;SomeProjectA&quot;,&quot;OtherProjectB&quot;) &#125;</span><br></pre></td></tr></table></figure><p>This will change the name of all files in <code>Config/</code> folder.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%ProjectRoot% &gt; Get-ChildItem -Recurse -Path Source/* | Rename-Item -NewName &#123; $_.Name.replace(&quot;SomeProjectA&quot;,&quot;OtherProjectB&quot;) &#125;</span><br></pre></td></tr></table></figure><p>Apply this on <code>Source/</code> folder, too. After that, change the name of <code>.uproject</code> file and <code>[ProjectRoot]</code> folder manually.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.../OtherProjectB&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   Config/DefaultEngine.ini</span><br><span class="line">        deleted:    SomeProjectA.uproject</span><br><span class="line">        deleted:    Source/SomeProjectA.Target.cs</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectA.Build.cs</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectA.cpp</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectA.h</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectACharacter.cpp</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectACharacter.h</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectAGameMode.cpp</span><br><span class="line">        deleted:    Source/SomeProjectA/SomeProjectAGameMode.h</span><br><span class="line">        deleted:    Source/SomeProjectAEditor.Target.cs</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        OtherProjectB.uproject</span><br><span class="line">        Source/OtherProjectB.Target.cs</span><br><span class="line">        Source/OtherProjectB/</span><br><span class="line">        Source/OtherProjectBEditor.Target.cs</span><br></pre></td></tr></table></figure><p>Check the result with <code>git status</code> again.</p><h1 id="Step-4-Redirect-blueprints"><a href="#Step-4-Redirect-blueprints" class="headerlink" title="Step #4; Redirect blueprints"></a><em><code>Step #4; Redirect blueprints</code></em></h1><p>Generating VisualStudio project files okay. Building editor on VisualStudio project okay. But, there is one last task to do.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/10.png" class=""><p>We skipped blueprint files in previous steps. But, some blueprint assets could try to use old cpp classes or codes. Therefore, you will see the dialog while opening the editor. The CDO has been broken.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/11.png" class=""><p>Some of blueprint classes lost their parent cpp class or get broken. Especially, the blueprint class <code>ThirdPersonCharacter</code> was disconnected with its parent, old cpp class <code>SomeProjectACharacter</code>.  We need to fix it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// DefaultEngine.ini</span><br><span class="line"></span><br><span class="line">[/Script/Engine.Engine]</span><br><span class="line">+ActiveGameNameRedirects=(OldGameName=&quot;SomeProjectA&quot;,NewGameName=&quot;/Script/OtherProjectB&quot;)</span><br><span class="line">+ActiveGameNameRedirects=(OldGameName=&quot;/Script/SomeProjectA&quot;,NewGameName=&quot;/Script/OtherProjectB&quot;)</span><br><span class="line">+ActiveClassRedirects=(OldClassName=&quot;SomeProjectAGameMode&quot;,NewClassName=&quot;OtherProjectBGameMode&quot;)</span><br><span class="line">+ActiveClassRedirects=(OldClassName=&quot;SomeProjectACharacter&quot;,NewClassName=&quot;OtherProjectBCharacter&quot;)</span><br></pre></td></tr></table></figure><p>Fortunately, UnrealEngine provides redirecting blueprint classes. You can set the redirection settings in <code>DefaultEngine.ini</code>. I have set the settings like above, and engine will redirect <code>SomeProjectA</code> things into <code>OtherProjectB</code> things. You should create more settings if you need. Because the example settings are from template and your project may have more classes whose CDO broken.</p><p>After setting up the redirection, remove <code>Binaries/</code> + <code>DerivedDataCache/</code> + <code>Saved/</code> folders. And repeat build the editor.</p><img src="/2022/02/22/how-to-rename-your-project-in-unrealengine/12.png" class=""><p>Finally we meet again ! The string <code>SomeString</code> was the text we prepared. We have done renaming a project and restoring whole project.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;branch: 5.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
  </entry>
  
  <entry>
    <title>How to create or remove CPP class in UnrealEngine</title>
    <link href="https://baemincheon.github.io/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/"/>
    <id>https://baemincheon.github.io/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/</id>
    <published>2022-01-11T13:08:04.000Z</published>
    <updated>2022-01-11T13:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>branch: 5.0</code></td></tr><tr><td>Visual Studio 2022</td><td><code>version: 17.0.4</code></td></tr><tr><td>Windows 11 Pro</td><td><code>build: 22000.376</code></td></tr></tbody></table><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><p>Developing your UnrealEngine project with only the blueprint is not easy because the blueprint has some limitations on functionalities than the native, CPP. For instance, in blueprint you can access the source code tagged by <code>BlueprintCallable</code>, <code>BlueprintType</code>, <code>BlueprintReadOnly</code>, or those series. But, in CPP you can access all of the source code as possible and even you can modify the source code of engine. In other words, using only blueprint is like using a part of UnrealEngine. So eventually, you would want to create CPP class for more functionalities. This post covers that topic; how to create CPP class in UnrealEngine.</p><p>Plus, not only creating something but removing something is important. I will tell you how to remove CPP class in UnrealEngine, too. Let us create a project from ThirdPerson template with the options below. I named it as <code>Unreal_5_0</code>. </p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/01.png" class=""><h1 id="Creating-CPP-class-method-1"><a href="#Creating-CPP-class-method-1" class="headerlink" title="Creating CPP class; method #1"></a><em><code>Creating CPP class; method #1</code></em></h1><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/02.png" class=""><p>Open the <code>Content Drawer</code> and click <code>All/C++ Classes</code> folder. After the steps, you can see the option <code>New C++ Class...</code> when you click the <code>Add</code> button. Click it.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/03.png" class=""><p>In this dialog, you can select a parent of new CPP class. <code>Common Classes</code> tab contains the most commonly used classes, so you should switch to <code>All Classes</code> tab and find an appropriate class if needed.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/04.png" class=""><p>I chose the class <code>UserWidget</code> as a parent of new CPP class. Click the button <code>Next&gt;</code>.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/05.png" class=""><p>In this dialog, you can name the new CPP class and save it with some options. I will left the name as default, <code>My[ParentClassName]</code>. The combobox beside name is for selecting a module to include this class. Our project created from ThirdPerson template starts with only one module whose name is the same with project, in this case <code>Unreal_5_0</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GameProjectUtils.h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Where is this class located within the Source folder? */</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">EClassLocation</span> : uint8</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** The class is going to a user defined location (outside of the Public, Private, or Classes) folder for this module */</span></span><br><span class="line">    UserDefined,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The class is going to the Public folder for this module */</span></span><br><span class="line">    Public,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The class is going to the Private folder for this module */</span></span><br><span class="line">    Private,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The class is going to the Classes folder for this module */</span></span><br><span class="line">    Classes,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The radio button <code>Class Type</code> is for selecting a location of new CPP class. The enum value is <code>UserDefined</code> in default, but it would be forced to <code>Public</code> or <code>Private</code> when you select one of the radio buttons.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SNewClassDialog.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SNewClassDialog::OnClassLocationChanged</span><span class="params">(GameProjectUtils::EClassLocation InLocation)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> FString AbsoluteClassPath = FPaths::<span class="built_in">ConvertRelativePathToFull</span>(NewClassPath) / <span class="string">&quot;&quot;</span>; <span class="comment">// Ensure trailing /</span></span><br><span class="line"></span><br><span class="line">GameProjectUtils::EClassLocation TmpClassLocation = GameProjectUtils::EClassLocation::UserDefined;</span><br><span class="line">GameProjectUtils::<span class="built_in">GetClassLocation</span>(AbsoluteClassPath, *SelectedModuleInfo, TmpClassLocation);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> FString RootPath = SelectedModuleInfo-&gt;ModuleSourcePath;</span><br><span class="line"><span class="type">const</span> FString PublicPath = RootPath / <span class="string">&quot;Public&quot;</span> / <span class="string">&quot;&quot;</span>;<span class="comment">// Ensure trailing /</span></span><br><span class="line"><span class="type">const</span> FString PrivatePath = RootPath / <span class="string">&quot;Private&quot;</span> / <span class="string">&quot;&quot;</span>;<span class="comment">// Ensure trailing /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the class path to be rooted to the Public or Private folder based on InVisibility</span></span><br><span class="line"><span class="keyword">switch</span> (InLocation)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> GameProjectUtils::EClassLocation::Public:</span><br><span class="line"><span class="keyword">if</span> (AbsoluteClassPath.<span class="built_in">StartsWith</span>(PrivatePath))</span><br><span class="line">&#123;</span><br><span class="line">NewClassPath = AbsoluteClassPath.<span class="built_in">Replace</span>(*PrivatePath, *PublicPath);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (AbsoluteClassPath.<span class="built_in">StartsWith</span>(RootPath))</span><br><span class="line">&#123;</span><br><span class="line">NewClassPath = AbsoluteClassPath.<span class="built_in">Replace</span>(*RootPath, *PublicPath);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">NewClassPath = PublicPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> GameProjectUtils::EClassLocation::Private:</span><br><span class="line"><span class="keyword">if</span> (AbsoluteClassPath.<span class="built_in">StartsWith</span>(PublicPath))</span><br><span class="line">&#123;</span><br><span class="line">NewClassPath = AbsoluteClassPath.<span class="built_in">Replace</span>(*PublicPath, *PrivatePath);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (AbsoluteClassPath.<span class="built_in">StartsWith</span>(RootPath))</span><br><span class="line">&#123;</span><br><span class="line">NewClassPath = AbsoluteClassPath.<span class="built_in">Replace</span>(*RootPath, *PrivatePath);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">NewClassPath = PrivatePath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will update ClassVisibility correctly</span></span><br><span class="line"><span class="built_in">UpdateInputValidity</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With these codes, the radio buttons just change the location of new CPP class. The new CPP class would be included in <code>Public</code> folder when you clicked a radio button <code>Public</code>, vice versa. This setting makes some differences especially onto accessibility.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GameProjectUtils.cpp</span></span><br><span class="line"><span class="comment">// GameProjectUtils::GenerateClassHeaderFile()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">GetClassLocation</span>(NewHeaderFileName, ModuleInfo, ClassPathLocation) )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// If this class isn&#x27;t Private, make sure and include the API macro so it can be linked within other modules</span></span><br><span class="line">    <span class="keyword">if</span> ( ClassPathLocation != EClassLocation::Private )</span><br><span class="line">    &#123;</span><br><span class="line">        ModuleAPIMacro = ModuleInfo.ModuleName.<span class="built_in">ToUpper</span>() + <span class="string">&quot;_API &quot;</span>; <span class="comment">// include a trailing space for the template formatting</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definitions.Unreal_5_0.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNREAL_5_0_API DLLEXPORT</span></span><br></pre></td></tr></table></figure><p>Only the class of location for <code>Private</code> cannot have the macro <code>[ModuleName]_API</code>. And the macro is defined as <code>DLLEXPORT</code>. The attribute is used to export codes in MSVC, visit <a href="https://docs.microsoft.com/en-us/cpp/cpp/dllexport-dllimport?view=msvc-170">here</a> for more details.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyUserWidget.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyUserWidget.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UNREAL_5_0_API</span> UMyUserWidget : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Of course, my new CPP class <code>MyUserWidget</code> has the macro <code>[ModuleName]_API</code> because I had not chosen any radio button. It was left as <code>UserDefined</code> and <code>UserDefined</code> is usually treated like <code>Public</code>. Then, the new CPP class would not have the macro if you clicked <code>Private</code> at the dialog.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/06.png" class=""><p>Click <code>Create Class</code>. Engine will create intermediate files, generate project files, and build source codes.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/08.png" class=""><p>After that, the new CPP class is ready for you.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/17.png" class=""><p>FYI, remove <code>[ProjectRoot]/Binaries</code> folder and build again if you meet a dialog like above while opening the editor.</p><h1 id="Creating-CPP-class-method-2"><a href="#Creating-CPP-class-method-2" class="headerlink" title="Creating CPP class; method #2"></a><em><code>Creating CPP class; method #2</code></em></h1><p>At the method #1, you must wait for a moment while engine does a process; creating intermediate files, generating project files, and build source codes. The process of creating new CPP class is not expensive when your project is small enough, but every project gets bigger and bigger as time goes on. When it comes to the point, you would want create multiple new CPP classes and wait for only one moment. At that time, the method #2 will be able to save you.</p><p>The method #2 for creating new CPP class is quite simple; do it yourself what engine did for you. Let me explain step by step. Suppose you want to create new CPP class inherits <code>UserWidget</code> class.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/09.png" class=""><p>Open your VisualStudio project. Find an location to add your new CPP class at <code>Solution Explorer</code>. I will add a class at <code>Unreal_5_0</code> folder. Select <code>Add/New Item....</code> at the option.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/10.png" class=""><p>Select <code>Header File</code> and name the file. I will name the file as <code>SomeUserWidget.h</code>. And click the button <code>Browse...</code> to locate the file. I will locate the file as the same location in <code>Solution Explorer</code>, <code>[ProjectRoot]/Source/Unreal_5_0</code>.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/11.png" class=""><p>After click the button <code>Add</code>, you can find the new file at both file explorer and <code>Solution Explorer</code> in VisualStudio IDE. Repeat previous steps for creating a cpp file.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/12.png" class=""><p>Then you have two files for creating new CPP class.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/13.png" class=""><p>But they have no contents, in other words, empty. So what ? Let us fill the contents manually. The cpp file is very simple as it has only an include statement, <code>#include &quot;[HeaderName]&quot;</code>. Problem is the header file. Usually, a generated header file from a class inherits <code>UObject</code> (or child of <code>UObject</code>) has a format like below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright notice</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;[ParentClassHeaderFile]&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;[ThisClass].generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Comment for documentation</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="built_in">class</span> ([ModuleName]_API) U[ThisClass] : <span class="keyword">public</span> U[ParentClass]</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>For instance, we had created a class <code>MyUserWidget</code>. The header file <code>MyUserWidget.h</code> has the contents like below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Blueprint/UserWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyUserWidget.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UNREAL_5_0_API</span> UMyUserWidget : <span class="keyword">public</span> UUserWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>FYI, the part <code>[ModuleName]_API</code> is optional as I explained at the method #1.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/14.png" class=""><p>Then, we can write down some codes for <code>SomeUserWidget</code>. They look like above. Alright, now we should generate intermediate files and project files. And then build the source codes.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/15.png" class=""><p>For this, close your VisualStudio IDE. Right click the uproject file and select <code>Generate Visual Studio project files</code>.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/16.png" class=""><p>Open your VisualStudio project after generation ends. And build the editor. The engine will generate intermediate files such as <code>generated.h</code> and <code>gen.cpp</code>. For more details about generating intermediate files, visit <a href="https://baemincheon.github.io/2021/08/06/how-unreal-macro-generated/">this post</a>.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/18.png" class=""><p>Now build ended. Let us open the editor. We can see new class <code>SomeUserWidget</code> well.</p><h1 id="Removing-CPP-class"><a href="#Removing-CPP-class" class="headerlink" title="Removing CPP class"></a><em><code>Removing CPP class</code></em></h1><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/07.png" class=""><p>As you can see, you cannot select <code>Delete</code> at the option about CPP class in editor. Then, how we can remove a class when we do not need it ? It is quite simple, but you cannot do it in editor.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/19.png" class=""><p>Close your editor and remove files for the class you want to remove. I will remove the files for the class <code>SomeUserWidget</code>.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/20.png" class=""><p>And then generate project files via uproject file. Plus, you must remove <code>[ProjectRoot]/Binaries</code> folder.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/21.png" class=""><p>Open your VisualStudio project and build editor.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/22.png" class=""><p>Now you can see the class <code>SomeUserWidget</code> disappeared.</p><img src="/2022/01/11/how-to-create-or-remove-cpp-class-in-unrealengine/23.png" class=""><p>Still the intermediate files could be remained. Remove <code>[ProjectRoot]/Intermediate</code> folder and repeat the steps.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;branch: 5.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
  </entry>
  
  <entry>
    <title>Retrospection 2021</title>
    <link href="https://baemincheon.github.io/2021/12/18/retrospection-2021/"/>
    <id>https://baemincheon.github.io/2021/12/18/retrospection-2021/</id>
    <published>2021-12-18T12:54:09.000Z</published>
    <updated>2021-12-18T12:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Two-years-from-beginning-a-blog"><a href="#Two-years-from-beginning-a-blog" class="headerlink" title="Two years from beginning a blog"></a><em><code>Two years from beginning a blog</code></em></h1><p>What a monumental, it has been 2 years ago when I posted the first article on this blog; <a href="https://baemincheon.github.io/2019/08/06/what-is-unreal-build-target/">The article about UnrealEngine build target.</a> I have usually written a post each month, mostly about UnrealEngine. The topic of post is chosen by my interest. For instance, things that I want to know, what I want to check, or just a record for memo.</p><p>An example fits in first rule is <a href="https://baemincheon.github.io/2021/08/06/how-unreal-macro-generated/">the post about UnrealEngine macro generation</a>. At that time, I was curious how UnrealEngine uses a macro for implementing its framework. Another one for second rule is <a href="https://baemincheon.github.io/2021/05/16/cpp-std-vector-growth/">the post about growth of <code>std::vector</code> in cpp</a>. At that time, I already knew there is difference between GCC and MSVC on growth size of <code>std::vector</code>. But, I had also wanted to check where the difference comes from. Last one for third rule is <a href="https://baemincheon.github.io/2021/09/10/perforce-server-setup-with-digital-ocean/">the post about how to setup Perforce server</a>. Starting a small game project, I had to setup Perforce server for my team. However, finding an easy and good manual for this was so hard that I decided to post the process of setup Perforce server. For myself and anyone.</p><p>Plus, almost every resource about UnrealEngine in Youtube or Google is targeting for the blueprint user, not the cpp user. So it was so hard to use a feature in cpp source code with the resources. Even they usually do not explain how the code works, just explain about how to use it. In this aspect, I am trying to explain the source code of engine for making it transparent. Furthermore, I am trying to put an example on every explanation. Because I have been tired of resources explained by only some words; Beginners cannot understand them, even follow the process without a precise description. Writing as simple as possible, demonstrating as many as possible, these policies would be maintained as long as possible.</p><p>I collect data via Google Analytics plugged in this blog. Top 10 pages most visited (until now) are below:</p><ol><li><code>/2020/02/09/unreal-widget-coordinate-system/</code></li><li><code>/2021/04/07/difference-between-build-cs-and-target-cs/</code></li><li><code>/2020/10/25/unreal-input-system-via-gamepad/</code></li><li><code>/2020/03/14/unreal-unique-pointer/</code></li><li><code>/2019/08/06/what-is-unreal-build-target/</code></li><li><code>/2019/08/11/custom-unreal-engine-build/</code></li><li><code>/2019/08/16/differences-of-unreal-build-targets/</code></li><li><code>/2020/01/28/unreal-blueprint-practical-use/</code></li><li><code>/2021/03/01/unreal-engine-natvis/</code></li><li><code>/2020/01/17/unreal-fname-anatomy/</code></li></ol><p>It seems that a post about widget, input, or build is more popular than others. For helping UnrealEngine newbies, I would better consider writing a post about those topics in next year. Looking back my experiences on studying UnrealEngine, I was also struggling for those topics.</p><h1 id="Career-with-UnrealEngine"><a href="#Career-with-UnrealEngine" class="headerlink" title="Career with UnrealEngine"></a><em><code>Career with UnrealEngine</code></em></h1><p>On working at PUBG Studio for 2 years, I have learned many things. (Even though some of them are not my part) Managing infra structure for large scale project, working remote in efficient way, developing and testing on console platforms, and so on. But most of all, various experiences of developing with UnrealEngine. Thanks to talented coworkers’ help, I could have done my tasks.</p><p>Reading and understanding the engine code is essential to development of industry level, but my skill was not sufficient to do that. So, in first year, I was busy to learn about topics mentioned in conversations. It was enough to take up my time. Repeated working at office and studying at home. After that, in second year, I became to understand most of what coworkers said. I started to read more engine code deeper and deeper. It is the time when I could say that “I know UnrealEngine…a bit ?”. Now, entering third year, I have plenty of skills enough to advice coworkers. Especially, many of coworkers ask me as I have experiences of console platforms. (But I still think I should learn more about console platforms)</p><p>I have done main tasks such as optimizing contents, fixing bugs and crashes, and making development environment better. Most of all, I want to say about only the first thing. Optimizing contents was the most challenging task. You may know the common sense in program optimization;</p><blockquote><p>When you increase a speed, an available memory would be decreased. On the other hand, when you increase an available memory, a speed would be decreased.</p></blockquote><p>Due to the structure of memory in computer, loading data from auxiliary storage is quite expensive operation. (In comparison to main storage) Anyone who wants the program to run faster would sacrifice the memory of program for loading data as much as possible. Particularly, among the programs, the size of data in game is bigger than others. That is why games try to load data before it is needed. Because any gamer does not want to see the freezed screen whenever picking up an item.</p><p>Right…in this condition, optimizing contents should not be easy one. What more worse is, new contents come in the game every update. In other words, an available memory could be decreased as the total size of data increased. So, it is hard to maintain a speed of program without sacrificing an available memory. Even more and more users are using the SSD thesedays, we have to support the old-gen consoles such as XboxOne and Playstation4, which are the devices uses HDD in default. </p><p>Additionally, loading data asynchronously is not always a best solution. Because, eventually it also consumes the resource of computer, and results a hitch or freeze. Yeap, so we struggled to manage an available memory of our game almost every update. Mainly, we have rarely chosen to skip some data loaded before entering ingame, instead we have chosen to optimize assets or codes to reduce its size so that the total size of data get reduced. Profiling our game and finding assets or codes taking up significant times, and analyzing what the assets or codes are wrong, and optimizing them…with magical spell. (I mean, the way how to optimize contents varies every time so it is like MAGIC, which is not easy to explain)</p><p>What I want to do in future would be developing games with newest features of UnrealEngine. But it would be hard without engine migration as we are using 4.16 version of UnrealEngine. Additionally, it is also hard to use the most fascinating features; Nanite and Lumen, as we are supporting old-gen consoles. Maybe I keep going my tasks as before, but at least, gonna to learn the newest features of UnrealEngine. Maybe, sometime I can use them. Or, I would post with contents of them. ;)</p><h1 id="Move-to-new-house"><a href="#Move-to-new-house" class="headerlink" title="Move to new house"></a><em><code>Move to new house</code></em></h1><p>In the middle of 2021, I had moved to new house as mentioned at <a href="https://baemincheon.github.io/2021/10/11/my-home-network-setup-experience-2021/">this post</a>. New house is bigger than old house, and I had to buy some furnitures. (Basic furnitures such as bed, purifier, and so on are provided in old house) Therefore, I had searched several items including closet, purifier, bed, desk, and so on. Especially, I had a difficulty for buying devices related to home network. Because I never had a need to buy these tools or devices. Even when I was in Army as Signal Corps, those things were supplies. (I did not choose what to buy)</p><p>Now I have a living room. Trying to put a sofa, table, or something fits in living room, I decided to buy UHD TV. No, not only UHD resolution…also 120Hz framerate should be great. That is a maximum range of next-gen console’s signal output. Yeap, I bought a next-gen console, too. Xbox Series X (XSX). Finally it looks like below:</p><img src="/2021/12/18/retrospection-2021/01.jpg" class=""><p>The TV is the product of SAMSUNG, <a href="https://www.samsung.com/in/tvs/qled-tv/qn90a-50-inch-neo-qled-4k-smart-tv-qa50qn90aaklxl/">50QN90A</a>. It supports resolution and framerate upto UHD&#x2F;120Hz, and has 50 inches display. I am satisfied with this product in overall aspects, what a nice TV. Only one thing disappointed is, the OS of TV is TIZEN, which is SAMSUNG’s proprietary OS. This OS does not have plenty of applications yet. For example, if you want to watch Twitch ? There is no twitch application in TIZEN, so you have to watch Twitch via web browser. Very inconvenient. Or you should check <a href="https://github.com/fgl27/smarttv-twitch#installation-guide-tizen-studio-tested-on-linux-ubuntu-16-and-up-and-windows-10-64-bits">this</a>.</p><p>After living at new house for about 6 months, I think it was a good choice. More space gets me more comfortable, and makes it possible to stay home more than before. Still we are living with the various, so I wanted to stay home without some reason. Besides, I am also working from home, so more space is suitable for me. :)</p><h1 id="Thought-about-next-gen-console"><a href="#Thought-about-next-gen-console" class="headerlink" title="Thought about next-gen console"></a><em><code>Thought about next-gen console</code></em></h1><p>I cannot help saying this, I bought the next-gen console to play Battlefield 2042. Yeap…sadly, the game has totally been ruined. Huh…I might write some post for that sometime. As a fan of Battlefield series, it is so sad that people compare Cyberpunk 2077 and Battlefield 2042. Even worse, it is not easy to find any point that Battlefield 2077 is better than Cyberpunk 2077. Crap. Anyway, that is why I decided to buy a next-gen console.</p><p>Though a start of experience was not good, the console itself was amazing. Recently, UnrealEngine has released <a href="https://www.unrealengine.com/en-US/wakeup?sessionInvalidated=true">The Matrix Awakens: An Unreal Engine 5 Experience</a>, which is kind of tech demo that shows what UnrealEngine 5 can do. The game runs at UHD&#x2F;30Hz with DynamicResolution on XSX, but it looks like REAL footage. At least, it seems this tech would become popular on movie industry. Already many of short films, part of films, or commercials use UnrealEngine, but currently they are using UnrealEngine for capturing a video. In other words, they are not realtime rendering. In the view, the tech demo was so impressed. “Wow, is it possible in realtime rendering ?”</p><p>Absolutely, this is not possible only with improvement of processor performance. In comparison of playing video, playing game needs more various resources not only processor resource. Playing video only needs loading next frame and next frame…until the video ends. (Displaying is none of business here) But, playing game needs loading assets should be displayed, executing codes may update the world or actors, integrating everything into a projection…in SINGLE ONE frametime.</p><p>CPU takes charge of executing codes, and GPU takes charge of integrating into a projection. Then, who takes charge of loading assets ? In general, CPU and memory works for it. CPU tries to read data from memory and blocks itself until the read done, but it takes some time if memory bandwidth is low. Low bandwidth means that you are try to load data from auxiliary storage, and it must not be always faster than loading data from main storage (ex: RAM). Even the problem gets worse when the size of data bigger and bigger. Thus, people have tried several techniques; A compression skill is sometimes applied to minimize the size of data. Just loading a compressed data and decompress it into the original data. Of course, this skill needs an extra resource from CPU, which could trigger a hitch while playing a game. Next, a <a href="https://docs.unrealengine.com/4.26/en-US/BlueprintAPI/EditorScripting/Asset/DuplicateAsset/">asset duplication</a> skill is common one in games supporting for device using HDD. The skill is for reducing the seek time of HDD, because the seek time of HDD is too slow to load data in realtime. This skill also has a drawback that the size of game package gonna be VERY large. Horrible.</p><p>Thankfully, both Microsoft and Sony seem to have recognized these kind of issues. Specially, Microsoft. They made an exclusive processor for decompressing data to minimize any side effect of data compression skill. Like Sony did, Microsoft customized their NVMe SSD. Furthermore, Microsoft gave game developers more flexibity atm manpulating storage by providing DirectStorage API. Finally, Sampler Feedback Streaming (SFS) could be built on these basement skills. SFS will optimize game’s memory usage and file I&#x2F;O operations. Then, Microsoft names all the skills as an architecture <a href="https://news.xbox.com/en-us/2020/07/14/a-closer-look-at-xbox-velocity-architecture/">Xbox Velocity Architecture</a>. Previously, I did not believe their words because it looks like hype. But I do know that is an amazing advance in game development. Turning back to UnrealEngine, EpicGames did great job so far with the new features.</p><h1 id="Plans-on-next-year"><a href="#Plans-on-next-year" class="headerlink" title="Plans on next year"></a><em><code>Plans on next year</code></em></h1><p>Except for writing a blog post each month, I have considered some plans to do.</p><blockquote><p>Plan #1. Making a game.</p></blockquote><p>Recently, I started to develop a game. About 3 months ago, my ex-coworker had suggested an Action RPG game project, and I accepted that. I do not know when the game is released, but some milestones should be completed in next year. In 2022, there may be a playable build. Developing this game, I should develop many features or design critical systems. With these kind of experiences, I retrospect when I was a student. It is the same that struggling on every issue, but the result would be better than when I was a student.</p><blockquote><p>Plan #2. Starting to develop a game engine.</p></blockquote><p>Working as a game programmer for 2 years, I have thought that “How about making my own game engine ?”. It would be fun that developing my own game engine, proud if many games are made of it, satisfied that I could do this. This kind of thought would be similar many of programmers have a dream that making their own programming language, operating system, database system, or etc. The game engine I will develop would be lightweight, but Rust gonna be used. I want to use Rust as many as possible in developing it. Because managing the side effect of using CPP would not be easy in a small project.</p><blockquote><p>Plan #3. Publishing console application or game.</p></blockquote><p>Actually, I have already subscribed the Xbox developer plan. It was cheaper than I expected, $19 USD only one time. (Maybe I would work for Playstation sometime…but I want to focus on Xbox now) I want to utilize this Xbox developer license. How or what to make ? Let us think about. Case first, Playing games in Xbox, I will note them if I experience some inconveniences. It would be great project if there would be something to make users convenient. Second case, making a tech demo just like The Matrix Awakens would be fun. It could be a kind of inspiration to some developers. Well…I may not make any application or game if I am busy for other works. It is on the back burner. XD</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Two-years-from-beginning-a-blog&quot;&gt;&lt;a href=&quot;#Two-years-from-beginning-a-blog&quot; class=&quot;headerlink&quot; title=&quot;Two years from beginning a blo</summary>
      
    
    
    
    
    <category term="Retrospection" scheme="https://baemincheon.github.io/tags/Retrospection/"/>
    
  </entry>
  
  <entry>
    <title>Conversion from BP-only project into BP+CPP project</title>
    <link href="https://baemincheon.github.io/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/"/>
    <id>https://baemincheon.github.io/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/</id>
    <published>2021-11-22T14:18:38.000Z</published>
    <updated>2021-11-22T14:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>branch: 5.0</code></td></tr><tr><td>Visual Studio 2022</td><td><code>version: 17.0.1</code></td></tr><tr><td>Windows 11 Pro</td><td><code>build: 22000.318</code></td></tr></tbody></table><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h1><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/01.png" class=""><p>UnrealEngine provides you two options to build your project and you can choose one of them. The options are <code>BLUEPRINT</code> and <code>C++</code> as you can see at the screenshot above. Selecting left one means that, “I gonna develop my project using only blueprint”. Otherwise, selecting right one means, “I want to use both blueprint and cpp on my project”.</p><p>By the way, what is different between them ? How can we convert BP only project into BP+CPP project ? Let us go over.</p><h1 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a><em><code>Comparison</code></em></h1><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/02.png" class=""><p>After creation, you can see the directory if selected the BP-Only. In this project <code>BPOnly</code>, you only can execute UnrealEngine editor and write blueprints. Even if you make source code files and place them into appropriate position, your project does not compile the source code. Let us find out “why not working” by the difference between BP only project and BP+CPP project.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/03.png" class=""><p>After creation with <code>C++</code> selection. The <code>BPCPP</code> project supports both blueprint and cpp like its name. You can see the difference on number of files, <code>BPOnly</code> is 6 while <code>BPCPP</code> is 10. Files that exist only in <code>BPCPP</code> are here.</p><table><thead><tr><th>Name of file&#x2F;folder</th><th>Description</th></tr></thead><tbody><tr><td><code>.vs</code></td><td>Containing VisualStudio related files. Mostly, cached data for optimization.</td></tr><tr><td><code>Binaries</code></td><td>Containing output files of this project. Currently, this project’s UnrealEditor library exists.</td></tr><tr><td><code>Source</code></td><td>Containing some simple source code files. Plus, BuildRule and TargetRule exist in this folder.</td></tr><tr><td><code>&lt;ProjectName&gt;.sln</code></td><td>Just like uproject file, it defines required version of VisualStudio, dependency of the project, and so on.</td></tr></tbody></table><p>The only <code>Source</code> folder is not generated one. The <code>Binaries</code> folder is generated when you build the project with a certain target such as <code>WindowsClient</code>, <code>WindowsServer</code>, and <code>Editor</code>. The files related to VisualStudio are generated when you attempt to make project files. Also, UnrealEngine refers the <code>Source</code> folder while generating project files.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/04.png" class=""><p>So, is that all ? No, actually there is one more thing different. Check the uproject file and you can find some difference. The contents of uproject file looks like similar, but <code>BPCPP</code>‘s one has a <code>Modules</code> property. The name of module is the same with project name, <code>BPCPP</code>.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/05.png" class=""><p>In summary, there are some differences between BP only project and BP+CPP project. (Except for generated files)</p><ul><li>Existence of <code>Source</code> folder</li><li>Property <code>Modules</code> in uproject file</li></ul><p>Where these differences come from ?</p><h1 id="Template"><a href="#Template" class="headerlink" title="Template"></a><em><code>Template</code></em></h1><p>We have learned about templates used in UnrealEngine at <a href="https://baemincheon.github.io/2021/04/07/difference-between-build-cs-and-target-cs/">the post</a>. What found was that making new project from a template is equal to copying the template project and replacing placeholders. Right, then it would be similar to that. Find the template project for BP only project and BP+CPP project.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">TMap&lt;FName, TArray&lt;TSharedPtr&lt;FTemplateItem&gt;&gt; &gt; SProjectDialog::<span class="built_in">FindTemplateProjects</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Clear the list out first - or we could end up with duplicates</span></span><br><span class="line">    TMap&lt;FName, TArray&lt;TSharedPtr&lt;FTemplateItem&gt;&gt;&gt; Templates;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now discover and all data driven templates</span></span><br><span class="line">    TArray&lt;FString&gt; TemplateRootFolders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @todo rocket make template folder locations extensible.</span></span><br><span class="line">    TemplateRootFolders.<span class="built_in">Add</span>(FPaths::<span class="built_in">RootDir</span>() + <span class="built_in">TEXT</span>(<span class="string">&quot;Templates&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add the Enterprise templates</span></span><br><span class="line">    TemplateRootFolders.<span class="built_in">Add</span>(FPaths::<span class="built_in">EnterpriseDir</span>() + <span class="built_in">TEXT</span>(<span class="string">&quot;Templates&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allow plugins to define templates</span></span><br><span class="line">    TArray&lt;TSharedRef&lt;IPlugin&gt;&gt; Plugins = IPluginManager::<span class="built_in">Get</span>().<span class="built_in">GetEnabledPlugins</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> TSharedRef&lt;IPlugin&gt;&amp; Plugin : Plugins)</span><br><span class="line">    &#123;</span><br><span class="line">        FString PluginDirectory = Plugin-&gt;<span class="built_in">GetBaseDir</span>();</span><br><span class="line">        <span class="keyword">if</span> (!PluginDirectory.<span class="built_in">IsEmpty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> FString PluginTemplatesDirectory = FPaths::<span class="built_in">Combine</span>(*PluginDirectory, <span class="built_in">TEXT</span>(<span class="string">&quot;Templates&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (IFileManager::<span class="built_in">Get</span>().<span class="built_in">DirectoryExists</span>(*PluginTemplatesDirectory))</span><br><span class="line">            &#123;</span><br><span class="line">                TemplateRootFolders.<span class="built_in">Add</span>(PluginTemplatesDirectory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>As you see, UnrealEngine finds template files from the path; <code>Root/Templates/</code>.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/06.png" class=""><p>There are many folders for each template, and now we found. The <code>TP_Blank</code> and <code>TP_BlankBP</code>. The templates contain a uproject file, which is used for making new uproject file while creating new project using template.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/07.png" class=""><p>The <code>BPOnly.uproject</code> was created based on <code>TP_BlankBP.uproject</code>. You can check that at the <code>FProjectDescriptor::Write()</code> function.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/09.png" class=""></br><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/10.png" class=""></br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FModuleDescriptor::WriteArray</span><span class="params">(TJsonWriter&lt;&gt;&amp; Writer, <span class="type">const</span> TCHAR* ArrayName, <span class="type">const</span> TArray&lt;FModuleDescriptor&gt;&amp; Modules)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Modules.<span class="built_in">Num</span>() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Writer.<span class="built_in">WriteArrayStart</span>(ArrayName);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">const</span> FModuleDescriptor&amp; Module : Modules)</span><br><span class="line">        &#123;</span><br><span class="line">            Module.<span class="built_in">Write</span>(Writer);</span><br><span class="line">        &#125;</span><br><span class="line">        Writer.<span class="built_in">WriteArrayEnd</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Why the <code>Modules</code> property not copied ? Look at the <code>FModuleDescriptor::WriteArray()</code>. UnrealEngine does not write that property when it is empty.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GameProjectUtils::SetEngineAssociationForForeignProject</span><span class="params">(<span class="type">const</span> FString&amp; ProjectFileName, FText&amp; OutFailReason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">FUProjectDictionary</span>(FPaths::<span class="built_in">RootDir</span>()).<span class="built_in">IsForeignProject</span>(ProjectFileName))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!FDesktopPlatformModule::<span class="built_in">Get</span>()-&gt;<span class="built_in">SetEngineIdentifierForProject</span>(ProjectFileName, FDesktopPlatformModule::<span class="built_in">Get</span>()-&gt;<span class="built_in">GetCurrentEngineIdentifier</span>()))</span><br><span class="line">        &#123;</span><br><span class="line">            OutFailReason = <span class="built_in">LOCTEXT</span>(<span class="string">&quot;FailedToSetEngineIdentifier&quot;</span>, <span class="string">&quot;Couldn&#x27;t set engine identifier for project&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/11.png" class=""><p>Why the <code>EngineAssociation</code> property not filled ? That property is filled later at the <code>FDesktopPlatformBase::SetEngineIdentifierForProject()</code> function.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/08.png" class=""><p>Of course, the <code>BPCPP.uproject</code> was created based on <code>TP_Blank.uproject</code>. In this case, whole contents of file copied. And, the <code>EngineAssociation</code> would be overwritten.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retarget any files that were chosen to have parts of their names replaced here</span></span><br><span class="line">FString DestBaseFilename = FPaths::<span class="built_in">GetBaseFilename</span>(SrcFileSubpath);</span><br><span class="line"><span class="type">const</span> FString FileExtension = FPaths::<span class="built_in">GetExtension</span>(SrcFileSubpath);</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">const</span> FTemplateReplacement&amp; Replacement : TemplateDefs-&gt;FilenameReplacements )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( Replacement.Extensions.<span class="built_in">Contains</span>( FileExtension ) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// This file matched a filename replacement extension, apply it now</span></span><br><span class="line">        FString LastDestBaseFilename = DestBaseFilename;</span><br><span class="line">        DestBaseFilename = DestBaseFilename.<span class="built_in">Replace</span>(*Replacement.From, *Replacement.To, Replacement.bCaseSensitive ? ESearchCase::CaseSensitive : ESearchCase::IgnoreCase);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LastDestBaseFilename != DestBaseFilename)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">UE_LOG</span>(LogGameProjectGeneration, Verbose, <span class="built_in">TEXT</span>(<span class="string">&quot;&#x27;%s&#x27;: Renaming to &#x27;%s/%s&#x27; as it matched file rename (&#x27;%s&#x27;-&gt;&#x27;%s&#x27;)&quot;</span>), *SrcFilename, *DestFileSubpathWithoutFilename, *DestBaseFilename, *Replacement.From, *Replacement.To);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Open all files with the specified extensions and replace text</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">const</span> FString&amp; FileToFix : FilesThatNeedContentsReplaced )</span><br><span class="line">&#123;</span><br><span class="line">    InnerSlowTask.<span class="built_in">EnterProgressFrame</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> bSuccessfullyProcessed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    FString FileContents;</span><br><span class="line">    <span class="keyword">if</span> ( FFileHelper::<span class="built_in">LoadFileToString</span>(FileContents, *FileToFix) )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">const</span> FTemplateReplacement&amp; Replacement : TemplateDefs-&gt;ReplacementsInFiles )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( Replacement.Extensions.<span class="built_in">Contains</span>( FPaths::<span class="built_in">GetExtension</span>(FileToFix) ) )</span><br><span class="line">            &#123;</span><br><span class="line">                FileContents = FileContents.<span class="built_in">Replace</span>(*Replacement.From, *Replacement.To, Replacement.bCaseSensitive ? ESearchCase::CaseSensitive : ESearchCase::IgnoreCase);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( FFileHelper::<span class="built_in">SaveStringToFile</span>(FileContents, *FileToFix) )</span><br><span class="line">        &#123;</span><br><span class="line">            bSuccessfullyProcessed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !bSuccessfullyProcessed )</span><br><span class="line">    &#123;</span><br><span class="line">        FFormatNamedArguments Args;</span><br><span class="line">        Args.<span class="built_in">Add</span>( <span class="built_in">TEXT</span>(<span class="string">&quot;FileToFix&quot;</span>), FText::<span class="built_in">FromString</span>( FileToFix ) );</span><br><span class="line">        OutFailReason = FText::<span class="built_in">Format</span>( <span class="built_in">LOCTEXT</span>(<span class="string">&quot;FailedToFixUpFile&quot;</span>, <span class="string">&quot;Failed to process file \&quot;&#123;FileToFix&#125;\&quot;.&quot;</span>), Args );</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">TOptional</span>&lt;FGuid&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The name of folders and content of files are replaced by the codes above. In this post, from <code>TP_Blank</code> into <code>BPCPP</code>. (Or, from <code>TP_BlankBP</code> into <code>BPOnly</code>)</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/12.png" class=""><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a><em><code>Module</code></em></h1><p>We have confirmed that the difference between <code>BPOnly</code> and <code>BPCPP</code> is about a module system, which are <code>Modules</code> property in uproject and <code>Source</code> folder containing code files. Thus, it would be possible converting blueprint only project into blueprint with cpp project by making some changes. In other words, we should make a new module.</p><p>Though <a href="https://unrealcommunity.wiki/creating-cpp-module-oshdsg2t">a good wiki page for this</a> exists, I will show you an example based on <code>TP_BlankBP</code> template.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/02.png" class=""><p>#1. Prepare a project created with <code>TP_BlankBP</code>. In this post, I use the <code>BPOnly</code> project.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/13.png" class=""><p>#2. Make a folder <code>Source</code> at project directory, and make a folder <code>&lt;ModuleName&gt;</code> in the <code>Source</code> directory.</p><p>Name the module as you want, but it is recommended to set by project name. (Because this module is the first module of project) Just to show that any name is okay, I set the module name as <code>Robb</code>, which is different with project name.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/14.png" class=""></br><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/15.png" class=""><p>#3. Copy some files from the template <code>TP_Blank</code>. Replace their names and contents.</p><p>I had copied all of files in <code>Source</code> folder of <code>TP_Blank</code> template. For using the template files in this project, I replaced filenames and contents. (In this case, I need to replace the text <code>TP_Blank</code> into <code>Robb</code>)</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/16.png" class=""><p>#4. Generate VisualStudio project files and open VisualStudio project file.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/17.png" class=""></br><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/18.png" class=""><p>#5. Build the project and open UnrealEngine editor. Profit !</p><h1 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap-Up"></a><em><code>Wrap-Up</code></em></h1><p>It is not common case that creating a project with blueprint only option, but we are able to convert blueprint only project into blueprint with cpp project. We have checked what happens while creating our project using template, what is different between <code>TP_Blank</code> and <code>TP_BlankBP</code>, and how to add cpp module at blueprint only project. As we seen earlier in this post, the conversion we did is the same work of what UnrealEngine does.</p><p>When we make an initial module, the name of module does not have to be the same with project name. But, it is recommended to set by project name with convention and several reasons. For example, I had made a module <code>Robb</code> at the project <code>BPOnly</code>. I tried to package the project and got the result like below. Some of files have the name as <code>Robb</code>, but others have the name as <code>BPOnly</code>. Kind of disharmony on naming could be problem when accessing files with name.</p><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/19.png" class=""></br><img src="/2021/11/22/conversion-from-bp-only-project-into-bp-cpp-project/20.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;branch: 5.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
    <category term="Blueprint" scheme="https://baemincheon.github.io/tags/Blueprint/"/>
    
    <category term="CPP" scheme="https://baemincheon.github.io/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>My Home Network Setup Experience (2021)</title>
    <link href="https://baemincheon.github.io/2021/10/11/my-home-network-setup-experience-2021/"/>
    <id>https://baemincheon.github.io/2021/10/11/my-home-network-setup-experience-2021/</id>
    <published>2021-10-11T11:03:07.000Z</published>
    <updated>2021-10-11T11:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a><em>Prologue</em></h1><p>About 4 months ago, I moved to new house, which is rented for 2 years. The building had been built in 2018, so I expected a quite simple and modern facilities including home networks infra. But, on the day moving to new house, a previous tenant said to me that “Only one LAN port works while others not”. At that time, I took this as a misunderstanding of the previous tenant. Because it is common that general people cannot handle or solve an network issue easily. Well…as you can see I write this post, he was right.</p><p>The previous tenant has mostly used the internet via wireless network, a.k.a. Wi-fi. It seemed that he does not know computer things. Even he connected to other rooms with exposed LAN cables. (I did not take the picture, but it was similar to a picture below.)</p><img src="/2021/10/11/my-home-network-setup-experience-2021/01.jpg" class=""><h1 id="Floor-Plan"><a href="#Floor-Plan" class="headerlink" title="Floor Plan"></a><em>Floor Plan</em></h1><img src="/2021/10/11/my-home-network-setup-experience-2021/02.png" class=""><p>I made a floor plan for new house. The green markers mean LAN ports. The LAN port with blue check mark was the only one working properly. Other LAN ports were not. The orange marker means a terminal box. When I first opened the terminal box, it looked like a picture below.</p><img src="/2021/10/11/my-home-network-setup-experience-2021/03.png" class=""><p>Very weird. The red cable might be the inbound. But other cables are connected in disorder. In this situation, I cannot guess which cable is destinated to certain LAN port. So I followed steps below for examination.</p><ul><li>​Check whether the red cable is inbound. The result was yes.</li><li>Connect a inbound cable to each cable. Check where each cable is connected to.</li><li>Repeat the second step until all of unknown ports found.</li></ul><p>After some moments, I could organize a mapping for LAN ports. Let us see the picture below.</p><img src="/2021/10/11/my-home-network-setup-experience-2021/04.png" class=""><h1 id="My-Goal"><a href="#My-Goal" class="headerlink" title="My Goal"></a><em>My Goal</em></h1><p>Now, preparation done. It was time to do my plan. My plan was…</p><ul><li>Reuse my gears as possible. At that time, I had a wireless router and some switch hubs.</li><li>Enable 2 ports. The port #3 and port #4.</li><li>Activate wireless network at appropriate position.</li></ul><p>For this purpose, I planned to put a switch hub into the terminal box. Then, the wireless router should be near port #3. Because the Wi-fi signal would get weak when the router is in terminal box. However, on trying this plan, I found a very critical problem.</p><h1 id="First-Try"><a href="#First-Try" class="headerlink" title="First Try"></a><em>First Try</em></h1><p>There is no power socket in the terminal box. In other words, there is no way to place a switch hub in the terminal box. In general, switch hub consumes power even it is small amount. What a panic !</p><p>I searched for bypassing the issue. Fortunately, there is one way fits in my case. <a href="https://en.wikipedia.org/wiki/Power_over_Ethernet">The PoE, Power over Ethernet</a>. The PoE is usually used at certain devices such as CCTV, Network Router, and VoIP Phone. These devices can be installed restricted environments.</p><ul><li>There may be no power socket or power source due to small space.</li><li>There may be only LAN cable due to intra structure.</li></ul><p>Yes. That is a perfect feature for this situation.</p><ul><li>I could use only LAN cables in the terminal box.</li><li>I did not want to lay the power socket as the house is rented.</li></ul><p>So, I chose to find injector and splitter. They are needed to implement PoE infra. The injector injects signal and power into LAN cable. The splitter splits it into signal and power at destination. Therefore, the floor plan can be redrawn as below.</p><img src="/2021/10/11/my-home-network-setup-experience-2021/05.png" class=""><p>Though it looks like some mess, anyway it worked. First, injector provides power to splitter via Ethernet. Therefore, splitter can supply power to switch hub. Second, inbound signal gets distributed by switch hub in terminal box. Finally, home network is constructed by the router on port #3.</p><ul><li>I reused my gears. The wireless router and switch hubs.</li><li>Now I can access internet via port #3 and port #4.</li><li>I activated wireless network at the middle of house, living room.</li></ul><p>Great. I was satisfied with the result…for a while.</p><h1 id="Second-Try"><a href="#Second-Try" class="headerlink" title="Second Try"></a><em>Second Try</em></h1><p>It was totally fine that connecting multiple devices with the router. Of course, because the router is extremely close. But, the problem happened when I had added several devices on port #4 side. When using one device on port #4, the device could recognize the network well. In contrast, when using two devices on port #4, one of them could not recognize the network. It can be drawn as below.</p><img src="/2021/10/11/my-home-network-setup-experience-2021/06.png" class=""><p>By the way, the devices were too far from the router. There were two switch hub between the router and devices, and it could prone some network conflicts. I had decided to change my home network configuration, with keeping my goals mentioned before.</p><img src="/2021/10/11/my-home-network-setup-experience-2021/07.png" class=""><p>A solution for this problems is simple. Placing a router in the terminal box. Then, my home network would be like picture above. But, one thing left behind, a wireless network. I cannot expect a wireless network functions well if the wireless router is in terminal box because the terminal box must be closed.</p><img src="/2021/10/11/my-home-network-setup-experience-2021/08.png" class=""><p>So, I had to buy new router for putting it in the terminal box. Placing new router in the terminal box and leave old router in the same position would be okay. In this case, the old router must be used like switch hub, not a router. My home network looks like picture above. And I will be able to connect the devices on port #4.</p><h1 id="Third-Try"><a href="#Third-Try" class="headerlink" title="Third Try"></a><em>Third Try</em></h1><p>Hmm…everything works well. Nothing malfunctions. But Wi-fi SSID issue was annoying me. New router and old router had been activated on wireless network, and they got each one of SSID. Yeah, right. There are TWO SSID separately, even though in the same network. I wanted them to merge into one.</p><p>Searched again. Maybe the <a href="https://www.wi-fi.org/knowledge-center/faq/what-is-wi-fi-easymesh">EasyMesh</a> a solution for me. The EasyMesh is one of Wi-fi technology that enables to merge multiple access points. Even EasyMesh does not care about type of frequency of access point. In other words, all of access points with 2.4GHz or 5.0GHz frequency will be merged into single access point. That was what I looked for !</p><img src="/2021/10/11/my-home-network-setup-experience-2021/09.png" class=""><p>My routers were made by <a href="https://www.wi-fi.org/about/member-companies/efm-networks">EFM networks</a>, the company famous of ipTIME trademark. EFM networks provides an utility program controls EasyMesh configuration like picture above. (Almost every company seems that develops and implements the EasyMesh specification, so find out other companies too.)</p><p>Setting up EasyMesh was completely easy. The structure of my home network was fit for the conditions. Now I can access Wi-fi via only single SSID. Furthermore, Wi-fi range is larger than before by merging two SSID. What a convenient :)</p><h1 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a><em>Epilogue</em></h1><p>With the series of effort, I could setup my home network completely without great expense. It was lucky that there was no need to call workers. Maybe I would tell a next tenant of these story and give advice. I do not want anyone to suffer from the problems. ;)</p><p>Oh, I almost forgot. You should check the router before buying it if you want to setup EasyMesh. EasyMesh requires two types of router; MeshController and MeshAgent. Check the item you gonna buy whether it is kind of MeshController or MeshAgent.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Prologue&quot;&gt;&lt;a href=&quot;#Prologue&quot; class=&quot;headerlink&quot; title=&quot;Prologue&quot;&gt;&lt;/a&gt;&lt;em&gt;Prologue&lt;/em&gt;&lt;/h1&gt;&lt;p&gt;About 4 months ago, I moved to new ho</summary>
      
    
    
    
    
    <category term="Network" scheme="https://baemincheon.github.io/tags/Network/"/>
    
    <category term="Iptime" scheme="https://baemincheon.github.io/tags/Iptime/"/>
    
  </entry>
  
  <entry>
    <title>How to setup Perforce server with Ubuntu</title>
    <link href="https://baemincheon.github.io/2021/09/10/perforce-server-setup-with-digital-ocean/"/>
    <id>https://baemincheon.github.io/2021/09/10/perforce-server-setup-with-digital-ocean/</id>
    <published>2021-09-10T14:50:39.000Z</published>
    <updated>2021-09-10T14:50:39.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>Helix Core (P4D)</td><td><code>version: P4D/LINUX26X86_64/2021.1/2156517</code></td></tr><tr><td>Ubuntu</td><td><code>version: 20.04 LTS</code></td></tr><tr><td>Helix Visual Client (P4V)</td><td><code>version: P4V/NTX64/2021.3/2170446</code></td></tr><tr><td>Windows 10</td><td><code>build: 19043.1165</code></td></tr></tbody></table><table><thead><tr><th>References</th><th></th></tr></thead><tbody><tr><td>Helix Core Server Administrator Guide</td><td><a href="https://www.perforce.com/manuals/p4sag/Content/P4SAG/chapter.install.html">https://www.perforce.com/manuals/p4sag/Content/P4SAG/chapter.install.html</a></td></tr><tr><td>.p4ignore for UnrealEngine</td><td><a href="https://github.com/mattmarcin/ue4-perforce/blob/master/.p4ignore">https://github.com/mattmarcin/ue4-perforce/blob/master/.p4ignore</a></td></tr><tr><td>P4 Typemap for UnrealEngine</td><td><a href="https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/SourceControl/Perforce/">https://docs.unrealengine.com/4.27/en-US/ProductionPipelines/SourceControl/Perforce/</a></td></tr></tbody></table><h1 id="Prepare-Ubuntu-Instance"><a href="#Prepare-Ubuntu-Instance" class="headerlink" title="Prepare Ubuntu Instance"></a><em>Prepare Ubuntu Instance</em></h1><p>As the Perforce is a kind of CVCS*, it is recommended to use a dedicated server. The dedicated server should run all day and night, and should have a fixed IP address. Thus, you would better choose a cloud server if not have a machine for the purposes. In this post, I chose <a href="https://www.digitalocean.com/">DigitalOcean</a> for a cloud server provider. The DigitalOcean provides instances with cheaper cost than others such as AWS. You know, you may not need a high quality instance for your small size project.<br>※ CVCS : Centralized Version Control System. Find more information at <a href="https://en.wikipedia.org/wiki/Distributed_version_control#Distributed_vs._centralized">here</a>.</p><p>Sign-up and Sign-in the DigitalOcean. Click the button <code>Create</code> and choose <code>Droplets</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/01.png" class=""><p>At the page <code>Create Droplets</code>, you would be asked to choose options for a instance. In this post, we gonna choose options like below:</p><ul><li><code>Choose an image</code><ul><li>Ubuntu 20.04 (LTS) x64</li></ul></li><li><code>Choose a plan</code><ul><li>SHARED CPU<ul><li>Basic</li></ul></li><li>CPU options<ul><li>Regular Intel with SSD</li><li>$5&#x2F;month (&#x3D; $0.007&#x2F;hour)<ul><li>1 core CPU, 1 GB RAM, 25 GB SSD, 1000 GB transfer</li></ul></li></ul></li></ul></li><li><code>Add block storage</code><ul><li>$5&#x2F;month (&#x3D; $0.007&#x2F;hour)<ul><li>50 GB SSD</li></ul></li></ul></li><li><code>Choose a datacenter region</code><ul><li>(Select a datacenter that is closest to your location)</li><li>(In my case, it is Singapore)</li></ul></li><li><code>Select additional options</code><ul><li>Monitoring</li></ul></li><li><code>Authentication</code><ul><li>Password<ul><li>(Choose a password for entering the instance)</li></ul></li></ul></li></ul><p>Any options I did not mention are left as default selection. Let us create our Droplet by clicking the button <code>Create Droplet</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/02.png" class=""><p>Now you can see the new Droplet. Connect the instance via SSH. You can do it with Powershell or WSL in Windows 10. The <code>X.X.X.X</code> must be replaced with the IP address of instance.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ssh root@X.X.X.X</span><br></pre></td></tr></table></figure><p>But, when you attempt to connect the instance via SSH, you are asked to enter a password.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@X.X.X.X&#x27;s password:</span><br></pre></td></tr></table></figure><p>Enter the password that you typed at the <code>Authentication</code> text block. If the right password entered, you can see the logs like below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Ubuntu 20.04.2 LTS (GNU/Linux 5.4.0-73-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  System information as of Sat Sep 11 16:12:19 UTC 2021</span><br><span class="line"></span><br><span class="line">  System load:  0.0               Users logged in:       0</span><br><span class="line">  Usage of /:   9.3% of 24.06GB   IPv4 address for eth0: X.X.X.X</span><br><span class="line">  Memory usage: 24%               IPv4 address for eth0: X.X.X.X</span><br><span class="line">  Swap usage:   0%                IPv4 address for eth1: X.X.X.X</span><br><span class="line">  Processes:    113</span><br><span class="line"></span><br><span class="line">66 updates can be applied immediately.</span><br><span class="line">1 of these updates is a standard security update.</span><br><span class="line">To see these additional updates run: apt list --upgradable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** System restart required ***</span><br><span class="line">Last login: Sat Sep 11 11:35:09 2021 from X.X.X.X</span><br><span class="line">root@ubuntu-test:~#</span><br></pre></td></tr></table></figure><p>At the your instance page, you can check the volume setting. Click the <code>Config Instructions</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/03.png" class=""><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/04.png" class=""><p>If you selected the option <code>Automatically Format &amp; Mount</code> at the section <code>Add block storage</code>, the volume is already attached even you did nothing. In other words, the process <code>Mount the volume</code> is already done. Let us check whether the volume is well mounted. The <code>volume_X</code> must be replaced with yours.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /mnt/volume_X</span><br><span class="line">&gt; ls</span><br><span class="line">lost+found</span><br></pre></td></tr></table></figure><p>You successfully setup an Ubuntu instance. Good to go !</p><h1 id="Install-amp-Setup-P4D"><a href="#Install-amp-Setup-P4D" class="headerlink" title="Install &amp; Setup P4D"></a><em>Install &amp; Setup P4D</em></h1><p>We need to setup public key for accessing Perforce packages. For this, you need to download the public key at <a href="https://package.perforce.com/perforce.pubkey">https://package.perforce.com/perforce.pubkey</a>. The download can be done by command below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl https://package.perforce.com/perforce.pubkey &gt; perforce.pubkey</span><br></pre></td></tr></table></figure><p>This command let you save the public key as a file, whose name is <code>perforce.pubkey</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl https://package.perforce.com/perforce.pubkey &gt; perforce.pubkey</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  1707  100  1707    0     0   2024      0 --:--:-- --:--:-- --:--:--  2022</span><br><span class="line">&gt; ls</span><br><span class="line">perforce.pubkey  snap</span><br></pre></td></tr></table></figure><p>You can check the contents of file with <code>cat</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat perforce.pubkey</span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line">Version: GnuPG v2.0.14 (GNU/Linux)</span><br><span class="line"></span><br><span class="line">mQINBFIOq14BEADUC4gm+gjS/E/y2xXouALvMuK2xO/8nbcXJCUAD6Bi1xxmyDaR</span><br><span class="line">LXHDJ5lIzZV8/Jctck2bBIWE1WE8Qfpfz/eAU5lJoQTovt0OkOnyyAyFBSk9yXtN</span><br><span class="line">fscQGdTXkl9LVVfsaTHVT3WGZF+iMCIZOVjYGjqRh3ozZp3LWOQl3cwgOZKQCi9Q</span><br><span class="line">y/YRn6XZIOiQQEfvLzrBL1oyD1BoOq8Y2CrwTfhyz93qIRu089mAr7lo2e6UM/KV</span><br><span class="line">JRjk6rPFcKIE0aOP2UwgY/6LMeK65MAKib76EFbygXBprz9K5zwq70A7MGSPjRPw</span><br><span class="line">A7kdzw53flZyNscI2c093jW/PkeDw4++01QFky/FFqJncjIHoOid42NvQXD/+E5e</span><br><span class="line">JKhqYReS2eHpv5qgsSc2Febd5Ccd0B4+2ryY3MBXqaj759NH6uWAowHjAv90y4Cb</span><br><span class="line">c2FugNBAJ6XQBQaXcWsfPnWpBFYL36LxBCcu+ddiycTWS9SWFT3h0FIgTbTQNNQr</span><br><span class="line">Fgjg5vYAw+TWU8wf1I3sak+wbU25h7ErKN1oSJ/EbPwUFOc6zjaDUlnIgmCnQgEj</span><br><span class="line">NdrlWGGfgCfYTHZTnGW6fGlpByDnYO0wn/okPJxRStnkbqb8QGKRa1uTObSM0/4J</span><br><span class="line">aqsaReo2E45x2TAIY6rNuiLet/r1hZzpLs3dffvoddscb/LshW1eiNU36QARAQAB</span><br><span class="line">tERQZXJmb3JjZSBTb2Z0d2FyZSAoUGFja2FnZSBTaWduaW5nKSA8c3VwcG9ydCtw</span><br><span class="line">YWNrYWdpbmdAcGVyZm9yY2UuY29tPokCPgQTAQIAKAUCUg6rXgIbAwUJEswDAAYL</span><br><span class="line">CQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQcSPLdg/xiGlcKxAAvkzIPVzhc2am</span><br><span class="line">GaAAUse4mQ6InNqCLiGEbNxPWnd13myGesbESfyBxex5Gb2t47gVllA7P9hOcvsv</span><br><span class="line">J6g56WPD1yb+5Wrdchdn6SkSEfg1MOAMTskFPPJJ/3ZgfHKn/kv3tOJPcQsidRFl</span><br><span class="line">uqNMHSroHpOExYaTgB7IhYBjnYHLwUgH1ikCFgkRzdaDW4Qfx6IRB1vpSjzxCjzP</span><br><span class="line">Cc78cf4VDmBdSfwsO6/ON19ZcxtLjHvQK5sz91qsEJdJZjyq6YCHYfP+Zx8/M55S</span><br><span class="line">ixZ6/QsLRAsUYGuBjuWMpMgXjB06TXVbSg97bZt2tHBMZJ2OEMgn09eysyS9uwlY</span><br><span class="line">HMtpu23jDTn6sKlRE6PYbZQirt2Ydq56wOQqJzrW1BbadX56DY8FLYBh8H9kcBaT</span><br><span class="line">MGT1fiLfaEn1C8dG3D9aHdaPXZu+zGcMrPY+GMcObAAk3ICRXR20NknSByOxNEyz</span><br><span class="line">nOqCsmr1nRdrpnf4+52G53xYKroWVRYeDdBukC8ik6weFjK4qy7C4ujOe1AmoBis</span><br><span class="line">g6+R0huka1TYr9r94um+idvHniLnaZvnxPKEUMLnGesx9LYio4slqQj+nN6fIelv</span><br><span class="line">onltXR49hpuAiOKtYUISmsk+rI+ep60DfDSQGbrV8HkW6KjuHjmE7EJKEEnIk5N/</span><br><span class="line">JJfimlBk+rNgbcz0fpT6IDdS6PEoGwk=</span><br><span class="line">=fj1X</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure><p>Let us register the public key.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; gpg --with-fingerprint perforce.pubkey</span><br><span class="line">gpg: directory &#x27;/root/.gnupg&#x27; created</span><br><span class="line">gpg: keybox &#x27;/root/.gnupg/pubring.kbx&#x27; created</span><br><span class="line">gpg: WARNING: no command supplied.  Trying to guess what you mean ...</span><br><span class="line">pub   rsa4096 2013-08-16 [SC] [expires: 2023-08-14]</span><br><span class="line">uid           Perforce Software (Package Signing) &lt;support+packaging@perforce.com&gt;</span><br></pre></td></tr></table></figure><p>Add the Perforce packaging key to your APT keyring.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; wget -qO - https://package.perforce.com/perforce.pubkey | sudo apt-key add -</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>Execute the command for adding Perforce to your APT configuration.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo add-apt-repository &#x27;deb http://package.perforce.com/apt/ubuntu focal release&#x27;</span><br><span class="line">Hit:1 https://repos.insights.digitalocean.com/apt/do-agent main InRelease</span><br><span class="line">Hit:2 https://repos-droplet.digitalocean.com/apt/droplet-agent main InRelease</span><br><span class="line">Get:3 http://mirrors.digitalocean.com/ubuntu focal InRelease [265 kB]</span><br><span class="line">Hit:4 http://mirrors.digitalocean.com/ubuntu focal-updates InRelease</span><br><span class="line">Hit:5 http://mirrors.digitalocean.com/ubuntu focal-backports InRelease</span><br><span class="line">Get:6 http://package.perforce.com/apt/ubuntu focal InRelease [3650 B]</span><br><span class="line">Hit:7 http://security.ubuntu.com/ubuntu focal-security InRelease</span><br><span class="line">Get:8 http://package.perforce.com/apt/ubuntu focal/release amd64 Packages [8168 B]</span><br><span class="line">Fetched 277 kB in 1s (298 kB/s)</span><br><span class="line">Reading package lists... Done</span><br></pre></td></tr></table></figure><p>Run update.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; apt-get update</span><br><span class="line">Hit:1 https://repos.insights.digitalocean.com/apt/do-agent main InRelease</span><br><span class="line">Get:2 http://mirrors.digitalocean.com/ubuntu focal InRelease [265 kB]</span><br><span class="line">Hit:3 https://repos-droplet.digitalocean.com/apt/droplet-agent main InRelease</span><br><span class="line">Hit:4 http://mirrors.digitalocean.com/ubuntu focal-updates InRelease</span><br><span class="line">Hit:5 http://mirrors.digitalocean.com/ubuntu focal-backports InRelease</span><br><span class="line">Hit:6 http://package.perforce.com/apt/ubuntu focal InRelease</span><br><span class="line">Hit:7 http://security.ubuntu.com/ubuntu focal-security InRelease</span><br><span class="line">Fetched 265 kB in 1s (321 kB/s)</span><br><span class="line">Reading package lists... Done</span><br></pre></td></tr></table></figure><p>Install the package.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo apt-get install helix-p4d</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">...</span><br><span class="line">Started 0 services.</span><br><span class="line">No services configured.</span><br><span class="line">Processing triggers for man-db (2.9.1-1) ...</span><br><span class="line">Processing triggers for systemd (245.4-4ubuntu3.6) ...</span><br></pre></td></tr></table></figure><p>Now you have one last step, launching the Perforce service ! Execute the batch file for it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo /opt/perforce/sbin/configure-helix-p4d.sh</span><br><span class="line"></span><br><span class="line">Summary of arguments passed:</span><br><span class="line"></span><br><span class="line">Service-name        [(not specified)]</span><br><span class="line">P4PORT              [(not specified)]</span><br><span class="line">P4ROOT              [(not specified)]</span><br><span class="line">Super-user          [(not specified)]</span><br><span class="line">Super-user passwd   [(not specified)]</span><br><span class="line">Unicode mode        [(not specified)]</span><br><span class="line">Case-sensitive      [(not specified)]</span><br><span class="line"></span><br><span class="line">For a list of other options, type Ctrl-C to exit, and then run:</span><br><span class="line">$ sudo /opt/perforce/sbin/configure-helix-p4d.sh --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You have entered interactive configuration for p4d. This script</span><br><span class="line">will ask a series of questions, and use your answers to configure p4d</span><br><span class="line">for first time use. Options passed in from the command line or</span><br><span class="line">automatically discovered in the environment are presented as defaults.</span><br><span class="line">You may press enter to accept them, or enter an alternative.</span><br><span class="line"></span><br><span class="line">Please provide the following details about your desired Perforce environment:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Perforce Service name [master]:</span><br></pre></td></tr></table></figure><p>You will be asked to enter some configurations such as name of service, directory, case sensitiviy, and so on. Setup them appropriately.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Perforce Service name [master]: Test</span><br><span class="line">Service Test not found. Creating...</span><br><span class="line">Perforce Server root (P4ROOT) [/opt/perforce/servers/Test]:</span><br></pre></td></tr></table></figure><p>You should select the proper directory. It would be better to select the attached volume if the size of your project would be more than 25GB.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Perforce Service name [master]: Test</span><br><span class="line">Service Test not found. Creating...</span><br><span class="line">Perforce Server root (P4ROOT) [/opt/perforce/servers/Test]:</span><br><span class="line">Create directory? (y/n) [y]: y</span><br><span class="line">Perforce Server unicode-mode (y/n) [n]: y</span><br><span class="line">Perforce Server case-sensitive (y/n) [y]:</span><br><span class="line">Perforce Server address (P4PORT) [ssl:1666]:</span><br><span class="line">Perforce super-user login [super]:</span><br><span class="line">Perforce super-user password:</span><br><span class="line">Re-enter password.</span><br><span class="line">Perforce super-user password:</span><br><span class="line"></span><br><span class="line">Configuring p4d service &#x27;Test&#x27; with the information you specified...</span><br><span class="line"></span><br><span class="line">Perforce db files in &#x27;/opt/perforce/servers/Test/root&#x27; will be created if missing...</span><br><span class="line">...</span><br><span class="line">::</span><br><span class="line">::  - For help with creating Perforce Helix user accounts, populating</span><br><span class="line">::    the depot with files, and making other customizations for your</span><br><span class="line">::    site, see the Helix Versioning Engine Administrator Guide:</span><br><span class="line">::</span><br><span class="line">::    https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html</span><br><span class="line">::</span><br><span class="line">::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::</span><br></pre></td></tr></table></figure><p>Now you can access the Perforce service via P4V at a client. Before that, take care of typemap. The typemap is an abbreviation of <code>Type Mapping</code>. You can define how Perforce handles certain type of files by it. If your project uses UnrealEngine, for the types related to UnrealEngine, Epic Games recommends to setup like below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TypeMap:</span><br><span class="line">                binary+w //depot/....exe</span><br><span class="line">                binary+w //depot/....dll</span><br><span class="line">                binary+w //depot/....lib</span><br><span class="line">                binary+w //depot/....app</span><br><span class="line">                binary+w //depot/....dylib</span><br><span class="line">                binary+w //depot/....stub</span><br><span class="line">                binary+w //depot/....ipa</span><br><span class="line">                binary //depot/....bmp</span><br><span class="line">                text //depot/....ini</span><br><span class="line">                text //depot/....config</span><br><span class="line">                text //depot/....cpp</span><br><span class="line">                text //depot/....h</span><br><span class="line">                text //depot/....c</span><br><span class="line">                text //depot/....cs</span><br><span class="line">                text //depot/....m</span><br><span class="line">                text //depot/....mm</span><br><span class="line">                text //depot/....py</span><br><span class="line">                binary+l //depot/....uasset</span><br><span class="line">                binary+l //depot/....umap</span><br><span class="line">                binary+l //depot/....upk</span><br><span class="line">                binary+l //depot/....udk</span><br><span class="line">                binary+l //depot/....ubulk</span><br></pre></td></tr></table></figure><p>You can edit the typemap of instance by executing command <code>p4 typemap</code>. The command would open typemap file with vi editor.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/05.png" class=""><p>Add the Epic Games’s mappings to your mapping file*. Now all preparation of server side completed.<br>※ FYI, the <code>//</code> string does not mean “It is a kind of comment.” in P4 typemap system. You should copy the all of text.</p><h1 id="Install-amp-Setup-P4V"><a href="#Install-amp-Setup-P4V" class="headerlink" title="Install &amp; Setup P4V"></a><em>Install &amp; Setup P4V</em></h1><p>Download the P4V installer at <a href="https://www.perforce.com/downloads/helix-visual-client-p4v">https://www.perforce.com/downloads/helix-visual-client-p4v</a> and install with default options. When the installation compeleted, execute the P4V. You will see the display.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/06.png" class=""><p>Enter <code>ssl:X.X.X.X:1666</code> at the section <code>Server</code>. The <code>X.X.X.X</code> must be replaced with the IP address of instance. Enter <code>super</code> at the section <code>User</code>. The user <code>super</code> is an administrator account we have set. Now click the button <code>OK</code>. Check <code>Trust this fingerprint</code> and click the button <code>Connect</code> if you encounter the dialog like below:</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/07.png" class=""><p>Enter the password you set while launching the Perforce service at instance.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/08.png" class=""><p>You can see the display when successfully entered.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/09.png" class=""><p>The admin tool can be accessed at <code>Tools/Administration</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/10.png" class=""><p>In the tool, you can add or delete user directly.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/11.png" class=""><p>Let us prepare some Depot and Stream. Click the <code>Depots</code>. Right-click any depot and select <code>New Depot...</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/12.png" class=""><p>Type the name of new Depot.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/13.png" class=""><p>Select <code>stream</code> at the section <code>Deopt type</code> and click <code>OK</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/14.png" class=""><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/15.png" class=""><p>Close the admin tool and return to the P4V*. Now you can find the new Depot at Depot view.<br>※ Actually, the admin tool was the program P4Admin, which is different with P4V. Just, Perforce supports to launch the P4Admin from P4V.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/16.png" class=""><p>Restart the P4V for applying changes from P4Admin. After restart, find the <code>File/New/Stream...</code> and click it.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/17.png" class=""><p>Let us make a Stream, name of <code>mainline</code>. The Stream will be placed in the new Deopt. Click the button <code>OK</code>.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/18.png" class=""><p>Click <code>New Workspace...</code> at workspace view.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/19.png" class=""><p>Name the new workspace and click the button <code>Browse</code> in line of <code>Stream</code>. You can find the Stream <code>mainline</code> at the dialog. Select it.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/20.png" class=""><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/21.png" class=""><p>Finally, we have prepared a workspace in totally empty new Perforce service ! But, you should config <code>p4ignore</code> before getting into the work. Open any terminal and execute the command below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; p4 set P4IGNORE=.p4ignore</span><br></pre></td></tr></table></figure><p>This command will let your Perforce refer the file whose name is <code>.p4ignore</code>. It is kind of configuration lets you can use Perforce like git, which provides <code>.gitignore</code>. To apply this changes, restart P4V. And, create <code>.p4ignore</code> at your workspace directory. Let us test whether <code>.p4ignore</code> works well. Fill the contents of <code>.p4ignore</code> like below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.sln</span><br></pre></td></tr></table></figure><p>Select <code>Mark for Add...</code> for <code>.p4ignore</code> and submit it.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/22.png" class=""><p>Next, create a empty file whose name is <code>Test.sln</code>. Try to add this !</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/23.png" class=""><p>You try to check out the file, but the dialog would be popped-up. Great, your p4ignore works well.</p><img src="/2021/09/10/perforce-server-setup-with-digital-ocean/24.png" class=""><p>If your project uses UnrealEngine, you should search for good one. I recommend you to use <a href="https://github.com/mattmarcin/ue4-perforce/blob/master/.p4ignore">the p4ignore mentioned at references</a>. Okay, then…all of preparation done. You are good to go :) !</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Helix Core (P4D)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;version: P4D/LINUX26X86_6</summary>
      
    
    
    
    
    <category term="Perforce" scheme="https://baemincheon.github.io/tags/Perforce/"/>
    
    <category term="DigitalOcean" scheme="https://baemincheon.github.io/tags/DigitalOcean/"/>
    
    <category term="Ubuntu" scheme="https://baemincheon.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>How Unreal Macro Generated</title>
    <link href="https://baemincheon.github.io/2021/08/06/how-unreal-macro-generated/"/>
    <id>https://baemincheon.github.io/2021/08/06/how-unreal-macro-generated/</id>
    <published>2021-08-06T13:49:57.000Z</published>
    <updated>2021-08-06T13:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Environment</th><th></th></tr></thead><tbody><tr><td>UnrealEngine</td><td><code>branch: ue5-early-access</code></td></tr><tr><td>Visual Studio 2019</td><td><code>version: 16.10.4</code></td></tr><tr><td>Windows 10</td><td><code>build: 19043.1110</code></td></tr></tbody></table><h1 id="Expanding-UCLASS"><a href="#Expanding-UCLASS" class="headerlink" title="Expanding UCLASS()"></a><em>Expanding <code>UCLASS()</code></em></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Runtime/Engine/Classes/GameFramework/PlayerController.h</span><br><span class="line"></span><br><span class="line">UCLASS(config=Game, BlueprintType, Blueprintable, meta=(ShortTooltip=&quot;A Player Controller is an actor responsible for controlling a Pawn used by the player.&quot;))</span><br><span class="line">class ENGINE_API APlayerController : public AController</span><br></pre></td></tr></table></figure><p>The macro <code>UCLASS()</code> may be the most famous one of the unreal macros. First of all, let us find out how it can be expanded. Our goal is expanding <code>UCLASS()</code> of the class <code>APlayerController</code>, which can be found at line #222 of <code>PlayerController.h</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UE_BUILD_DOCS || defined(__INTELLISENSE__ )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UCLASS(...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UCLASS(...) BODY_MACRO_COMBINE(CURRENT_FILE_ID,_,__LINE__,_PROLOG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>In UnrealEngine, most of definitions for core macros are placed in <code>ObjectMacros.h</code> file. We can see the definition of <code>UCLASS</code> here, and it would be the second definition in usual case. Then, what is the macro <code>BODY_MACRO_COMBINE</code> ?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h</span><br><span class="line"></span><br><span class="line">// This pair of macros is used to help implement GENERATED_BODY() and GENERATED_USTRUCT_BODY()</span><br><span class="line">#define BODY_MACRO_COMBINE_INNER(A,B,C,D) A##B##C##D</span><br><span class="line">#define BODY_MACRO_COMBINE(A,B,C,D) BODY_MACRO_COMBINE_INNER(A,B,C,D)</span><br></pre></td></tr></table></figure><p>The macro is defined as <code>BODY_MACRO_COMBINE_INNER</code>, which concatenates parameters as one string. Thus, the macro <code>UCLASS</code> would result the text like below:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UCLASS(...) -&gt;</span><br><span class="line">BODY_MACRO_COMBINE(CURRENT_FILE_ID,_,222,_PROLOG) -&gt;</span><br><span class="line">BODY_MACRO_COMBINE_INNER(CURRENT_FILE_ID,_,222,_PROLOG) -&gt;</span><br><span class="line">CURRENT_FILE_ID_222_PROLOG</span><br></pre></td></tr></table></figure><img src="/2021/08/06/how-unreal-macro-generated/02.png" class=""><p>It can be tested with simple code. Check it out at the screenshot below. The <code>__LINE__</code> is one of <a href="https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros?view=msvc-160">pre-defined macro</a>, so it is turned to <code>222</code>, where the <code>UCLASS</code> is written.</p><img src="/2021/08/06/how-unreal-macro-generated/01.png" class=""><p>Here is test code and its result. Check the name of integer variable.</p><p>Actually, the macro <code>CURRENT_FILE_ID</code> can be found at header files generated by <a href="https://docs.unrealengine.com/4.26/en-US/ProductionPipelines/BuildTools/UnrealHeaderTool/">Unreal Header Tool</a>. You can find the definition at generated header files, for instance, <code>PlayerController.generated.h</code>. The generated header files are created when you attempt to build your project.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Intermediate/Build/Win64/UnrealEditor/Inc/Engine/PlayerController.generated.h</span><br><span class="line"></span><br><span class="line">#undef CURRENT_FILE_ID</span><br><span class="line">#define CURRENT_FILE_ID Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h</span><br></pre></td></tr></table></figure><p>Thus, the macro <code>CURRENT_FILE_ID</code> would be replaced before <code>BODY_MACRO_COMBINE</code> is expanded. We can rewrite the macro evaluation process.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UCLASS(...) -&gt;</span><br><span class="line">BODY_MACRO_COMBINE(Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h,_,222,_PROLOG) -&gt;</span><br><span class="line">BODY_MACRO_COMBINE_INNER(Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h,_,222,_PROLOG) -&gt;</span><br><span class="line">Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_222_PROLOG</span><br></pre></td></tr></table></figure><p>And, the <code>Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_222_PROLOG</code> is also defined at the generated header file for <code>PlayerController.h</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Intermediate/Build/Win64/UnrealEditor/Inc/Engine/PlayerController.generated.h</span><br><span class="line"></span><br><span class="line">#define Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_222_PROLOG \</span><br><span class="line">Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_225_EVENT_PARMS</span><br></pre></td></tr></table></figure><p>The <code>Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_225_EVENT_PARMS</code> is a macro containing definitions for essential structures.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Intermediate/Build/Win64/UnrealEditor/Inc/Engine/PlayerController.generated.h</span><br><span class="line"></span><br><span class="line">#define Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_225_EVENT_PARMS \</span><br><span class="line">struct PlayerController_eventClientAddTextureStreamingLoc_Parms \</span><br><span class="line">&#123; \</span><br><span class="line">FVector InLoc; \</span><br><span class="line">float Duration; \</span><br><span class="line">bool bOverrideLocation; \</span><br><span class="line">&#125;; \</span><br><span class="line">struct PlayerController_eventClientCapBandwidth_Parms \</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>Let us rewrite the evaluation process. As a result, the macro <code>UCLASS</code> is replaced by definitions for some essential structures.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UCLASS(...) -&gt;</span><br><span class="line">BODY_MACRO_COMBINE(Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h,_,222,_PROLOG) -&gt;</span><br><span class="line">BODY_MACRO_COMBINE_INNER(Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h,_,222,_PROLOG) -&gt;</span><br><span class="line">Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_222_PROLOG -&gt;</span><br><span class="line">Engine_Source_Runtime_Engine_Classes_GameFramework_PlayerController_h_225_EVENT_PARMS -&gt;</span><br><span class="line">struct PlayerController_eventClientAddTextureStreamingLoc_Parms...(omitted)</span><br></pre></td></tr></table></figure><p>Okay, we have just peeled off one layer to the truth. But, is that all ? We should take care of something more…Most of time, the macro <code>UCLASS</code> is not solely used. Various keywords and specifiers come with this. (ex: <code>config=Game</code>, <code>BlueprintType</code>, <code>meta=(ShortTooltip=...</code>, …) So, how they are handled ? Even, how the generated header file is created ?</p><h1 id="Generated-Header-File"><a href="#Generated-Header-File" class="headerlink" title="Generated Header File"></a><em>Generated Header File</em></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Programs/UnrealHeaderTool/Private/CodeGenerator.cpp</span><br><span class="line"></span><br><span class="line">FPreloadHeaderFileInfo&amp; FileInfo = PreloadedFiles[Index];</span><br><span class="line">bool bHasChanged = ConstThis-&gt;WriteHeader(FileInfo, GeneratedHeaderText, AdditionalHeaders, ReferenceGatherers, TempSaveTasks[Index]);</span><br></pre></td></tr></table></figure><p>The UHT writes header files containing auto-generated codes at the code above. The <code>PreloadedFiles</code> has absolute paths of generated header file, for instance, <code>D:/Git/UnrealEngine/Engine/.../Inc/Engine/PlayerController.generated.h</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Programs/UnrealHeaderTool/Private/CodeGenerator.cpp</span><br><span class="line"></span><br><span class="line">TArray&lt;FPreloadHeaderFileInfo&gt; PreloadedFiles;</span><br><span class="line">PreloadedFiles.SetNum(Exported.Num());</span><br><span class="line"></span><br><span class="line">ParallelFor(Exported.Num(), [&amp;Exported, &amp;PreloadedFiles, Package=Package, ConstPackageManifest](int32 Index)</span><br><span class="line">&#123;</span><br><span class="line">FUnrealSourceFile* SourceFile = Exported[Index];</span><br><span class="line"></span><br><span class="line">FString ModuleRelativeFilename = SourceFile-&gt;GetFilename();</span><br><span class="line">ConvertToBuildIncludePath(Package, ModuleRelativeFilename);</span><br><span class="line"></span><br><span class="line">FString StrippedName = FPaths::GetBaseFilename(MoveTemp(ModuleRelativeFilename));</span><br><span class="line">FString HeaderPath = (ConstPackageManifest-&gt;GeneratedIncludeDirectory / StrippedName) + TEXT(&quot;.generated.h&quot;);</span><br><span class="line"></span><br><span class="line">PreloadedFiles[Index].Load(MoveTemp(HeaderPath));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2021/08/06/how-unreal-macro-generated/03.png" class=""><p>An example of <code>NoExportTypes.generated.h</code>.</p><p>You can track what UHT writes on the generated header file via the variable <code>GeneratedHeaderText</code>. Because its contents will replace old generated header file, whenever there is any difference between old contents and new contents.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Programs/UnrealHeaderTool/Private/CodeGenerator.cpp</span><br><span class="line"></span><br><span class="line">GeneratedHeaderText.Logf(</span><br><span class="line">TEXT(&quot;#ifdef %s&quot;)LINE_TERMINATOR</span><br><span class="line">TEXT(&quot;#error \&quot;%s.generated.h already included, missing &#x27;#pragma once&#x27; in %s.h\&quot;&quot;)LINE_TERMINATOR</span><br><span class="line">TEXT(&quot;#endif&quot;)LINE_TERMINATOR</span><br><span class="line">TEXT(&quot;#define %s&quot;)LINE_TERMINATOR</span><br><span class="line">LINE_TERMINATOR,</span><br><span class="line">*FileDefineName, *StrippedFilename, *StrippedFilename, *FileDefineName);</span><br></pre></td></tr></table></figure><p>For example, there is some definition for preventing duplicated include. The format above turns to like below.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Intermediate/Build/Win64/UnrealEditor/Inc/Engine/PlayerController.generated.h</span><br><span class="line"></span><br><span class="line">#ifdef ENGINE_PlayerController_generated_h</span><br><span class="line">#error &quot;PlayerController.generated.h already included, missing &#x27;#pragma once&#x27; in PlayerController.h&quot;</span><br><span class="line">#endif</span><br><span class="line">#define ENGINE_PlayerController_generated_h</span><br></pre></td></tr></table></figure><p>There are more things worthy to check.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Programs/UnrealHeaderTool/Private/CodeGenerator.cpp</span><br><span class="line"></span><br><span class="line">FString MacroName = SourceFile.GetGeneratedMacroName(ClassData, TEXT(&quot;_EVENT_PARMS&quot;));</span><br><span class="line">WriteMacro(OutGeneratedHeaderText, MacroName, UClassMacroContent);</span><br><span class="line">PrologMacroCalls.Logf(TEXT(&quot;\t%s\r\n&quot;), *MacroName);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">GeneratedHeaderText.Log(TEXT(&quot;#undef CURRENT_FILE_ID\r\n&quot;));</span><br><span class="line">GeneratedHeaderText.Logf(TEXT(&quot;#define CURRENT_FILE_ID %s\r\n\r\n\r\n&quot;), *SourceFile-&gt;GetFileId());</span><br></pre></td></tr></table></figure><p>That is why the <code>CURRENT_FILE_ID</code> and <code>..._EVENT_PARMS</code> macros are defined. Furthermore, other codes can be found at <code>FNativeClassHeaderGenerator::FNativeClassHeaderGenerator(const UPackage*, const TSet&lt;FUnrealSourceFile*&gt;&amp;, FClasses&amp;, bool)</code>.</p><p>So, we have found the relationship of unreal macro and generated header file. But, there is one thing left, the metadata.</p><h1 id="Metadata-Parser"><a href="#Metadata-Parser" class="headerlink" title="Metadata Parser"></a><em>Metadata Parser</em></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Runtime/Engine/Classes/GameFramework/PlayerController.h</span><br><span class="line"></span><br><span class="line">UCLASS(config=Game, BlueprintType, Blueprintable, meta=(ShortTooltip=&quot;A Player Controller is an actor responsible for controlling a Pawn used by the player.&quot;))</span><br><span class="line">class ENGINE_API APlayerController : public AController</span><br></pre></td></tr></table></figure><p>Back to the start, there are metadata within the macro <code>UCLASS</code> such as <code>config=Game</code>, <code>BlueprintType</code> and <code>meta=...</code>. We are going to check out how they are handled by UnrealEngine.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Runtime/CoreUObject/Public/UObject/ObjectMacros.h</span><br><span class="line"></span><br><span class="line"><span class="comment">// These are used for syntax highlighting and to allow autocomplete hints</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> UC</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// valid keywords for the UCLASS macro</span></span><br><span class="line"><span class="keyword">enum</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/// This keyword is used to set the actor group that the class is show in, in the editor.</span></span><br><span class="line">classGroup,</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Declares that instances of this class should always have an outer of the specified class.  This is inherited by subclasses unless overridden.</span></span><br><span class="line">Within, <span class="comment">/* =OuterClassName */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Exposes this class as a type that can be used for variables in blueprints</span></span><br><span class="line">BlueprintType,</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Prevents this class from being used for variables in blueprints</span></span><br><span class="line">NotBlueprintType,</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Exposes this class as an acceptable base class for creating blueprints. The default is NotBlueprintable, unless inherited otherwise. This is inherited by subclasses.</span></span><br><span class="line">Blueprintable,</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Specifies that this class is *NOT* an acceptable base class for creating blueprints. The default is NotBlueprintable, unless inherited otherwise. This is inherited by subclasses.</span></span><br><span class="line">NotBlueprintable,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>You can find some enum definitions seems related to the metadata. But, they are for only supporting autocomplete hints such as Intellisense and VisualAssistX. There is another code handling metadata.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Programs/UnrealHeader/Private/CodeGenerator.cpp</span><br><span class="line"></span><br><span class="line">const TArray&lt;FString&gt;&amp; UObjectHeaders =</span><br><span class="line">(CurrentlyProcessing == PublicClassesHeaders) ? Module.PublicUObjectClassesHeaders :</span><br><span class="line">(CurrentlyProcessing == PublicHeaders       ) ? Module.PublicUObjectHeaders        :</span><br><span class="line">Module.PrivateUObjectHeaders;</span><br><span class="line">...</span><br><span class="line">ParallelFor(UObjectHeaders.Num(), [&amp;](int32 Index)</span><br><span class="line">&#123;</span><br><span class="line">const FString&amp; RawFilename = UObjectHeaders[Index];</span><br><span class="line"></span><br><span class="line">#if !PLATFORM_EXCEPTIONS_DISABLED</span><br><span class="line">try</span><br><span class="line">#endif</span><br><span class="line">&#123;</span><br><span class="line">PerformSimplifiedClassParse(Package, *RawFilename, *HeaderFiles[Index], PerHeaderData[Index]);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="/2021/08/06/how-unreal-macro-generated/04.png" class=""><p>This code is for parsing metadata. Any header file in your project is passed through the parsing.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static void SetupUObjectModuleHeader(UHTModuleInfo ModuleInfo, FileItem HeaderFile, SourceFileMetadataCache MetadataCache)</span><br><span class="line">&#123;</span><br><span class="line">// Check to see if we know anything about this file.  If we have up-to-date cached information about whether it has</span><br><span class="line">// UObjects or not, we can skip doing a test here.</span><br><span class="line">if (MetadataCache.ContainsReflectionMarkup(HeaderFile))</span><br><span class="line">&#123;</span><br><span class="line">lock(ModuleInfo)</span><br><span class="line">&#123;</span><br><span class="line">bool bFoundHeaderLocation = false;</span><br><span class="line">foreach (DirectoryReference ModuleDirectory in ModuleInfo.ModuleDirectories)</span><br><span class="line">&#123;</span><br><span class="line">if (HeaderFile.Location.IsUnderDirectory(DirectoryReference.Combine(ModuleDirectory, &quot;Classes&quot;)))</span><br><span class="line">&#123;</span><br><span class="line">ModuleInfo.PublicUObjectClassesHeaders.Add(HeaderFile);</span><br><span class="line">bFoundHeaderLocation = true;</span><br><span class="line">&#125;</span><br><span class="line">else if (HeaderFile.Location.IsUnderDirectory(DirectoryReference.Combine(ModuleDirectory, &quot;Public&quot;)))</span><br><span class="line">&#123;</span><br><span class="line">ModuleInfo.PublicUObjectHeaders.Add(HeaderFile);</span><br><span class="line">bFoundHeaderLocation = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!bFoundHeaderLocation)</span><br><span class="line">&#123;</span><br><span class="line">ModuleInfo.PrivateUObjectHeaders.Add(HeaderFile);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>About all modules, header files in <code>Classes</code> folder are stored at <code>PublicUObjectClassesHeaders</code> and header files in <code>Public</code> folder are stored at <code>PublicUObjectHeaders</code>. Even you have located a header file in other folder, the <code>Unreal Build Tool</code> collects it into <code>PrivateUObjectHeaders</code>.</p><img src="/2021/08/06/how-unreal-macro-generated/05.png" class=""><p>A screenshot on debugging UBT.</p><p>Back to the <code>FBaseParser::ReadSpecifierSetInsideMacro()</code>, let us test with the keyword <code>BlueprintType</code>. How does the <code>BlueprintType</code> keyword parsed ? The UHT parses your header file with tokens. Suppose the input as <code>UCLASS(config=Game, BlueprintType, Blueprintable, meta=(...))</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/UnrealEngine/Engine/Source/Programs/UnrealHeaderTool/Private/HeaderParser.cpp</span><br><span class="line"></span><br><span class="line">if (Token.Matches(TEXT(&quot;UCLASS&quot;), ESearchCase::CaseSensitive))</span><br><span class="line">&#123;</span><br><span class="line">bHaveSeenUClass = true;</span><br><span class="line">bEncounteredNewStyleClass_UnmatchedBrackets = true;</span><br><span class="line">UClass* Class = CompileClassDeclaration(AllClasses);</span><br><span class="line">GStructToSourceLine.Add(Class, MakeTuple(GetCurrentSourceFile()-&gt;AsShared(), Token.StartLine));</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Due to this code, the left input would be <code>(config=Game, BlueprintType, Blueprintable, meta=(...))</code>. And, the following tokenizing is like below based on <code>FBaseParser::ReadSpecifierSetInsideMacro()</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(config=Game, BlueprintType, Blueprintable, meta=(...))</span><br><span class="line">-&gt; RequireSymbol(TEXT(&#x27;(&#x27;), ErrorMessageGetter);</span><br><span class="line">config=Game, BlueprintType, Blueprintable, meta=(...))</span><br><span class="line">-&gt; GetToken(Specifier); SpecifiersFound.Emplace(Specifier.Identifier);</span><br><span class="line">, BlueprintType, Blueprintable, meta=(...))</span><br><span class="line">-&gt; RequireSymbol(TEXT(&#x27;,&#x27;), ErrorMessageGetter);</span><br><span class="line">BlueprintType, Blueprintable, meta=(...))</span><br><span class="line">-&gt; GetToken(Specifier); GetMetadataKeyword(Specifier.Identifier);</span><br><span class="line">, Blueprintable, meta=(...))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><img src="/2021/08/06/how-unreal-macro-generated/06.png" class=""><p>A screenshot on debugging UHT.</p><h1 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap-Up"></a><em>Wrap-Up</em></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C/CPP (pure) macro</span><br><span class="line">C/CPP code with macro ---(preprocessor)---&gt;</span><br><span class="line">C/CPP code with evaluated code from macro ---(rest of job)---&gt; ...</span><br><span class="line"></span><br><span class="line">unreal macro</span><br><span class="line">C/CPP code with unreal macro ---(UHT and UBT)---&gt;</span><br><span class="line">C/CPP code with generated code(+macro) from UHT and UBT ---(preprocessor)---&gt;</span><br><span class="line">C/CPP code with evaluated code from macro ---(rest of job)---&gt; ...</span><br></pre></td></tr></table></figure><p>There are so many hidden code for implementing unreal macros, and the macros have complicated relationship with other engine code. Even most part of final code from the macros cannot be evaluated before some preprocessing and compilation. In this perspective, unreal macro such as <code>UCLASS</code> is not a pure C&#x2F;CPP macro, because unreal macro functions fully only when UHT and UBT must preprocess the macro.</p><img src="/2021/08/06/how-unreal-macro-generated/07.png" class=""><p>There is no doubt. Any of C&#x2F;CPP compiler cannot recognize the unreal macro such as <code>UCLASS</code>. Even the Epic Games did not modify the compilers, and did not have to do. They have simply setup some build pipeline satisfying their needs. The program managing their custom build pipeline is the <code>Unreal Build Tool</code>, UBT. Most of jobs for build are done by UBT and UHT. In <a href="https://docs.unrealengine.com/4.26/en-US/ProductionPipelines/BuildTools/UnrealHeaderTool/">official document for UHT</a>, these background knowledge is introduced.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UnrealHeaderTool (UHT) is a custom parsing and code-generation tool that supports the UObject system. Code compilation happens in two phases:</span><br><span class="line"></span><br><span class="line">1. UHT is invoked, which parses the C++ headers for Unreal-related class metadata and generates custom code to implement the various UObject-related features.</span><br><span class="line">2. The normal C++ compiler is invoked to compile the results.</span><br><span class="line"></span><br><span class="line">When compiling, it is possible for either tool to emit errors, so be sure to look carefully.</span><br></pre></td></tr></table></figure><p>As they said, the compilation order is the opposite direction of the paragraphs; <code>Expanding UCLASS</code>, <code>Generated Header File</code> and <code>Metadata Parser</code>. The actions for <code>Expanding UCLASS</code> are done by C&#x2F;CPP compilers(+preprocessors), and the actions for <code>Generated Header File</code> and <code>Metadata Parser</code> are done by UHT. Additionally, actions for <code>Metadata Parser</code> happens early than ones for <code>Generated Header File</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main function for parsing metadata -&gt; FHeaderParser::ParseHeaders()</span><br><span class="line">main function for generating header file -&gt; FHeaderParser::ExportNativeHeaders()</span><br></pre></td></tr></table></figure><img src="/2021/08/06/how-unreal-macro-generated/08.png" class=""><p>Let us make a conclusion.</p><ul><li>The result from unreal macro is hard to evaluate before processing by UBT(+UHT).</li><li>Some features of UnrealEngine are implemented by auto-generated codes.</li><li>You should look into the build pipeline of UnrealEngine if need to modify unreal macro things.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Environment&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;UnrealEngine&lt;/td&gt;
&lt;td&gt;&lt;code&gt;branch: ue5-early-access&lt;/cod</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
  </entry>
  
  <entry>
    <title>Growth of std::vector</title>
    <link href="https://baemincheon.github.io/2021/05/16/cpp-std-vector-growth/"/>
    <id>https://baemincheon.github.io/2021/05/16/cpp-std-vector-growth/</id>
    <published>2021-05-16T12:35:54.000Z</published>
    <updated>2021-05-16T12:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><em><code>Overview</code></em></h3><p>Nowadays, STL is an essential component in almost every CPP project. That is why several questions about STL are asked in a technical interview. Especially, the <code>std::vector</code> is a popular subject. In this post, we gonna check the codes related to <code>std::vector</code>‘s growth, which is a hot topic in STL.<br>The term “growth” in <code>std::vector</code> means an event to increase a size of instance by some actions. The action would be inserting an element (e.g. <code>push_back()</code>) or tuning its size (e.g. <code>resize()</code>). Some of us say “When the growth happens, its size become twice.”, but some of others say “No, it is exactly 3&#x2F;2 times.”. Well…both of saying are not wrong. Let us find out why it is.</p><p>The environment is below:</p><ul><li>MSVC<ul><li>Windows 10 <code>2004 OS Build 19041.985</code></li><li>MSVC <code>19.28.29914</code></li></ul></li><li>GCC<ul><li>Ubuntu 18 <code>18.04.4 LTS</code></li><li>GCC <code>7.5.0</code></li></ul></li></ul><p>The reference is below:</p><ul><li><a href="https://en.cppreference.com/w/cpp/container/vector">https://en.cppreference.com/w/cpp/container/vector</a></li><li><a href="https://github.com/microsoft/STL/blob/f17f2e72001f570cb6fe5a6e1c0c32fcc90ee53a/stl/inc/vector">https://github.com/microsoft/STL/blob/f17f2e72001f570cb6fe5a6e1c0c32fcc90ee53a/stl/inc/vector</a></li><li><a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_vector.h">https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_vector.h</a></li></ul><h3 id="Growth-in-MSVC"><a href="#Growth-in-MSVC" class="headerlink" title="Growth in MSVC"></a><em><code>Growth in MSVC</code></em></h3><p>First, let us trace codes about <code>push_back()</code>. Suppose we use a code below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Number = <span class="number">0</span>;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; Instance;</span><br><span class="line">Instance.<span class="built_in">push_back</span>(Number);</span><br></pre></td></tr></table></figure><p>The function below will be called in this code. You can find all of STL codes for MSVC at <a href="https://github.com/microsoft/STL/blob/f17f2e72001f570cb6fe5a6e1c0c32fcc90ee53a/stl/inc/vector">reference #2</a>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_CONSTEXPR20_CONTAINER <span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> _Ty&amp; _Val)</span> </span>&#123; <span class="comment">// insert element at end, provide strong guarantee</span></span><br><span class="line">    <span class="built_in">emplace_back</span>(_Val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Valty&gt;</span><br><span class="line"><span class="function">_CONSTEXPR20_CONTAINER <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">emplace_back</span><span class="params">(_Valty&amp;&amp;... _Val)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// insert by perfectly forwarding into element at end, provide strong guarantee</span></span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data   = _Mypair._Myval2;</span><br><span class="line">    pointer&amp; _Mylast = _My_data._Mylast;</span><br><span class="line">    <span class="keyword">if</span> (_Mylast != _My_data._Myend) &#123;</span><br><span class="line">        <span class="keyword">return</span> _Emplace_back_with_unused_capacity(_STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _Ty&amp; _Result = *_Emplace_reallocate(_Mylast, _STD forward&lt;_Valty&gt;(_Val)...);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _HAS_CXX17</span></span><br><span class="line">    <span class="keyword">return</span> _Result;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv</span></span></span><br><span class="line">    (<span class="type">void</span>) _Result;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _HAS_CXX17</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, there is a branch on returning the function. When <code>_Mylast != _My_data._Myend</code> is true, the growth not happens. Because the logic in the <code>_Emplace_back_with_unused_capacity()</code> does not reallocate memory, but reuse unused memory. FYI, values about <code>_Mypair</code> have the relationship like below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_Compressed_pair&lt;_Alty, _Scary_val&gt; _Mypair;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/microsoft/STL/blob/c12089e489c7b6a3896f5043ed545ac8d1870590/stl/inc/xmemory</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty1</span>, <span class="keyword">class</span> <span class="title class_">_Ty2</span>, <span class="type">bool</span> = is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> _Compressed_pair <span class="keyword">final</span> : <span class="keyword">private</span> _Ty1 &#123; <span class="comment">// store a pair of values, deriving from empty first</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    _Ty2 _Myval2;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CLASS TEMPLATE vector</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_Alloc</span> = allocator&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> vector &#123; <span class="comment">// varying size array of values</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">class</span>&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> _Vb_val;</span><br><span class="line">    <span class="keyword">friend</span> _Tidy_guard&lt;vector&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> _Alty        = _Rebind_alloc_t&lt;_Alloc, _Ty&gt;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">using</span> _Scary_val = _Vector_val&lt;<span class="type">conditional_t</span>&lt;_Is_simple_alloc_v&lt;_Alty&gt;, _Simple_types&lt;_Ty&gt;,</span><br><span class="line">        _Vec_iter_types&lt;_Ty, size_type, difference_type, pointer, const_pointer, _Ty&amp;, <span class="type">const</span> _Ty&amp;&gt;&gt;&gt;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CLASS TEMPLATE _Vector_val</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Val_types</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Vector_val</span> : <span class="keyword">public</span> _Container_base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> value_type      = <span class="keyword">typename</span> _Val_types::value_type;</span><br><span class="line">    <span class="keyword">using</span> size_type       = <span class="keyword">typename</span> _Val_types::size_type;</span><br><span class="line">    <span class="keyword">using</span> difference_type = <span class="keyword">typename</span> _Val_types::difference_type;</span><br><span class="line">    <span class="keyword">using</span> pointer         = <span class="keyword">typename</span> _Val_types::pointer;</span><br><span class="line">    <span class="keyword">using</span> const_pointer   = <span class="keyword">typename</span> _Val_types::const_pointer;</span><br><span class="line">    <span class="keyword">using</span> reference       = value_type&amp;;</span><br><span class="line">    <span class="keyword">using</span> const_reference = <span class="type">const</span> value_type&amp;;</span><br><span class="line"></span><br><span class="line">    _CONSTEXPR20_CONTAINER _Vector_val() <span class="keyword">noexcept</span> : _Myfirst(), _Mylast(), _Myend() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    _CONSTEXPR20_CONTAINER _Vector_val(pointer _First, pointer _Last, pointer _End) <span class="keyword">noexcept</span></span><br><span class="line">        : _Myfirst(_First), _Mylast(_Last), _Myend(_End) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    _CONSTEXPR20_CONTAINER <span class="type">void</span> _Swap_val(_Vector_val&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_Swap_proxy_and_iterators(_Right);</span><br><span class="line">        _Swap_adl(_Myfirst, _Right._Myfirst);</span><br><span class="line">        _Swap_adl(_Mylast, _Right._Mylast);</span><br><span class="line">        _Swap_adl(_Myend, _Right._Myend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _CONSTEXPR20_CONTAINER <span class="type">void</span> _Take_contents(_Vector_val&amp; _Right) <span class="keyword">noexcept</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_Swap_proxy_and_iterators(_Right);</span><br><span class="line">        _Myfirst = _Right._Myfirst;</span><br><span class="line">        _Mylast  = _Right._Mylast;</span><br><span class="line">        _Myend   = _Right._Myend;</span><br><span class="line"></span><br><span class="line">        _Right._Myfirst = <span class="literal">nullptr</span>;</span><br><span class="line">        _Right._Mylast  = <span class="literal">nullptr</span>;</span><br><span class="line">        _Right._Myend   = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pointer _Myfirst; <span class="comment">// pointer to beginning of array</span></span><br><span class="line">    pointer _Mylast; <span class="comment">// pointer to current end of sequence</span></span><br><span class="line">    pointer _Myend; <span class="comment">// pointer to end of array</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Since the elements are placed in sequential memory address, <code>_Mylast - _Myfirst</code> means “currently used size”.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_NODISCARD _CONSTEXPR20_CONTAINER size_type <span class="title">size</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data = _Mypair._Myval2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;size_type&gt;(_My_data._Mylast - _My_data._Myfirst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similarly, <code>_Myend - _Myfirst</code> means “currently avaiable size”.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_NODISCARD _CONSTEXPR20_CONTAINER size_type <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data = _Mypair._Myval2;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;size_type&gt;(_My_data._Myend - _My_data._Myfirst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As a result, <code>_Mylast != _My_data._Myend</code> is true when <code>_Mylast &lt; _Myend</code> is true. That is why reallocation not happens. Get back to <code>emplace_back()</code> code. According to those upper reasons, now we need to focus on <code>_Emplace_reallocated()</code> function.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span>... _Valty&gt;</span><br><span class="line">_CONSTEXPR20_CONTAINER pointer _Emplace_reallocate(<span class="type">const</span> pointer _Whereptr, _Valty&amp;&amp;... _Val) &#123;</span><br><span class="line">    <span class="comment">// reallocate and insert by perfectly forwarding _Val at _Whereptr</span></span><br><span class="line">    _Alty&amp; _Al        = _Getal();</span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data    = _Mypair._Myval2;</span><br><span class="line">    pointer&amp; _Myfirst = _My_data._Myfirst;</span><br><span class="line">    pointer&amp; _Mylast  = _My_data._Mylast;</span><br><span class="line"></span><br><span class="line">    _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); <span class="comment">// check that we have no unused capacity</span></span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Whereoff = <span class="built_in">static_cast</span>&lt;size_type&gt;(_Whereptr - _Myfirst);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Oldsize  = <span class="built_in">static_cast</span>&lt;size_type&gt;(_Mylast - _Myfirst);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Oldsize == <span class="built_in">max_size</span>()) &#123;</span><br><span class="line">        _Xlength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> size_type _Newsize     = _Oldsize + <span class="number">1</span>;</span><br><span class="line">    <span class="type">const</span> size_type _Newcapacity = _Calculate_growth(_Newsize);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> pointer _Newvec           = _Al.<span class="built_in">allocate</span>(_Newcapacity);</span><br><span class="line">    <span class="type">const</span> pointer _Constructed_last = _Newvec + _Whereoff + <span class="number">1</span>;</span><br><span class="line">    pointer _Constructed_first      = _Constructed_last;</span><br><span class="line"></span><br><span class="line">    <span class="function">_TRY_BEGIN</span></span><br><span class="line"><span class="function">    <span class="title">_Alty_traits::construct</span><span class="params">(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward&lt;_Valty&gt;(_Val)...)</span></span>;</span><br><span class="line">    _Constructed_first = _Newvec + _Whereoff;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Whereptr == _Mylast) &#123; <span class="comment">// at back, provide strong guarantee</span></span><br><span class="line">        _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// provide basic guarantee</span></span><br><span class="line">        _Umove(_Myfirst, _Whereptr, _Newvec);</span><br><span class="line">        _Constructed_first = _Newvec;</span><br><span class="line">        _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _CATCH_ALL</span><br><span class="line">    _Destroy(_Constructed_first, _Constructed_last);</span><br><span class="line">    _Al.<span class="built_in">deallocate</span>(_Newvec, _Newcapacity);</span><br><span class="line">    _RERAISE;</span><br><span class="line">    _CATCH_END</span><br><span class="line"></span><br><span class="line">    _Change_array(_Newvec, _Newsize, _Newcapacity);</span><br><span class="line">    <span class="keyword">return</span> _Newvec + _Whereoff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see the codes, deallocation and reallocation happen. The variable <code>_Newcapacity</code> determines the size of memory will be reallocated. Let us check the function <code>_Calculate_growth()</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_NODISCARD _CONSTEXPR20_CONTAINER size_type <span class="title">max_size</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (_STD min)(</span><br><span class="line">        <span class="built_in">static_cast</span>&lt;size_type&gt;((numeric_limits&lt;difference_type&gt;::max)()), _Alty_traits::<span class="built_in">max_size</span>(_Getal()));</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">_CONSTEXPR20_CONTAINER size_type _Calculate_growth(<span class="type">const</span> size_type _Newsize) <span class="type">const</span> &#123;</span><br><span class="line">    <span class="comment">// given _Oldcapacity and _Newsize, calculate geometric growth</span></span><br><span class="line">    <span class="type">const</span> size_type _Oldcapacity = <span class="built_in">capacity</span>();</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Max              = <span class="built_in">max_size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Oldcapacity &gt; _Max - _Oldcapacity / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _Max; <span class="comment">// geometric growth would overflow</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> size_type _Geometric = _Oldcapacity + _Oldcapacity / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Geometric &lt; _Newsize) &#123;</span><br><span class="line">        <span class="keyword">return</span> _Newsize; <span class="comment">// geometric growth would be insufficient</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _Geometric; <span class="comment">// geometric growth is sufficient</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are three return statement in the function.</p><ul><li>First, when the current available size is bigger than 2&#x2F;3 times of maximum size.</li></ul><p>For instance, a maximum value of <code>int</code> type is <code>+2,147,483,647</code> and 2&#x2F;3 times of value is <code>+1,431,655,764.666... ≒ +1,431,655,765</code>. Let us put them in the expression. <code>if (1431655765 &gt; 2147483647 - 1431655765 / 2)</code> will be false, but how about if <code>_Oldcapacity = +1,431,655,766</code> ? <code>if (1431655766 &gt; 2147483647 - 1431655766 / 2)</code> will be true. In this case, new size will be forced as the maximum size.</p><ul><li>Second, when the current available size is less than <code>2</code>.</li></ul><p>For instance, when the <code>_Oldcapacity</code> is in <code>&#123;0, 1&#125;</code> the expression <code>const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;</code> will be the same with <code>_Oldcapacity</code>. In this case, new size will be forced as <code>_Newsize</code>, which is passed by <code>_Oldsize + 1</code> in <code>_Emplace_reallocate()</code>.</p><table><thead><tr><th><code>_Oldcapacity</code></th><th>Calculation</th></tr></thead><tbody><tr><td>0</td><td>0 + 0 &#x2F; 2 &#x3D; 0</td></tr><tr><td>1</td><td>1 + 1 &#x2F; 2 &#x3D; 1</td></tr></tbody></table><ul><li>Third, other cases of the current available size.</li></ul><p>The <code>_Geometric</code> will have 3&#x2F;2 times of <code>_Oldcapacity</code>. That is why the 3&#x2F;2 times of growth happens in MSVC. And now you understand why new size has to be set by maximum value when the <code>_Oldcapacity</code> is bigger than 2&#x2F;3 times of maximum size.</p><p>The <code>resize()</code> has a similar flow. Let us find out.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_CONSTEXPR20_CONTAINER <span class="type">void</span> <span class="title">resize</span><span class="params">(_CRT_GUARDOVERFLOW <span class="type">const</span> size_type _Newsize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// trim or append value-initialized elements, provide strong guarantee</span></span><br><span class="line">    _Resize(_Newsize, _Value_init_tag&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty2</span>&gt;</span><br><span class="line">_CONSTEXPR20_CONTAINER <span class="type">void</span> _Resize(<span class="type">const</span> size_type _Newsize, <span class="type">const</span> _Ty2&amp; _Val) &#123;</span><br><span class="line">    <span class="comment">// trim or append elements, provide strong guarantee</span></span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data      = _Mypair._Myval2;</span><br><span class="line">    pointer&amp; _Myfirst   = _My_data._Myfirst;</span><br><span class="line">    pointer&amp; _Mylast    = _My_data._Mylast;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Oldsize = <span class="built_in">static_cast</span>&lt;size_type&gt;(_Mylast - _Myfirst);</span><br><span class="line">    <span class="keyword">if</span> (_Newsize &lt; _Oldsize) &#123; <span class="comment">// trim</span></span><br><span class="line">        <span class="type">const</span> pointer _Newlast = _Myfirst + _Newsize;</span><br><span class="line">        _Orphan_range(_Newlast, _Mylast);</span><br><span class="line">        _Destroy(_Newlast, _Mylast);</span><br><span class="line">        _Mylast = _Newlast;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_Newsize &gt; _Oldsize) &#123; <span class="comment">// append</span></span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> _Oldcapacity = <span class="built_in">static_cast</span>&lt;size_type&gt;(_My_data._Myend - _Myfirst);</span><br><span class="line">        <span class="keyword">if</span> (_Newsize &gt; _Oldcapacity) &#123; <span class="comment">// reallocate</span></span><br><span class="line">            _Resize_reallocate(_Newsize, _Val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> pointer _Oldlast = _Mylast;</span><br><span class="line">        _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);</span><br><span class="line">        _Orphan_range(_Oldlast, _Oldlast);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if _Newsize == _Oldsize, do nothing; avoid invalidating iterators</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>resize()</code> can trim or append available memory. Trimming happens when you call <code>resize()</code> with smaller value than current available size. Appending happens when you call <code>resize()</code> with greater value than current available size. We go to <code>_Resize_reallocate()</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">_Ty2</span>&gt;</span><br><span class="line">_CONSTEXPR20_CONTAINER <span class="type">void</span> _Resize_reallocate(<span class="type">const</span> size_type _Newsize, <span class="type">const</span> _Ty2&amp; _Val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_Newsize &gt; <span class="built_in">max_size</span>()) &#123;</span><br><span class="line">        _Xlength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span>&amp; _My_data    = _Mypair._Myval2;</span><br><span class="line">    pointer&amp; _Myfirst = _My_data._Myfirst;</span><br><span class="line">    pointer&amp; _Mylast  = _My_data._Mylast;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> _Oldsize          = <span class="built_in">static_cast</span>&lt;size_type&gt;(_Mylast - _Myfirst);</span><br><span class="line">    <span class="type">const</span> size_type _Newcapacity = _Calculate_growth(_Newsize);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> pointer _Newvec         = _Getal().<span class="built_in">allocate</span>(_Newcapacity);</span><br><span class="line">    <span class="type">const</span> pointer _Appended_first = _Newvec + _Oldsize;</span><br><span class="line">    pointer _Appended_last        = _Appended_first;</span><br><span class="line"></span><br><span class="line">    _TRY_BEGIN</span><br><span class="line">    _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);</span><br><span class="line">    _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);</span><br><span class="line">    _CATCH_ALL</span><br><span class="line">    _Destroy(_Appended_first, _Appended_last);</span><br><span class="line">    _Getal().<span class="built_in">deallocate</span>(_Newvec, _Newcapacity);</span><br><span class="line">    _RERAISE;</span><br><span class="line">    _CATCH_END</span><br><span class="line"></span><br><span class="line">    _Change_array(_Newvec, _Newsize, _Newcapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Oh, Hi. We meet again. It is him, the <code>_Calculate_growth()</code>. Now we know the <code>resize()</code> has a similar logic.</p><h3 id="Growth-in-GCC"><a href="#Growth-in-GCC" class="headerlink" title="Growth in GCC"></a><em><code>Growth in GCC</code></em></h3><p>First of all, let us find <code>push_back()</code> in GCC. Suppose we use the example written at MSVC part. You can find the code at <a href="https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_vector.h">reference #3</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [23.2.4.3] modifiers</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  @brief  Add data to the end of the %vector.</span></span><br><span class="line"><span class="comment">*  @param  __x  Data to be added.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  This is a typical stack operation.  The function creates an</span></span><br><span class="line"><span class="comment">*  element at the end of the %vector and assigns the given data</span></span><br><span class="line"><span class="comment">*  to it.  Due to the nature of a %vector this operation can be</span></span><br><span class="line"><span class="comment">*  done in constant time if the %vector has preallocated space</span></span><br><span class="line"><span class="comment">*  available.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">push_back</span><span class="params">(<span class="type">const</span> value_type&amp; __x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;_M_impl._M_finish != <span class="keyword">this</span>-&gt;_M_impl._M_end_of_storage)</span><br><span class="line">    &#123;</span><br><span class="line">        _GLIBCXX_ASAN_ANNOTATE_GROW(<span class="number">1</span>);</span><br><span class="line">        _Alloc_traits::<span class="built_in">construct</span>(<span class="keyword">this</span>-&gt;_M_impl, <span class="keyword">this</span>-&gt;_M_impl._M_finish,</span><br><span class="line">                        __x);</span><br><span class="line">        ++<span class="keyword">this</span>-&gt;_M_impl._M_finish;</span><br><span class="line">        _GLIBCXX_ASAN_ANNOTATE_GREW(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        _M_realloc_insert(<span class="built_in">end</span>(), __x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here are two cases. First, when an available memory exists. Second, otherwise.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_Vector_impl_data</span></span><br><span class="line">&#123;</span><br><span class="line">    pointer _M_start;</span><br><span class="line">    pointer _M_finish;</span><br><span class="line">    pointer _M_end_of_storage;</span><br><span class="line"></span><br><span class="line">    _Vector_impl_data() _GLIBCXX_NOEXCEPT</span><br><span class="line">    : _M_start(), _M_finish(), _M_end_of_storage()</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">    _Vector_impl_data(_Vector_impl_data&amp;&amp; __x) <span class="keyword">noexcept</span></span><br><span class="line">    : _M_start(__x._M_start), _M_finish(__x._M_finish),</span><br><span class="line">        _M_end_of_storage(__x._M_end_of_storage)</span><br><span class="line">    &#123; __x._M_start = __x._M_finish = __x._M_end_of_storage = <span class="built_in">pointer</span>(); &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">void</span></span><br><span class="line">    _M_copy_data(_Vector_impl_data <span class="type">const</span>&amp; __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">        _M_start = __x._M_start;</span><br><span class="line">        _M_finish = __x._M_finish;</span><br><span class="line">        _M_end_of_storage = __x._M_end_of_storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span></span><br><span class="line">    _M_swap_data(_Vector_impl_data&amp; __x) _GLIBCXX_NOEXCEPT</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Do not use std::swap(_M_start, __x._M_start), etc as it loses</span></span><br><span class="line">        <span class="comment">// information used by TBAA.</span></span><br><span class="line">        _Vector_impl_data __tmp;</span><br><span class="line">        __tmp._M_copy_data(*<span class="keyword">this</span>);</span><br><span class="line">        _M_copy_data(__x);</span><br><span class="line">        __x._M_copy_data(__tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">_Vector_impl _M_impl;</span><br></pre></td></tr></table></figure><p><code>std::vector</code> in GCC has internal indicators like <code>std::vector</code> in MSVC. So we should focus on <code>_M_realloc_insert()</code> function.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Alloc&gt;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span>... _Args&gt;</span><br><span class="line">    <span class="type">void</span></span><br><span class="line">    vector&lt;_Tp, _Alloc&gt;::</span><br><span class="line">    _M_realloc_insert(iterator __position, _Args&amp;&amp;... __args)</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Alloc&gt;</span><br><span class="line">    <span class="type">void</span></span><br><span class="line">    vector&lt;_Tp, _Alloc&gt;::</span><br><span class="line">    _M_realloc_insert(iterator __position, <span class="type">const</span> _Tp&amp; __x)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> size_type __len =</span><br><span class="line">        _M_check_len(<span class="built_in">size_type</span>(<span class="number">1</span>), <span class="string">&quot;vector::_M_realloc_insert&quot;</span>);</span><br><span class="line">    pointer __old_start = <span class="keyword">this</span>-&gt;_M_impl._M_start;</span><br><span class="line">    pointer __old_finish = <span class="keyword">this</span>-&gt;_M_impl._M_finish;</span><br><span class="line">    <span class="type">const</span> size_type __elems_before = __position - <span class="built_in">begin</span>();</span><br><span class="line">    pointer __new_start(<span class="keyword">this</span>-&gt;_M_allocate(__len));</span><br><span class="line">    pointer __new_finish(__new_start);</span><br><span class="line">    __try</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The order of the three operations is dictated by the C++11</span></span><br><span class="line">        <span class="comment">// case, where the moves could alter a new element belonging</span></span><br><span class="line">        <span class="comment">// to the existing vector.  This is an issue only for callers</span></span><br><span class="line">        <span class="comment">// taking the element by lvalue ref (see last bullet of C++11</span></span><br><span class="line">        <span class="comment">// [res.on.arguments]).</span></span><br><span class="line">        _Alloc_traits::<span class="built_in">construct</span>(<span class="keyword">this</span>-&gt;_M_impl,</span><br><span class="line">                    __new_start + __elems_before,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">                    std::forward&lt;_Args&gt;(__args)...);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">                    __x);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        __new_finish = <span class="built_in">pointer</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">        <span class="keyword">if</span> _GLIBCXX17_CONSTEXPR (_S_use_relocate())</span><br><span class="line">        &#123;</span><br><span class="line">            __new_finish = _S_relocate(__old_start, __position.<span class="built_in">base</span>(),</span><br><span class="line">                        __new_start, _M_get_Tp_allocator());</span><br><span class="line"></span><br><span class="line">            ++__new_finish;</span><br><span class="line"></span><br><span class="line">            __new_finish = _S_relocate(__position.<span class="built_in">base</span>(), __old_finish,</span><br><span class="line">                        __new_finish, _M_get_Tp_allocator());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            __new_finish</span><br><span class="line">        = std::__uninitialized_move_if_noexcept_a</span><br><span class="line">        (__old_start, __position.<span class="built_in">base</span>(),</span><br><span class="line">            __new_start, _M_get_Tp_allocator());</span><br><span class="line"></span><br><span class="line">            ++__new_finish;</span><br><span class="line"></span><br><span class="line">            __new_finish</span><br><span class="line">        = std::__uninitialized_move_if_noexcept_a</span><br><span class="line">        (__position.<span class="built_in">base</span>(), __old_finish,</span><br><span class="line">            __new_finish, _M_get_Tp_allocator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        __catch(...)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!__new_finish)</span><br><span class="line">        _Alloc_traits::<span class="built_in">destroy</span>(<span class="keyword">this</span>-&gt;_M_impl,</span><br><span class="line">                    __new_start + __elems_before);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());</span><br><span class="line">        _M_deallocate(__new_start, __len);</span><br><span class="line">        __throw_exception_again;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">        <span class="keyword">if</span> _GLIBCXX17_CONSTEXPR (!_S_use_relocate())</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());</span><br><span class="line">        _GLIBCXX_ASAN_ANNOTATE_REINIT;</span><br><span class="line">        _M_deallocate(__old_start,</span><br><span class="line">            <span class="keyword">this</span>-&gt;_M_impl._M_end_of_storage - __old_start);</span><br><span class="line">        <span class="keyword">this</span>-&gt;_M_impl._M_start = __new_start;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_M_impl._M_finish = __new_finish;</span><br><span class="line">        <span class="keyword">this</span>-&gt;_M_impl._M_end_of_storage = __new_start + __len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hoo, it is too long. We do not have to look into whole code, but the variable <code>__len</code>. The variable is used for reallocation. And it is set by <code>_M_check_len()</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called by _M_fill_insert, _M_insert_aux etc.</span></span><br><span class="line">size_type</span><br><span class="line">_M_check_len(size_type __n, <span class="type">const</span> <span class="type">char</span>* __s) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">max_size</span>() - <span class="built_in">size</span>() &lt; __n)</span><br><span class="line">        __throw_length_error(__N(__s));</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> size_type __len = <span class="built_in">size</span>() + (std::max)(<span class="built_in">size</span>(), __n);</span><br><span class="line">    <span class="keyword">return</span> (__len &lt; <span class="built_in">size</span>() || __len &gt; <span class="built_in">max_size</span>()) ? <span class="built_in">max_size</span>() : __len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code throw an error when current size is the same with maximum size because the function was called as <code>_M_check_len(size_type(1), ...)</code>. Otherwise, new size will be set by 2 times of current size. Except for when current size is <code>0</code>.</p><table><thead><tr><th>Current size</th><th>Calculation</th></tr></thead><tbody><tr><td>0</td><td>1 &#x3D; 0 + max(0, 1)</td></tr><tr><td>1</td><td>2 &#x3D; 1 + max(1, 1)</td></tr><tr><td>2</td><td>4 &#x3D; 2 + max(2, 1)</td></tr></tbody></table><p>And, returns maximum size when underflow or overflow happens. Otherwise, returns new size calculated as 2 times of current size.</p><p>Next, check the <code>resize()</code> in GCC.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  @brief  Resizes the %vector to the specified number of elements.</span></span><br><span class="line"><span class="comment">*  @param  __new_size  Number of elements the %vector should contain.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  This function will %resize the %vector to the specified</span></span><br><span class="line"><span class="comment">*  number of elements.  If the number is smaller than the</span></span><br><span class="line"><span class="comment">*  %vector&#x27;s current size the %vector is truncated, otherwise</span></span><br><span class="line"><span class="comment">*  default constructed elements are appended.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">resize</span><span class="params">(size_type __new_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__new_size &gt; <span class="built_in">size</span>())</span><br><span class="line">        _M_default_append(__new_size - <span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (__new_size &lt; <span class="built_in">size</span>())</span><br><span class="line">        _M_erase_at_end(<span class="keyword">this</span>-&gt;_M_impl._M_start + __new_size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see the <code>resize()</code> in GCC also do trimming and appending. (Interestingly, nothing happens when <code>__new_size</code> is equal to current size.) So, we should focus on <code>_M_default_append()</code> function.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Alloc&gt;</span><br><span class="line"><span class="type">void</span></span><br><span class="line">vector&lt;_Tp, _Alloc&gt;::</span><br><span class="line">_M_default_append(size_type __n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (__n != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> size_type __size = <span class="built_in">size</span>();</span><br><span class="line">        size_type __navail = <span class="built_in">size_type</span>(<span class="keyword">this</span>-&gt;_M_impl._M_end_of_storage</span><br><span class="line">                        - <span class="keyword">this</span>-&gt;_M_impl._M_finish);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__size &gt; <span class="built_in">max_size</span>() || __navail &gt; <span class="built_in">max_size</span>() - __size)</span><br><span class="line">            __builtin_unreachable();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__navail &gt;= __n)</span><br><span class="line">        &#123;</span><br><span class="line">            _GLIBCXX_ASAN_ANNOTATE_GROW(__n);</span><br><span class="line">            <span class="keyword">this</span>-&gt;_M_impl._M_finish =</span><br><span class="line">                std::__uninitialized_default_n_a(<span class="keyword">this</span>-&gt;_M_impl._M_finish,</span><br><span class="line">                            __n, _M_get_Tp_allocator());</span><br><span class="line">            _GLIBCXX_ASAN_ANNOTATE_GREW(__n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> size_type __len =</span><br><span class="line">                _M_check_len(__n, <span class="string">&quot;vector::_M_default_append&quot;</span>);</span><br><span class="line">            pointer __new_start(<span class="keyword">this</span>-&gt;_M_allocate(__len));</span><br><span class="line">            <span class="keyword">if</span> _GLIBCXX17_CONSTEXPR (_S_use_relocate())</span><br><span class="line">            &#123;</span><br><span class="line">            __try</span><br><span class="line">            &#123;</span><br><span class="line">                std::__uninitialized_default_n_a(__new_start + __size,</span><br><span class="line">                    __n, _M_get_Tp_allocator());</span><br><span class="line">            &#125;</span><br><span class="line">            __catch(...)</span><br><span class="line">            &#123;</span><br><span class="line">                _M_deallocate(__new_start, __len);</span><br><span class="line">                __throw_exception_again;</span><br><span class="line">            &#125;</span><br><span class="line">            _S_relocate(<span class="keyword">this</span>-&gt;_M_impl._M_start, <span class="keyword">this</span>-&gt;_M_impl._M_finish,</span><br><span class="line">                    __new_start, _M_get_Tp_allocator());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pointer __destroy_from = <span class="built_in">pointer</span>();</span><br><span class="line">            __try</span><br><span class="line">            &#123;</span><br><span class="line">                std::__uninitialized_default_n_a(__new_start + __size,</span><br><span class="line">                    __n, _M_get_Tp_allocator());</span><br><span class="line">                __destroy_from = __new_start + __size;</span><br><span class="line">                std::__uninitialized_move_if_noexcept_a(</span><br><span class="line">                    <span class="keyword">this</span>-&gt;_M_impl._M_start, <span class="keyword">this</span>-&gt;_M_impl._M_finish,</span><br><span class="line">                    __new_start, _M_get_Tp_allocator());</span><br><span class="line">            &#125;</span><br><span class="line">            __catch(...)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (__destroy_from)</span><br><span class="line">                    std::_Destroy(__destroy_from, __destroy_from + __n,</span><br><span class="line">                        _M_get_Tp_allocator());</span><br><span class="line">                _M_deallocate(__new_start, __len);</span><br><span class="line">                __throw_exception_again;</span><br><span class="line">            &#125;</span><br><span class="line">            std::_Destroy(<span class="keyword">this</span>-&gt;_M_impl._M_start, <span class="keyword">this</span>-&gt;_M_impl._M_finish,</span><br><span class="line">                _M_get_Tp_allocator());</span><br><span class="line">        &#125;</span><br><span class="line">            _GLIBCXX_ASAN_ANNOTATE_REINIT;</span><br><span class="line">            _M_deallocate(<span class="keyword">this</span>-&gt;_M_impl._M_start,</span><br><span class="line">                <span class="keyword">this</span>-&gt;_M_impl._M_end_of_storage</span><br><span class="line">                - <span class="keyword">this</span>-&gt;_M_impl._M_start);</span><br><span class="line">            <span class="keyword">this</span>-&gt;_M_impl._M_start = __new_start;</span><br><span class="line">            <span class="keyword">this</span>-&gt;_M_impl._M_finish = __new_start + __size + __n;</span><br><span class="line">            <span class="keyword">this</span>-&gt;_M_impl._M_end_of_storage = __new_start + __len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is long one, too. What is <code>__navail</code> ? It seems meaning of <code>Number of AVAILable memory</code>, not the <code>Not AVAILable memory</code>. So, we can see the memory is reused when <code>if (__navail &gt;= __n)</code> is true. Otherwise, reallocation happens. Oh, Hi. We meet <code>_M_check_len()</code> again. Then, new size will be 2 times of current size.</p><h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap-up"></a><em><code>Wrap-up</code></em></h3><p>Common</p><ul><li>Try to recycle memory as possible as can. (e.g. reuse available memory in <code>push_back()</code> logic.)</li><li>Care about underflow and overflow.</li><li>Have internal indicators for <code>&#123;First, Current, End&#125;</code><ul><li>Currently allocated size &#x3D; <code>End - First</code></li><li>Currently used size &#x3D; <code>Current - First</code></li><li>Currently available size &#x3D; <code>End - Current</code></li></ul></li></ul><p>MSVC</p><ul><li>Growth happens with 3&#x2F;2 times of amount. (in normal case)</li></ul><p>GCC</p><ul><li>Growth happens with 2 times of amount. (in normal case)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;&lt;em&gt;&lt;code&gt;Overview&lt;/code&gt;&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;Nowadays, STL is an esse</summary>
      
    
    
    
    
    <category term="CPP" scheme="https://baemincheon.github.io/tags/CPP/"/>
    
    <category term="MSVC" scheme="https://baemincheon.github.io/tags/MSVC/"/>
    
    <category term="GCC" scheme="https://baemincheon.github.io/tags/GCC/"/>
    
    <category term="STL" scheme="https://baemincheon.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Differences between Build.cs and Target.cs in UnrealEngine</title>
    <link href="https://baemincheon.github.io/2021/04/07/difference-between-build-cs-and-target-cs/"/>
    <id>https://baemincheon.github.io/2021/04/07/difference-between-build-cs-and-target-cs/</id>
    <published>2021-04-07T13:52:46.000Z</published>
    <updated>2021-04-07T13:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>this post covers<ul><li>what does <code>Build.cs</code> do</li><li>what does <code>Target.cs</code> do</li><li>differences between <code>Build.cs</code> and <code>Target.cs</code></li></ul></li><li>environment<ul><li>Unreal Engine 4 <code>ver. 4.25</code></li><li>Visual Studio 2019 <code>ver. 16.9.1</code></li></ul></li><li>reference<ol><li><a href="https://docs.unrealengine.com/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/ModuleFiles/index.html">https://docs.unrealengine.com/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/ModuleFiles/index.html</a></li><li><a href="https://docs.unrealengine.com/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/TargetFiles/index.html">https://docs.unrealengine.com/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/TargetFiles/index.html</a></li></ol></li></ul><h3 id="UnrealBuildTool-ModuleRules"><a href="#UnrealBuildTool-ModuleRules" class="headerlink" title="UnrealBuildTool.ModuleRules"></a><em><code>UnrealBuildTool.ModuleRules</code></em></h3><p>UnrealEngine provides its own module system, which is absolutely different with <a href="https://en.cppreference.com/w/cpp/language/modules">CPP 20 Module</a>. The class <code>UnrealBuildTool.ModuleRules</code> is for the module system and it is written by <code>[ModuleName].Build.cs</code>. You can decide what to include for creating output files (&#x3D; DLL). For example, <code>ShaderCompileWorker</code> project has the module rules below:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Programs/ShaderCompileWorker/ShaderCompileWorker.Build.cs</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShaderCompileWorker</span> : <span class="title">ModuleRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShaderCompileWorker</span>(<span class="params">ReadOnlyTargetRules Target</span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PrivateDependencyModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;Core&quot;</span>,</span><br><span class="line"><span class="string">&quot;Projects&quot;</span>,</span><br><span class="line"><span class="string">&quot;RenderCore&quot;</span>,</span><br><span class="line"><span class="string">&quot;SandboxFile&quot;</span>,</span><br><span class="line"><span class="string">&quot;TargetPlatform&quot;</span>,</span><br><span class="line"><span class="string">&quot;ApplicationCore&quot;</span>,</span><br><span class="line"><span class="string">&quot;TraceLog&quot;</span>,</span><br><span class="line"><span class="string">&quot;ShaderCompilerCommon&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Target.Platform == UnrealTargetPlatform.Linux)</span><br><span class="line">&#123;</span><br><span class="line">PrivateDependencyModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;NetworkFile&quot;</span>,</span><br><span class="line"><span class="string">&quot;PakFile&quot;</span>,</span><br><span class="line"><span class="string">&quot;StreamingFile&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrivateIncludePathModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;Launch&quot;</span>,</span><br><span class="line"><span class="string">&quot;TargetPlatform&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">PrivateIncludePaths.Add(<span class="string">&quot;Runtime/Launch/Private&quot;</span>);      <span class="comment">// For LaunchEngineLoop.cpp include</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Include D3D compiler binaries</span></span><br><span class="line"><span class="built_in">string</span> EngineDir = Path.GetFullPath(Target.RelativeEnginePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Target.Platform == UnrealTargetPlatform.Win32)</span><br><span class="line">&#123;</span><br><span class="line">RuntimeDependencies.Add(EngineDir + <span class="string">&quot;Binaries/ThirdParty/Windows/DirectX/x86/d3dcompiler_47.dll&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Target.Platform == UnrealTargetPlatform.Win64)</span><br><span class="line">&#123;</span><br><span class="line">RuntimeDependencies.Add(EngineDir + <span class="string">&quot;Binaries/ThirdParty/Windows/DirectX/x64/d3dcompiler_47.dll&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/04/07/difference-between-build-cs-and-target-cs/07.png" class=""></br><img src="/2021/04/07/difference-between-build-cs-and-target-cs/08.png" class=""><p>There are several libraries such as <code>Core</code>, <code>Projects</code>, <code>RenderCore</code> and so on. We can also find them in <code>Binaries</code> folder like below:<br>(FYI, the <code>ShaderCompileWorker.exe</code> is created with <code>ShaderCompileWorker.Target.cs</code> not the <code>ShaderCompileWorker.Build.cs</code>.)</p><img src="/2021/04/07/difference-between-build-cs-and-target-cs/04.png" class=""><p>In other words, output files are created with the name containing its module when you add corresponding libraries to module rules (ex: <code>[TargetName]-[ModuleName]-[ConfigurationName].dll</code>). Additionally, UnrealEngine re-uses them as possible. Suppose your project need some libraries already included on engine side. In this situation, UnrealEngine does not create output files for the duplicated libraries included in your project. Instead of that, UnrealEngine leaves some meta file describes what the project included.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThirdPerson_4_25</span> : <span class="title">ModuleRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThirdPerson_4_25</span>(<span class="params">ReadOnlyTargetRules Target</span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line"></span><br><span class="line">PublicDependencyModuleNames.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>, <span class="string">&quot;HeadMountedDisplay&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/04/07/difference-between-build-cs-and-target-cs/05.png" class=""><p>This is a generated module rules based on third person template. This module rules contains <code>CoreUObject</code> library but we cannot find it in <code>Binaries</code> folder. Let us see the <code>ThirdPerson_4_25Editor.target</code> file.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/Project/Binaries/Win64/ThirdPerson_4_25Editor.target</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&quot;BuildProducts&quot;: [</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">&quot;Path&quot;: &quot;$(EngineDir)/Binaries/Win64/UE4Editor-CoreUObject.dll&quot;,</span><br><span class="line">&quot;Type&quot;: &quot;DynamicLibrary&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;Path&quot;: &quot;$(EngineDir)/Binaries/Win64/UE4Editor-CoreUObject.pdb&quot;,</span><br><span class="line">&quot;Type&quot;: &quot;SymbolFile&quot;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Programs/UnrealBuildTool/System/TargetReceipt.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// Write the receipt to disk.</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;Location&quot;&gt;Output filename&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name=&quot;EngineDir&quot;&gt;Engine directory for expanded paths&lt;/param&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(FileReference Location, DirectoryReference EngineDir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">Writer.<span class="built_in">WriteArrayStart</span>(<span class="string">&quot;BuildProducts&quot;</span>);</span><br><span class="line">foreach (BuildProduct BuildProduct in BuildProducts)</span><br><span class="line">&#123;</span><br><span class="line">Writer.<span class="built_in">WriteObjectStart</span>();</span><br><span class="line">Writer.<span class="built_in">WriteValue</span>(<span class="string">&quot;Path&quot;</span>, <span class="built_in">InsertPathVariables</span>(BuildProduct.Path, EngineDir, ProjectDir));</span><br><span class="line">Writer.<span class="built_in">WriteValue</span>(<span class="string">&quot;Type&quot;</span>, BuildProduct.Type.<span class="built_in">ToString</span>());</span><br><span class="line">Writer.<span class="built_in">WriteObjectEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line">Writer.<span class="built_in">WriteArrayEnd</span>();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>For more details about the module system, visit <a href="https://docs.unrealengine.com/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/ModuleFiles/index.html">reference #1</a>.</p><h3 id="UnrealBuildTool-TargetRules"><a href="#UnrealBuildTool-TargetRules" class="headerlink" title="UnrealBuildTool.TargetRules"></a><em><code>UnrealBuildTool.TargetRules</code></em></h3><p>UnrealEngine provides its own target system, which makes you can create an executable. There are various target configurations such as <code>Editor</code>, <code>Client</code> and <code>Server</code>. The class <code>UnrealBuildTool.TargetRules</code> is for the target system and it is written by <code>[TargetName].Target.cs</code>. You can decide which modules to include for a certain target. For example, <code>UE4</code> project has the target rules for editor below:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UE4EditorTarget</span> : <span class="title">TargetRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UE4EditorTarget</span>(<span class="params"> TargetInfo Target </span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Type = TargetType.Editor;</span><br><span class="line">BuildEnvironment = TargetBuildEnvironment.Shared;</span><br><span class="line">bBuildAllModules = <span class="literal">true</span>;</span><br><span class="line">ExtraModuleNames.Add(<span class="string">&quot;UE4Game&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExtraModuleNames.Add(<span class="string">&quot;UE4Game&quot;</span>);</span><br></pre></td></tr></table></figure><p>The target rules specifies <code>UE4Game</code> module included, which is located in <code>Engine/Source/Runtime/UE4Game</code>. So, output files for editor are consist of modules in <code>UE4Game</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UE4Game</span> : <span class="title">ModuleRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UE4Game</span>(<span class="params">ReadOnlyTargetRules Target</span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">PrivateDependencyModuleNames.Add(<span class="string">&quot;Core&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Target.Platform == UnrealTargetPlatform.IOS || Target.Platform == UnrealTargetPlatform.TVOS)</span><br><span class="line">&#123;</span><br><span class="line">PrivateDependencyModuleNames.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">if</span> (Target.Platform == UnrealTargetPlatform.IOS)</span><br><span class="line">&#123;</span><br><span class="line">DynamicallyLoadedModuleNames.Add(<span class="string">&quot;IOSAdvertising&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Target.Platform == UnrealTargetPlatform.Android)</span><br><span class="line">&#123;</span><br><span class="line">PrivateDependencyModuleNames.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span> &#125;);</span><br><span class="line">DynamicallyLoadedModuleNames.Add(<span class="string">&quot;AndroidAdvertising&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></br><img src="/2021/04/07/difference-between-build-cs-and-target-cs/09.png" class=""><p>Yes, they are. :)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Type = TargetType.Editor;</span><br></pre></td></tr></table></figure><p><code>UnrealBuildTool.TargetRules</code> has a field <code>Type</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Programs/UnrealBuildTool/Configuration/TargetRules.cs</span><br><span class="line"></span><br><span class="line">...csharp</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> TargetRules is a data structure that contains the rules for defining a target (application/executable)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">TargetRules</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> The type of target.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">global</span>::UnrealBuildTool.TargetType Type = <span class="keyword">global</span>::UnrealBuildTool.TargetType.Game;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The field is used for branching target-specific features such as build configuration. For example, UnrealEngine manages target configurations as <code>enum</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Programs/UnrealBuildTool/Configuration/UEBuildTarget.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> The type of configuration a target can be built for</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> UnrealTargetConfiguration</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Unknown</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">Unknown,</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Debug configuration</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">Debug,</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DebugGame configuration; equivalent to development, but with optimization disabled for game modules</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">DebugGame,</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Development configuration</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">Development,</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Shipping configuration</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">Shipping,</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Test configuration</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">Test,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Unlike others, the editor target support only 3 types of target configuration. <code>Debug</code>, <code>DebugGame</code> and <code>Development</code>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Programs/UnrealBuildTool/Configuration/TargetRules.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Gets a list of configurations that this target supports</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>Array of configurations that the target supports<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">internal</span> UnrealTargetConfiguration[] <span class="title">GetSupportedConfigurations</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Otherwise take the SupportedConfigurationsAttribute from the first type in the inheritance chain that supports it</span></span><br><span class="line"><span class="keyword">for</span> (Type CurrentType = GetType(); CurrentType != <span class="literal">null</span>; CurrentType = CurrentType.BaseType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">object</span>[] Attributes = CurrentType.GetCustomAttributes(<span class="keyword">typeof</span>(SupportedConfigurationsAttribute), <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span> (Attributes.Length &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Attributes.OfType&lt;SupportedConfigurationsAttribute&gt;().SelectMany(x =&gt; x.Configurations).Distinct().ToArray();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Otherwise, get the default for the target type</span></span><br><span class="line"><span class="keyword">if</span> (Type == TargetType.Editor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>[] &#123; UnrealTargetConfiguration.Debug, UnrealTargetConfiguration.DebugGame, UnrealTargetConfiguration.Development &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ((UnrealTargetConfiguration[])Enum.GetValues(<span class="keyword">typeof</span>(UnrealTargetConfiguration))).Where(x =&gt; x != UnrealTargetConfiguration.Unknown).ToArray();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></br><img src="/2021/04/07/difference-between-build-cs-and-target-cs/10.png" class=""><p>For more details, visit <a href="https://docs.unrealengine.com/en-US/ProductionPipelines/BuildTools/UnrealBuildTool/TargetFiles/index.html">reference #2</a>.</p><h3 id="ModuleName-Build-cs"><a href="#ModuleName-Build-cs" class="headerlink" title="[ModuleName].Build.cs"></a><em><code>[ModuleName].Build.cs</code></em></h3><p>Each module has its own <code>Build.cs</code> file. For example, a <code>[ProjectName].Build.cs</code> will be generated when you create new project with cpp enabled. Because UnrealEngine makes a default module that has the same name with project. (Exactly, <code>Build.cs</code> and <code>Target.cs</code> files are copied from template in general cases.)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Editor/GameProjectGeneration/Private/GameProjectUtils.<span class="function">cpp</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GameProjectUtils::CreateProject</span><span class="params">(<span class="type">const</span> FProjectInformation&amp; InProjectInfo, FText&amp; OutFailReason, FText&amp; OutFailLog, TArray&lt;FString&gt;* OutCreatedFiles)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">IsValidProjectFileForCreation</span>(InProjectInfo.ProjectFilename, OutFailReason) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FScopedSlowTask <span class="title">SlowTask</span><span class="params">(<span class="number">0</span>, LOCTEXT( <span class="string">&quot;CreatingProjectStatus&quot;</span>, <span class="string">&quot;Creating project...&quot;</span> ))</span></span>;</span><br><span class="line">SlowTask.<span class="built_in">MakeDialog</span>();</span><br><span class="line"></span><br><span class="line">TOptional&lt;FGuid&gt; ProjectID;</span><br><span class="line">FString TemplateName;</span><br><span class="line"><span class="keyword">if</span> ( InProjectInfo.TemplateFile.<span class="built_in">IsEmpty</span>() )</span><br><span class="line">&#123;</span><br><span class="line">ProjectID = <span class="built_in">GenerateProjectFromScratch</span>(InProjectInfo, OutFailReason, OutFailLog);</span><br><span class="line">TemplateName = InProjectInfo.bShouldGenerateCode ? <span class="built_in">TEXT</span>(<span class="string">&quot;Basic Code&quot;</span>) : <span class="built_in">TEXT</span>(<span class="string">&quot;Blank&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ProjectID = <span class="built_in">CreateProjectFromTemplate</span>(InProjectInfo, OutFailReason, OutFailLog, OutCreatedFiles);</span><br><span class="line">TemplateName = FPaths::<span class="built_in">GetBaseFilename</span>(InProjectInfo.TemplateFile);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Editor/GameProjectGeneration/Private/GameProjectUtils.<span class="function">cpp</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">TOptional&lt;FGuid&gt; <span class="title">GameProjectUtils::CreateProjectFromTemplate</span><span class="params">(<span class="type">const</span> FProjectInformation&amp; InProjectInfo, FText&amp; OutFailReason, FText&amp; OutFailLog, TArray&lt;FString&gt;* OutCreatedFiles)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Discover and copy all files in the src folder to the destination, excluding a few files and folders</span></span><br><span class="line">TArray&lt;FString&gt; FilesToCopy;</span><br><span class="line">TArray&lt;FString&gt; FilesThatNeedContentsReplaced;</span><br><span class="line">TMap&lt;FString, FString&gt; ClassRenames;</span><br><span class="line">IFileManager::<span class="built_in">Get</span>().<span class="built_in">FindFilesRecursive</span>(FilesToCopy, *SrcFolder, <span class="built_in">TEXT</span>(<span class="string">&quot;*&quot;</span>), <span class="comment">/*Files=*/</span><span class="literal">true</span>, <span class="comment">/*Directories=*/</span><span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform the copy</span></span><br><span class="line"><span class="type">const</span> FString DestFilename = DestFolder / DestFileSubpathWithoutFilename + DestBaseFilename + <span class="built_in">TEXT</span>(<span class="string">&quot;.&quot;</span>) + FileExtension;</span><br><span class="line"><span class="keyword">if</span> ( IFileManager::<span class="built_in">Get</span>().<span class="built_in">Copy</span>(*DestFilename, *SrcFilename) == COPY_OK )</span><br><span class="line">&#123;</span><br><span class="line">CreatedFiles.<span class="built_in">Add</span>(DestFilename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( ReplacementsInFilesExtensions.<span class="built_in">Contains</span>(FileExtension) )</span><br><span class="line">&#123;</span><br><span class="line">FilesThatNeedContentsReplaced.<span class="built_in">Add</span>(DestFilename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow project template to extract class renames from this file copy</span></span><br><span class="line"><span class="keyword">if</span> (FPaths::<span class="built_in">GetBaseFilename</span>(SrcFilename) != FPaths::<span class="built_in">GetBaseFilename</span>(DestFilename)</span><br><span class="line">&amp;&amp; TemplateDefs-&gt;<span class="built_in">IsClassRename</span>(DestFilename, SrcFilename, FileExtension))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Looks like a UObject file!</span></span><br><span class="line">ClassRenames.<span class="built_in">Add</span>(FPaths::<span class="built_in">GetBaseFilename</span>(SrcFilename), FPaths::<span class="built_in">GetBaseFilename</span>(DestFilename));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br/><img src="/2021/04/07/difference-between-build-cs-and-target-cs/02.png" class=""><br/><img src="/2021/04/07/difference-between-build-cs-and-target-cs/01.png" class=""><p><em>WHEN YOU CREATE A PROJECT ITS NAME OF <code>ThridPerson_4_25</code> FROM THIRD PERSON TEMPLATE</em></p><p>Saying that again, <code>[ModuleName].Build.cs</code> defines the dependencies for building its module. So, every module must have its own <code>[ModuleName].Build.cs</code> file and every module has its own <code>[ModuleName].Build.cs</code> will generate a DLL when you build the project.</p><p>Module generation can be done by manipulating some CSharp scripts (<code>Build.cs</code> and <code>Target.cs</code> files). You can find how at <a href="https://www.ue4community.wiki/creating-cpp-module-oshdsg2t">https://www.ue4community.wiki/creating-cpp-module-oshdsg2t</a>.</p><h3 id="TargetName-Target-cs"><a href="#TargetName-Target-cs" class="headerlink" title="[TargetName].Target.cs"></a><em><code>[TargetName].Target.cs</code></em></h3><p>While every module must have a <code>Build.cs</code> file, but every module do not have to have a <code>Target.cs</code> file. Some modules have only <code>Build.cs</code> file. It means the modules should be used for library not a standalone. The <code>AIModule</code> is a good example. The module has only <code>Build.cs</code> as it is written for providing a support to make AI.</p><img src="/2021/04/07/difference-between-build-cs-and-target-cs/11.png" class=""></br><img src="/2021/04/07/difference-between-build-cs-and-target-cs/12.png" class=""></br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Editor/UnrealEd/UnrealEd.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">PublicIncludePathModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;AssetRegistry&quot;</span>,</span><br><span class="line"><span class="string">&quot;AssetTagsEditor&quot;</span>,</span><br><span class="line"><span class="string">&quot;CollectionManager&quot;</span>,</span><br><span class="line"><span class="string">&quot;BlueprintGraph&quot;</span>,</span><br><span class="line"><span class="string">&quot;AddContentDialog&quot;</span>,</span><br><span class="line"><span class="string">&quot;MeshUtilities&quot;</span>,</span><br><span class="line"><span class="string">&quot;AssetTools&quot;</span>,</span><br><span class="line"><span class="string">&quot;KismetCompiler&quot;</span>,</span><br><span class="line"><span class="string">&quot;NavigationSystem&quot;</span>,</span><br><span class="line"><span class="string">&quot;GameplayTasks&quot;</span>,</span><br><span class="line"><span class="string">&quot;AIModule&quot;</span>,</span><br><span class="line"><span class="string">&quot;Engine&quot;</span>,</span><br><span class="line"><span class="string">&quot;SourceControl&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Runtime/Engine/Engine.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (Target.bBuildEditor == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">PublicDependencyModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;UnrealEd&quot;</span>,</span><br><span class="line"><span class="string">&quot;Kismet&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">);<span class="comment">// @todo api: Only public because of WITH_EDITOR and UNREALED_API</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Developer/TargetPlatform/TargetPlatform.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">PrivateIncludePathModuleNames.Add(<span class="string">&quot;Engine&quot;</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Runtime/Core/Core.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">PrivateIncludePathModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;TargetPlatform&quot;</span>,</span><br><span class="line"><span class="string">&quot;DerivedDataCache&quot;</span>,</span><br><span class="line"><span class="string">&quot;InputDevice&quot;</span>,</span><br><span class="line"><span class="string">&quot;Analytics&quot;</span>,</span><br><span class="line"><span class="string">&quot;RHI&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Runtime/UE4Game/UE4Game.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">PrivateDependencyModuleNames.Add(<span class="string">&quot;Core&quot;</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/UE4Editor.Target.cs</span><br><span class="line"></span><br><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UE4EditorTarget</span> : <span class="title">TargetRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UE4EditorTarget</span>(<span class="params"> TargetInfo Target </span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Type = TargetType.Editor;</span><br><span class="line">BuildEnvironment = TargetBuildEnvironment.Shared;</span><br><span class="line">bBuildAllModules = <span class="literal">true</span>;</span><br><span class="line">ExtraModuleNames.Add(<span class="string">&quot;UE4Game&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Sometimes, some modules should not be included on certain target configurations. For instance, only editor features should not be included in client or server target configuration. In the need, we can branch for ease like below:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Engine/Source/Developer/SlateReflector/SlateReflector.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Editor builds include SessionServices to populate the remote target drop-down for remote widget snapshots</span></span><br><span class="line"><span class="keyword">if</span> (Target.Type == TargetType.Editor)</span><br><span class="line">&#123;</span><br><span class="line">PublicDefinitions.Add(<span class="string">&quot;SLATE_REFLECTOR_HAS_SESSION_SERVICES=1&quot;</span>);</span><br><span class="line"></span><br><span class="line">PrivateDependencyModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;PropertyEditor&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">PrivateIncludePathModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;SessionServices&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DynamicallyLoadedModuleNames.AddRange(</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">string</span>[] &#123;</span><br><span class="line"><span class="string">&quot;SessionServices&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">PublicDefinitions.Add(<span class="string">&quot;SLATE_REFLECTOR_HAS_SESSION_SERVICES=0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>We can use <code>Widget Relfector</code> only at editor target configuration. As we see, non-editor target will not contain the reflector feature. One more step, we can force to block generating projects by throwing an exception like this.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/Engine/Source/Editor/UnrealEd/UnrealEd.Build.cs</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnrealEd</span> : <span class="title">ModuleRules</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnrealEd</span>(<span class="params">ReadOnlyTargetRules Target</span>) : <span class="title">base</span>(<span class="params">Target</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Target.Type != TargetType.Editor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BuildException(<span class="string">&quot;Unable to instantiate UnrealEd module for non-editor targets.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap-Up"></a><em>Wrap-Up</em></h3><p><code>Build.cs</code> and <code>Target.cs</code> are different with each other on why they are used.</p><ul><li><code>Build.cs</code><ul><li>defines how the module should be created.</li><li>type of module output file is usually <code>.dll</code>.</li><li>every module must have its own <code>[ModuleName].Build.cs</code>.</li><li>there can be duplicated output files if the module is included in multiple <code>Target.cs</code> files or if build configurations are different on each other.<ul><li>ex: <code>Target1-ModuleA.dll</code>, <code>Target2-ModuleA.dll</code>, <code>Target2-ModuleA-Win64-Debug.dll</code> and etc.</li></ul></li></ul></li><li><code>Target.cs</code><ul><li>defines how the executable should be created.</li><li>type of target output file is usually <code>.exe</code>.</li><li>user can write <code>[TargetName].Target.cs</code> and modules can be included selectively.</li><li>there can be duplicated output files if build configurations are different on each other.<ul><li>ex: <code>UE4Editor.exe</code>, <code>UE4Editor-Win64-Debug.exe</code> and etc.</li></ul></li></ul></li></ul><p>Logically, a target is above one than a module.</p><img src="/2021/04/07/difference-between-build-cs-and-target-cs/13.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;this post covers&lt;ul&gt;
&lt;li&gt;what does &lt;code&gt;Build.cs&lt;/code&gt; do&lt;/li&gt;
&lt;li&gt;what does &lt;code&gt;Target.cs&lt;/code&gt; do&lt;/li&gt;
&lt;li&gt;differences betwe</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
  </entry>
  
  <entry>
    <title>Natvis in UnrealEngine</title>
    <link href="https://baemincheon.github.io/2021/03/01/unreal-engine-natvis/"/>
    <id>https://baemincheon.github.io/2021/03/01/unreal-engine-natvis/</id>
    <published>2021-03-01T13:10:07.000Z</published>
    <updated>2021-03-01T13:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>this post covers<ul><li>what is Natvis</li><li>how to write custom Natvis visualization</li><li>customization in UnrealEngine</li></ul></li><li>environment<ul><li>Unreal Engine 4 <code>ver. 4.25</code></li><li>Visual Studio 2019 <code>ver. 16.8.1</code></li></ul></li><li>reference<ol><li><a href="https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019">https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019</a></li><li><a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2015/debugger/format-specifiers-in-cpp?view=vs-2015&redirectedfrom=MSDN">https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2015/debugger/format-specifiers-in-cpp?view=vs-2015&redirectedfrom=MSDN</a></li><li><a href="https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/rwlp_xml_escape.html">https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty&#x2F;com.ibm.websphere.wlp.doc&#x2F;ae&#x2F;rwlp_xml_escape.html</a></li></ol></li></ul><h1 id="NATive-type-VISualization"><a href="#NATive-type-VISualization" class="headerlink" title="NATive type VISualization"></a>NATive type VISualization</h1><p>According to <a href="https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects?view=vs-2019">reference #1</a>, the name of Natvis framework means visualization of native types. It can help your debugging with more plentiful visibility, and sometimes support mutiple environments that have a different size on the same data type. Suppose you want to make a string class storing its text as UTF-32 or something custom format, it should not be displayed well because it is not kind of ASCII. Though, do you want to see the data (in this case, the text) at <code>Watch</code> or <code>Local</code> viewport ? Then you should implement your own xml for custom Natvis visualization.</p><p><em>SCREENSHOT WITHOUT CUSTOM NATVIS</em></p><img src="/2021/03/01/unreal-engine-natvis/01.png" class=""><p><em>SCREENSHOT WITH CUSTOM NATVIS</em></p><img src="/2021/03/01/unreal-engine-natvis/02.png" class=""><h1 id="Basic-syntax-and-usage"><a href="#Basic-syntax-and-usage" class="headerlink" title="Basic syntax and usage"></a>Basic syntax and usage</h1><p>The custom visualizer has XML syntax and it would be comfortable than a sole programming language. Just create a file of any name with <code>.natvis</code> extension and locate at the directory <code>Documents/Visual Studio 2019/Visualizers</code>. The Visual Studio IDE will find all natvis files at there and parse them. At first after you create the file, you need the tag <code>AutoVisualizer</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>But you may meet the error like below with our current visualizer. (You should turn on an option for showing errors related to Natvis. Manipulate the option at <code>Tools/Options/Debugging/Output Window/General OutputSettings/Natvisdiagnostic messages</code>. I recommend you to set the level as <code>Error</code>.)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Natvis: ...\Documents\Visual Studio 2019\Visualizers\Example.natvis(1,2): Fatal error:</span><br><span class="line">Expected element with namespace &#x27;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&#x27;.</span><br></pre></td></tr></table></figure><p>So you should specify the schemas. Like this.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And, the <code>AutoVisualizer</code> tag can have a child tag such as <code>Type</code>. The <code>Type</code> tag must have an attribute <code>Name</code>. <code>Name</code> can be set as the name of type. For example, you should type <code>SomeClass</code> at the attribute when you created a type <code>SomeClass</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ID = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SomeClass Some01;</span><br><span class="line">    Some<span class="number">01.</span>ID = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span>=<span class="string">&quot;SomeClass&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2021/03/01/unreal-engine-natvis/03.png" class=""><p>The <code>Type</code> tag can have a child tag such <code>DisplayString/Expand</code>. The <code>DisplayString</code> tag can be used for displaying a string at the debugging window like below.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span>=<span class="string">&quot;SomeClass&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">This is my class</span><br><span class="line"><span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2021/03/01/unreal-engine-natvis/04.png" class=""><p>You can get the value of member variable. Brace the member variable as <code>&#123;&#125;</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span> = <span class="string">&quot;SomeClass&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">My ID is &#123;ID&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2021/03/01/unreal-engine-natvis/05.png" class=""><p>With the <code>Expand</code> tag, you can customize the expanded view. The <code>Item</code> tags consist of the list. If you customize the expanded view as <code>Expand</code> tag, automatically <code>Raw View</code> item created, which was the original expanded view. You can decorate each line of list in expanded view. The specifier <code>sb</code> and <code>x</code> are respectively meaning “Display the string without quotation marks” and “Display the integer with hexa-decimal format”. For more details, visit <a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2015/debugger/format-specifiers-in-cpp?view=vs-2015&redirectedfrom=MSDN">reference #2</a>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span> = <span class="string">&quot;SomeClass&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">My ID is &#123;ID&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Expand</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;Description&quot;</span>&gt;</span></span><br><span class="line">&quot;Natvis is awesome&quot;, sb</span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Item</span> <span class="attr">Name</span>=<span class="string">&quot;ID&quot;</span>&gt;</span></span><br><span class="line">ID, x</span><br><span class="line"><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Expand</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2021/03/01/unreal-engine-natvis/06.png" class=""><h1 id="Example-in-UnrealEngine"><a href="#Example-in-UnrealEngine" class="headerlink" title="Example in UnrealEngine"></a>Example in UnrealEngine</h1><p>Let us find an example in UnrealEngine one. You can find <code>UE4.natvis</code> if you installed UnrealEngine at your local system. Mostly, the <code>UE4.natvis</code> located in <code>Engine/Extras/VisualStudioDebugging/UE4.natvis</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AutoVisualizer</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/vstudio/debugger/natvis/2010&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- FString visualizer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Type</span> <span class="attr">Name</span>=<span class="string">&quot;FString&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DisplayString</span> <span class="attr">Condition</span>=<span class="string">&quot;Data.ArrayNum == 0&quot;</span>&gt;</span>Empty<span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DisplayString</span> <span class="attr">Condition</span>=<span class="string">&quot;Data.ArrayNum <span class="symbol">&amp;lt;</span> 0&quot;</span>&gt;</span>Invalid<span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DisplayString</span> <span class="attr">Condition</span>=<span class="string">&quot;Data.ArrayMax <span class="symbol">&amp;lt;</span> Data.ArrayNum&quot;</span>&gt;</span>Invalid<span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DisplayString</span> <span class="attr">Condition</span>=<span class="string">&quot;Data.ArrayMax <span class="symbol">&amp;gt;</span>= Data.ArrayNum&quot;</span>&gt;</span>&#123;Data.AllocatorInstance.Data,su&#125;<span class="tag">&lt;/<span class="name">DisplayString</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StringView</span> <span class="attr">Condition</span>=<span class="string">&quot;Data.ArrayMax <span class="symbol">&amp;gt;</span>= Data.ArrayNum&quot;</span>&gt;</span>Data.AllocatorInstance.Data,su<span class="tag">&lt;/<span class="name">StringView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">AutoVisualizer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>First of all, the <code>FString</code> welcomes us. Have a look for why the <code>FString</code> visualizer has been made like this. ( <code>&amp;lt;</code> and <code>&amp;gt;</code> things are escaped characters in xml. For more details, visit <a href="https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/rwlp_xml_escape.html">reference #3</a>. )</p><img src="/2021/03/01/unreal-engine-natvis/07.png" class=""><p>Put a breakpoint at where the <code>FString</code> is initialized. Before initialization, we can see <code>Invalid</code> at the debugging window.</p><img src="/2021/03/01/unreal-engine-natvis/08.png" class=""><p>Expand the items. We can see the <code>ArrayNum</code> has a negative value. The condition <code>Data.ArrayNum &lt; 0</code> is satisfied and <code>Invalid</code> would be shown.</p><img src="/2021/03/01/unreal-engine-natvis/09.png" class=""><p>After initialization, we can see the string very well. In this case, the condition <code>Data.ArrayMax &gt;= Data.ArrayNum</code> is satisfied and <code>L&quot;ABC&quot;</code> would be shown. Why does the string look like <code>L&quot;...&quot;</code> ? Because of the format specifier <code>su</code>. Check the <a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2015/debugger/format-specifiers-in-cpp?view=vs-2015&redirectedfrom=MSDN">reference #2</a> again.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Engine/Source/Runtime/Core/Public/Containers/UnrealString.h</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CORE_API</span> FString</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">struct</span> <span class="title class_">TContainerTraits</span>&lt;FString&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Array holding the character data */</span></span><br><span class="line"><span class="keyword">typedef</span> TArray&lt;TCHAR&gt; DataType;</span><br><span class="line">DataType Data;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>The <code>FString</code> stores its string with <code>TArray&lt;TCHAR&gt;</code>. So we could see the <code>ArrayNum</code> or <code>ArrayMax</code> things at the <code>FString</code> visualizer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Engine/Source/Runtime/Core/Public/Containers/Array.h</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> InElementType, <span class="keyword">typename</span> InAllocator&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TArray</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> OtherInElementType, <span class="keyword">typename</span> OtherAllocator&gt;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">TArray</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> InAllocator::SizeType SizeType;</span><br><span class="line"><span class="keyword">typedef</span> InElementType ElementType;</span><br><span class="line"><span class="keyword">typedef</span> InAllocator   Allocator;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ElementType, <span class="keyword">typename</span> Allocator&gt;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">TIndirectArray</span>;</span><br><span class="line"></span><br><span class="line">ElementAllocatorType AllocatorInstance;</span><br><span class="line">SizeType             ArrayNum;</span><br><span class="line">SizeType             ArrayMax;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Engine/Source/Runtime/Core/Public/Containers/ContainersFwd.h</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> IndexSize&gt; <span class="keyword">class</span> <span class="title class_">TSizedDefaultAllocator</span>;</span><br><span class="line"><span class="keyword">using</span> FDefaultAllocator = TSizedDefaultAllocator&lt;<span class="number">32</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> FDefaultAllocator64 = TSizedDefaultAllocator&lt;<span class="number">64</span>&gt;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FDefaultSetAllocator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FString</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Allocator = FDefaultAllocator&gt; <span class="keyword">class</span> TArray;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Engine/Source/Runtime/Core/Public/Containers/ContainerAllocationPolicies.h</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> IndexSize&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TBitsToSizeType</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">static_assert</span>(IndexSize, <span class="string">&quot;Unsupported allocator index size.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">struct</span> <span class="title class_">TBitsToSizeType</span>&lt;<span class="number">8</span>&gt;  &#123; <span class="keyword">using</span> Type = int8; &#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">struct</span> <span class="title class_">TBitsToSizeType</span>&lt;<span class="number">16</span>&gt; &#123; <span class="keyword">using</span> Type = int16; &#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">struct</span> <span class="title class_">TBitsToSizeType</span>&lt;<span class="number">32</span>&gt; &#123; <span class="keyword">using</span> Type = int32; &#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt; <span class="keyword">struct</span> <span class="title class_">TBitsToSizeType</span>&lt;<span class="number">64</span>&gt; &#123; <span class="keyword">using</span> Type = int64; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The indirect allocation policy always allocates the elements indirectly. */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> IndexSize&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TSizedHeapAllocator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> SizeType = <span class="keyword">typename</span> TBitsToSizeType&lt;IndexSize&gt;::Type;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> IndexSize&gt; <span class="keyword">class</span> <span class="title class_">TSizedDefaultAllocator</span> : <span class="keyword">public</span> TSizedHeapAllocator&lt;IndexSize&gt; &#123; <span class="keyword">public</span>: <span class="keyword">typedef</span> TSizedHeapAllocator&lt;IndexSize&gt; Typedef; &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>And you can find the type of <code>ArrayNum</code> and <code>ArrayMax</code> is <code>int32</code> with this flow.</p><p>Sometimes, the <code>UE4.natvis</code> gives us a hint for understanding the complicated engine code. Even someday you may need to customize <code>UE4.natvis</code> for special case while supporting various platforms. It would be also good to learn Natvis if you mostly use Visual Studio IDE. Read premade ones and write your ones. :)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;this post covers&lt;ul&gt;
&lt;li&gt;what is Natvis&lt;/li&gt;
&lt;li&gt;how to write custom Natvis visualization&lt;/li&gt;
&lt;li&gt;customization in UnrealEngine&lt;/l</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
    <category term="Natvis" scheme="https://baemincheon.github.io/tags/Natvis/"/>
    
  </entry>
  
  <entry>
    <title>Retrospection 2020</title>
    <link href="https://baemincheon.github.io/2020/12/24/retrospection-2020/"/>
    <id>https://baemincheon.github.io/2020/12/24/retrospection-2020/</id>
    <published>2020-12-24T06:09:10.000Z</published>
    <updated>2020-12-24T06:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a><code>overview</code></h1><img src="/2020/12/24/retrospection-2020/01.jpg" class=""><p>Exactly one year passed after I wrote the retrospection of 2019. (<a href="https://baemincheon.github.io/2019/12/24/retrospection-2019/">https://baemincheon.github.io/2019/12/24/retrospection-2019/</a>) Feeling that time goes so fast as I look back lots of things behind. From the god damn COVID-19 to the remote work during quarantine, we got so many things to say. But, the old year (2019) is still the hardest year to me. This year would be second one as I believe myself that I have taken plenty of breaks in this year.</p><p>Though the main topics of retrospection are related to worldwide crisis, I will try not to talk about it as possible. Now it is some kinda routine issue and I want to care about personal events. In addition to, other people are already saying or sharing the contents about it. I just hope this crisis ends as soon as possible and get back into old routines.</p><h1 id="play"><a href="#play" class="headerlink" title="play"></a><code>play</code></h1><img src="/2020/12/24/retrospection-2020/02.jpg" class=""><p>This year, I played games most of time with Nintendo Switch. Especially, <code>Splatoon 2</code> and <code>Ring Fit Adventure</code> were the ones that I liked. <code>Splatoon 2</code> is not such a fresh game (released at 2017&#x2F;07&#x2F;21), so it was hard to enjoy multi-play contents due to other players much more skillful than me. But, its single-play contents were quite good and well structured. Therefore, I also purchased a DLC for another single-play contents. I played <code>Splatoon 2</code> about 100 hours and am pleased with the game quality. The game is not kinda “GOD GAME” thing, but I am sure it has worth to play at least once. For me, an enthusiast of FPS game, unusual concepts of this game looks nice.</p><img src="/2020/12/24/retrospection-2020/03.jpg" class=""><p>I really like the <code>Ring Fit Adventure</code>. It has been so difficult to exercise funny that I used to stop exercising several times. You know, even such a strong will sustains less than few weeks or months. But, I am still keeping exercising for more than 6 months with the game. Thanks to its gamification, I seldom lost interest on exercising and sometimes got motive, too. I played <code>Ring Fit Adventure</code> about 150 hours and am pleased with the game quality. I am sure I can recommend this game if you have Nintendo Switch. And there may be only this option in these days as fitness clubs closed. Home training is not optional but required.</p><img src="/2020/12/24/retrospection-2020/14.jpg" class=""><p>Oh, I almost forgot it. I played the game <code>3000th Duel</code>, too. It is a game released at PC(Steam) and Nintendo Switch. The game is said as one of Metroidvania things, because of its contents and mood. It was not easy one but there was the balance between feeling fulfilled and bearing hardship. I played <code>3000th Duel</code> about 40 hours including DLC part. Though It does not have an easy mode option such as <code>Just Enjoy The Story</code> difficulty, you can go easy or hard depends on how much you spent time at farming. It is up to you. Though there were several times that I screamed (lol) for anger, it helped me to get used to manipulating Nintendo Switch controller.</p><h1 id="activity"><a href="#activity" class="headerlink" title="activity"></a><code>activity</code></h1><img src="/2020/12/24/retrospection-2020/04.jpg" class=""></br><img src="/2020/12/24/retrospection-2020/05.jpg" class=""><p>Some old people may know about <code>Touhou Project</code>. It is one of vertically scrolled shooting games such as <code>Strikers 1945</code>. The game was popular on 90s and 00s for its unique worldview, which lead to numerous numbers of derivative works created by users. Some works are still created in these days although it is become less popular than before. But, almost every one is aimed for English or Japanese version not the Korean.</p><p>Fortunately, <code>Touhou Spell Bubble</code> has recently started to support Korean version. It was first released at 2020&#x2F;02&#x2F;06, and started to support Korean version from 2020&#x2F;10&#x2F;15. Despite of many concerns, I was happy to see the game supports Korean. (You might know, Korean market is not actually attractive.) So I was willing to visit the cafe when the game is promoted. We ordered every menu once and pictured them.</p><img src="/2020/12/24/retrospection-2020/06.jpg" class=""></br><img src="/2020/12/24/retrospection-2020/07.jpg" class=""><p>I remember that I mentioned the laboratory in previous retrospection. (Maybe because I did my best in lab) The professor of lab suggested me to give a lecture, whose content is about C language. I accepted the suggestion without hesitation, and wrote some slideshows. The lecture is in the first-year curriculum, however, I wanted to deal with real application of C language. Why ? Every student in 2020 may have a doubt on studying C language. Because there are already many programming languages that looks awesome and easy such as Python or Javascript.</p><p>So I focused on “Why We Study C Language” and “How C Language Is Used” for resolving the doubts. I prepared the contents like Explaining “Why C Language Can Manipulate Memory” with assembly codes, showing “How C Language Is Used In Real Project” with Linux kernel codes. People rarely say about them. Time has passed, we do not use C language for all purposes. I thought now we should consider to focus what only C can do when we teach C language to students.</p><h1 id="work"><a href="#work" class="headerlink" title="work"></a><code>work</code></h1><img src="/2020/12/24/retrospection-2020/09.jpg" class=""></br><img src="/2020/12/24/retrospection-2020/10.jpg" class=""></br><img src="/2020/12/24/retrospection-2020/11.jpg" class=""><p>Already one year passed from join the PUBG. Exactly 1.5 year ? I am now familiar to my work, and even got the sub role additionally. We had an anniversary cake with people who joined PUBG in the same time, too. Work is not easy going, but we try to do boost each other and overcome it. I wish I can go with the people as many as can also even one year passed again. It is sad that now we cannot get together in offline due to the crisis. We had often got together once per 1~2 months, and had a dinner. I already miss that times.</p><p>Starting remote work, I found some pros and cons. Remote work seems not the silver bullet one in every situation. Of course, there are common topics on remote work regardless of job. But, some topics are unique ones only existing on game developer job. I can show cons below:</p><p><em>Common Topics</em></p><ul><li>chores that did not exist when you commute to office<br>(ex: cooking, managing workplace)</li><li>hardness to know about work mood<br>(ex: are they excited ? are they angry ?)</li><li>irregular work time with personal circumstances<br>(ex: family with kids)</li></ul><p><em>Extra Topics (for game developer job)</em></p><ul><li>heavy traffic due to massive volume of program<br>(it is painful at home network to upload or download programs when compared with office network)</li><li>laggy remote screen sharing<br>(game developer should usually run the client program, while it is okay other developers use only console prompt)</li><li>poor response time on input or output<br>(when the game is  kind of real time game…)</li></ul><img src="/2020/12/24/retrospection-2020/13.png" class=""></br><img src="/2020/12/24/retrospection-2020/12.jpg" class=""><p>Play Station 5 has been released in recent. Sony planned to celebrate the event with partner companies, and collected the picture of members. I sent the picture above, and you can find it on the site <a href="https://sie.offbaseproductions.com/">https://sie.offbaseproductions.com/</a> too. It is something monumental and memorable. Sony did good job. I was glad to develop on PS5. :)</p><h1 id="thoughts"><a href="#thoughts" class="headerlink" title="thoughts"></a><code>thoughts</code></h1><img src="/2020/12/24/retrospection-2020/08.jpg" class=""><p>This year, I leave some regrets that I should have done more things. I should have met more people and read books. But…the lethargy from the crisis, everyone may have felt this. I cannot assert it did not affect me. People around me seems sometimes sad and depressed, too. What was worse, we end up this year as bad situation with high amount of patients. It is hard to believe next year would be better.</p><p>Somebody said, “The World Never Be The Same”. At first of this year, I did not agree the words. Because I could not imagine the new world. But…we going to the new world anyway, and it seems we must adapt. Even this year is said the most terrible one, I think we should remember it. To look back to stop this tragedy. We gotta be worry about how to adapt new world and how to live next year, based on new rules.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;overview&quot;&gt;&lt;a href=&quot;#overview&quot; class=&quot;headerlink&quot; title=&quot;overview&quot;&gt;&lt;/a&gt;&lt;code&gt;overview&lt;/code&gt;&lt;/h1&gt;&lt;img src=&quot;/2020/12/24/retrospection-</summary>
      
    
    
    
    
    <category term="Retrospection" scheme="https://baemincheon.github.io/tags/Retrospection/"/>
    
  </entry>
  
  <entry>
    <title>Gamepad input process in UnrealEngine</title>
    <link href="https://baemincheon.github.io/2020/10/25/unreal-input-system-via-gamepad/"/>
    <id>https://baemincheon.github.io/2020/10/25/unreal-input-system-via-gamepad/</id>
    <published>2020-10-25T09:11:09.000Z</published>
    <updated>2020-10-25T09:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>this post covers<ul><li>key mapping of Xbox One controller in UnrealEngine</li><li>how UnrealEngine handles input from user</li><li>input process for gamepad (with Xbox One controller)</li></ul></li><li>environment<ul><li>Unreal Engine 4 <code>ver. 4.25</code></li><li>Visual Studio 2019 <code>ver. 16.7.6</code></li><li>Windows 10 <code>ver. 2004</code></li></ul></li><li>reference<ol><li><a href="https://support.xbox.com/en-US/help/hardware-network/controller/xbox-one-wireless-controller">https://support.xbox.com/en-US/help/hardware-network/controller/xbox-one-wireless-controller</a></li></ol></li></ul><hr><h1 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a><em>Terms</em></h1><table><thead><tr><th>Term</th><th>Synonym</th><th>Meaning</th></tr></thead><tbody><tr><td>Non-Axis</td><td>Key, Button</td><td>input type which has only two states: <code>Pressed</code> or <code>Released</code></td></tr><tr><td>Axis</td><td>Stick</td><td>input type which has numberless states</td></tr><tr><td>Key</td><td></td><td>(sometimes) it is used for indicating any input type. be careful with context for distinction of <code>Non-Axis</code></td></tr><tr><td>Deadzone</td><td>Threshold</td><td>range of input values, which blocks values in range. only bigger value cannot be blocked</td></tr></tbody></table><h1 id="Gamepad-Non-Axis-x2F-Axis-Mapping-in-UnrealEngine"><a href="#Gamepad-Non-Axis-x2F-Axis-Mapping-in-UnrealEngine" class="headerlink" title="Gamepad Non-Axis&#x2F;Axis Mapping in UnrealEngine"></a><em>Gamepad Non-Axis&#x2F;Axis Mapping in UnrealEngine</em></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UnrealEngine/Engine/Source/Runtime/Core/Private/GenericPlatform/GenericApplication.cpp</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">const</span> FGamepadKeyNames::Type <span class="title">FGamepadKeyNames::LeftAnalogX</span><span class="params">(<span class="string">&quot;Gamepad_LeftX&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> FGamepadKeyNames::Type <span class="title">FGamepadKeyNames::LeftAnalogY</span><span class="params">(<span class="string">&quot;Gamepad_LeftY&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> FGamepadKeyNames::Type <span class="title">FGamepadKeyNames::RightAnalogX</span><span class="params">(<span class="string">&quot;Gamepad_RightX&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> FGamepadKeyNames::Type <span class="title">FGamepadKeyNames::RightAnalogY</span><span class="params">(<span class="string">&quot;Gamepad_RightY&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> FGamepadKeyNames::Type <span class="title">FGamepadKeyNames::LeftTriggerAnalog</span><span class="params">(<span class="string">&quot;Gamepad_LeftTriggerAxis&quot;</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> FGamepadKeyNames::Type <span class="title">FGamepadKeyNames::RightTriggerAnalog</span><span class="params">(<span class="string">&quot;Gamepad_RightTriggerAxis&quot;</span>)</span></span>;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>we can find some pre-defined non-axis&#x2F;axis keys as <code>FName</code> in <code>GenericApplication.cpp</code>. they are for mapping from various input messages to generic input messages. “various input messages” means, there are many types of gamepad in the world. the button&#x2F;stick layout differs in Xbox One controller, Playstation 4 controller and so on. the gamepads below are Xbox One, Playstation 4, Stadia and Switch in order.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/01.jpg" class=""><img src="/2020/10/25/unreal-input-system-via-gamepad/02.jpg" class=""><img src="/2020/10/25/unreal-input-system-via-gamepad/03.png" class=""><img src="/2020/10/25/unreal-input-system-via-gamepad/04.jpg" class=""><p>look at the Xbox One one and Playstation 4 one. they have many differences such as position of stick and exsitance of touch pad. even in comparison for Xbox One one and Switch one, the number of buttons differs. in this situation, it is not easy for every individual developer to support every type of gamepad, so the need of generic mapping for gamepad input arises. let us find out the generic mapping with Xbox One controller examples.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/06.png" class=""><img src="/2020/10/25/unreal-input-system-via-gamepad/07.png" class=""><p>the tables are from the <a href="https://support.xbox.com/en-US/help/hardware-network/controller/xbox-one-wireless-controller">reference #1</a>. you can find more details for each button&#x2F;stick at the URL. though there are so many items in table, some of them are not counted as user input in common situation. so, we can gotta consider the items below:</p><table><thead><tr><th>Index</th><th>Item Name</th><th>Unreal Mapping</th><th>Input Type</th></tr></thead><tbody><tr><td>1</td><td>Left Stick</td><td>(Move Horizontally) Gamepad_LeftX</td><td>Key, Axis</td></tr><tr><td></td><td>(Move Vertically) Gamepad_LeftY</td><td>Key, Axis</td><td></td></tr><tr><td></td><td>(Move Left Side More Than Deadzone) Gamepad_LeftStick_Left</td><td>Key</td><td></td></tr><tr><td></td><td>(Move Up Side More Than Deadzone) Gamepad_LeftStick_Up</td><td>Key</td><td></td></tr><tr><td></td><td>(Move Right Side More Than Deadzone) Gamepad_LeftStick_Up</td><td>Key</td><td></td></tr><tr><td></td><td>(Move Down Side More Than Deadzone) Gamepad_LeftStick_Down</td><td>Key</td><td></td></tr><tr><td></td><td>(Click) Gamepad_LeftThumbstick</td><td>Key</td><td></td></tr><tr><td>2</td><td>Left Bumper</td><td>Gamepad_LeftShoulder</td><td>Key</td></tr><tr><td>3</td><td>View Button</td><td>Gamepad_Special_Left</td><td>Key</td></tr><tr><td>6</td><td>Menu Button</td><td>Gamepad_Special_Right</td><td>Key</td></tr><tr><td>7</td><td>Right Bumper</td><td>Gamepad_RightShoulder</td><td>Key</td></tr><tr><td>8</td><td>Directional Pad</td><td>(Left) Gamepad_DPad_Left</td><td>Key</td></tr><tr><td></td><td>(Up) Gamepad_DPad_Up</td><td>Key</td><td></td></tr><tr><td></td><td>(Right) Gamepad_DPad_Right</td><td>Key</td><td></td></tr><tr><td></td><td>(Down) Gamepad_DPad_Down</td><td>Key</td><td></td></tr><tr><td>10</td><td>Right Stick</td><td>(Move Horizontally) Gamepad_RightX</td><td>Key, Axis</td></tr><tr><td></td><td>(Move Vertically) Gamepad_RightY</td><td>Key, Axis</td><td></td></tr><tr><td></td><td>(Move Left Side More Than Deadzone) Gamepad_RightStick_Left</td><td>Key</td><td></td></tr><tr><td></td><td>(Move Up Side More Than Deadzone) Gamepad_RightStick_Up</td><td>Key</td><td></td></tr><tr><td></td><td>(Move Right Side More Than Deadzone) Gamepad_RightStick_Up</td><td>Key</td><td></td></tr><tr><td></td><td>(Move Down Side More Than Deadzone) Gamepad_RightStick_Down</td><td>Key</td><td></td></tr><tr><td></td><td>(Click) Gamepad_RightThumbstick</td><td>Key</td><td></td></tr><tr><td>11</td><td>Right Trigger</td><td>Gamepad_RightTriggerAxis</td><td>Key, Axis</td></tr><tr><td></td><td>(Press More Than Deadzone) Gamepad_RightTrigger</td><td>Key</td><td></td></tr><tr><td>14</td><td>Left Trigger</td><td>Gamepad_LeftTriggerAxis</td><td>Key, Axis</td></tr><tr><td></td><td>(Press More Than Deadzone) Gamepad_LeftTrigger</td><td>Key</td><td></td></tr><tr><td>X</td><td>X Button</td><td>Gamepad_FaceButton_Left</td><td>Key</td></tr><tr><td>Y</td><td>Y Button</td><td>Gamepad_FaceButton_Up</td><td>Key</td></tr><tr><td>A</td><td>A Button</td><td>Gamepad_FaceButton_Bottom</td><td>Key</td></tr><tr><td>B</td><td>B Button</td><td>Gamepad_FaceButton_Right</td><td>Key</td></tr></tbody></table><p>some of them are handled as not only Key but Axis, too.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/08.png" class=""></br><img src="/2020/10/25/unreal-input-system-via-gamepad/09.png" class=""><ul><li>the <code>Gamepad_LeftY</code> is the one of cases</li></ul><h1 id="Gamepad-Non-Axis-Input-Handling-Process"><a href="#Gamepad-Non-Axis-Input-Handling-Process" class="headerlink" title="Gamepad Non-Axis Input Handling Process"></a><em>Gamepad Non-Axis Input Handling Process</em></h1><img src="/2020/10/25/unreal-input-system-via-gamepad/10.png" class=""><p>focus the function <code>XInputInterface::SendControllerEvents()</code>. there is the logic to filter hardware input state.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">UnrealEngine/Engine/Source/Runtime/ApplicationCore/Private/Windows/XInputInterface.cpp</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XInputInterface::SendControllerEvents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">0</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_A);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">1</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_B);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">2</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_X);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">3</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_Y);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">4</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_LEFT_SHOULDER);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">5</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_RIGHT_SHOULDER);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">6</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_BACK);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">7</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_START);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">8</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_LEFT_THUMB);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">9</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_RIGHT_THUMB);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">10</span>]] = !!(XInputState.Gamepad.bLeftTrigger &gt; XINPUT_GAMEPAD_TRIGGER_THRESHOLD);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">11</span>]] = !!(XInputState.Gamepad.bRightTrigger &gt; XINPUT_GAMEPAD_TRIGGER_THRESHOLD);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">12</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_DPAD_UP);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">13</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_DPAD_DOWN);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">14</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_DPAD_LEFT);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">15</span>]] = !!(XInputState.Gamepad.wButtons &amp; XINPUT_GAMEPAD_DPAD_RIGHT);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">16</span>]] = !!(XInputState.Gamepad.sThumbLY &gt; XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">17</span>]] = !!(XInputState.Gamepad.sThumbLY &lt; -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">18</span>]] = !!(XInputState.Gamepad.sThumbLX &lt; -XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">19</span>]] = !!(XInputState.Gamepad.sThumbLX &gt; XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">20</span>]] = !!(XInputState.Gamepad.sThumbRY &gt; XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">21</span>]] = !!(XInputState.Gamepad.sThumbRY &lt; -XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">22</span>]] = !!(XInputState.Gamepad.sThumbRX &lt; -XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE);</span><br><span class="line">    CurrentStates[X360ToXboxControllerMapping[<span class="number">23</span>]] = !!(XInputState.Gamepad.sThumbRX &gt; XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>the next screenshot shows the value of <code>CurrentStates</code> when you press A button in Xbox One gamepad.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/11.png" class=""><p>we can see the key, deadzone or threshold macro in the code. the macros are defined at <code>XInput.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">C:/<span class="function">Program <span class="title">Files</span> <span class="params">(x86)</span>/Windows Kits/10/Include/10.0.18362.0/um/XInput.h</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">...</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//</span></span></span><br><span class="line"><span class="function"><span class="comment">// Constants for gamepad buttons</span></span></span><br><span class="line"><span class="function"><span class="comment">//</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_DPAD_UP          0x0001</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_DPAD_DOWN        0x0002</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_DPAD_LEFT        0x0004</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_DPAD_RIGHT       0x0008</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_START            0x0010</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_BACK             0x0020</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_LEFT_THUMB       0x0040</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_RIGHT_THUMB      0x0080</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_LEFT_SHOULDER    0x0100</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_RIGHT_SHOULDER   0x0200</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_A                0x1000</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_B                0x2000</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_X                0x4000</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_Y                0x8000</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//</span></span></span><br><span class="line"><span class="function"><span class="comment">// Gamepad thresholds</span></span></span><br><span class="line"><span class="function"><span class="comment">//</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE  7849</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE 8689</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">define</span> XINPUT_GAMEPAD_TRIGGER_THRESHOLD    30</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">...</span></span><br></pre></td></tr></table></figure><p>there is an exception case for input smaller than deadzone. let us take an example with <code>Gamepad_LeftX</code> message. check out screenshots below.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/12.png" class=""><p>when you input a tiny change on left stick, <code>InputAxis()</code> is called. and the key will be accumulated in <code>EventAccumulator</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UnrealEngine/Engine/Source/Runtime/Engine/Private/UserInterface/PlayerInput.cpp</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UPlayerInput::ProcessInputStack</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Exchange</span>(KeyState-&gt;EventCounts[EventIndex], KeyState-&gt;EventAccumulator[EventIndex]);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>after that, the key in <code>EventAccumulator</code> is moved to <code>EventCounts</code>.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/13.png" class=""><p>if you keep operating the stick, the key is regarded as down.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/14.png" class=""><p>in this situation, the key is regarded as released if all keys are flushed.</p><img src="/2020/10/25/unreal-input-system-via-gamepad/15.png" class=""><h1 id="Gamepad-Axis-Input-Handling-Process"><a href="#Gamepad-Axis-Input-Handling-Process" class="headerlink" title="Gamepad Axis Input Handling Process"></a><em>Gamepad Axis Input Handling Process</em></h1><p>the callstack of Axis one is similar to the Non-Axis one. there is a difference of execution at <code>XInputInterface::SendControllerEvents()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">UnrealEngine/Engine/Source/Runtime/ApplicationCore/Private/Windows/XInputInterface.cpp</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">XInputInterface::SendControllerEvents</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Send new analog data if it&#x27;s different or outside the platform deadzone.</span></span><br><span class="line">    <span class="keyword">auto</span> OnControllerAnalog = [<span class="keyword">this</span>, &amp;ControllerState](<span class="type">const</span> FName&amp; GamePadKey, <span class="type">const</span> <span class="keyword">auto</span> NewAxisValue, <span class="type">const</span> <span class="type">float</span> NewAxisValueNormalized, <span class="keyword">auto</span>&amp; OldAxisValue, <span class="type">const</span> <span class="keyword">auto</span> DeadZone) &#123;</span><br><span class="line">        <span class="keyword">if</span> (OldAxisValue != NewAxisValue || FMath::<span class="built_in">Abs</span>((int32)NewAxisValue) &gt; DeadZone)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageHandler-&gt;<span class="built_in">OnControllerAnalog</span>(GamePadKey, ControllerState.ControllerId, NewAxisValueNormalized);</span><br><span class="line">        &#125;</span><br><span class="line">        OldAxisValue = NewAxisValue;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; Gamepad = XInputState.Gamepad;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">OnControllerAnalog</span>(FGamepadKeyNames::LeftAnalogX, Gamepad.sThumbLX, <span class="built_in">ShortToNormalizedFloat</span>(Gamepad.sThumbLX), ControllerState.LeftXAnalog, XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE);</span><br><span class="line">    <span class="built_in">OnControllerAnalog</span>(FGamepadKeyNames::LeftAnalogY, Gamepad.sThumbLY, <span class="built_in">ShortToNormalizedFloat</span>(Gamepad.sThumbLY), ControllerState.LeftYAnalog, XINPUT_GAMEPAD_LEFT_THUMB_DEADZONE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">OnControllerAnalog</span>(FGamepadKeyNames::RightAnalogX, Gamepad.sThumbRX, <span class="built_in">ShortToNormalizedFloat</span>(Gamepad.sThumbRX), ControllerState.RightXAnalog, XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE);</span><br><span class="line">    <span class="built_in">OnControllerAnalog</span>(FGamepadKeyNames::RightAnalogY, Gamepad.sThumbRY, <span class="built_in">ShortToNormalizedFloat</span>(Gamepad.sThumbRY), ControllerState.RightYAnalog, XINPUT_GAMEPAD_RIGHT_THUMB_DEADZONE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">OnControllerAnalog</span>(FGamepadKeyNames::LeftTriggerAnalog, Gamepad.bLeftTrigger, Gamepad.bLeftTrigger / <span class="number">255.f</span>, ControllerState.LeftTriggerAnalog, XINPUT_GAMEPAD_TRIGGER_THRESHOLD);</span><br><span class="line">    <span class="built_in">OnControllerAnalog</span>(FGamepadKeyNames::RightTriggerAnalog, Gamepad.bRightTrigger, Gamepad.bRightTrigger / <span class="number">255.f</span>, ControllerState.RightTriggerAnalog, XINPUT_GAMEPAD_TRIGGER_THRESHOLD);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>in this case, <code>OnControllerAnalog()</code> is called even a tiny change of input value exists. because the code compares with <code>OldAxisValue != NewAxisValue</code>. the function will not be called only when there is no change on input value.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;this post covers&lt;ul&gt;
&lt;li&gt;key mapping of Xbox One controller in UnrealEngine&lt;/li&gt;
&lt;li&gt;how UnrealEngine handles input from user&lt;/li&gt;
</summary>
      
    
    
    
    
    <category term="UnrealEngine" scheme="https://baemincheon.github.io/tags/UnrealEngine/"/>
    
  </entry>
  
</feed>
